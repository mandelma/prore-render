{"version":3,"file":"js/14.f5991d39.js","mappings":"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","sources":["webpack://prore-mongo/./src/service/recipients.js","webpack://prore-mongo/./src/pages/ProviderPublic.vue","webpack://prore-mongo/./src/components/location.js","webpack://prore-mongo/./src/pages/ProviderPublic.vue?dc7a"],"sourcesContent":["const axios = require('axios');\r\n\r\nconst baseUrl = '/api/recipients';\r\n\r\nconst getRecipients = async () => {\r\n    const results = await axios.get(baseUrl);\r\n    return results.data;\r\n}\r\n\r\nconst addRecipient = async (id, newRecipient) => {\r\n    const recipient = await axios.post(`${baseUrl}/${id}`, newRecipient);\r\n    return recipient.data;\r\n}\r\n\r\nexport default { getRecipients, addRecipient }","<template>\r\n  <div>\r\n    <MDBContainer\r\n        style=\"position: relative; z-index:1;\r\n        opacity: 0.8;\r\n        margin-top: 60px;\"\r\n    >\r\n      <div class=\"ui large segment form\">\r\n        <div class=\"field\">\r\n          <select v-model=\"prof\" @click=\"renderClients($event)\">\r\n            <option disabled value=\"\">Valitse ammattisi</option>\r\n            <option value=\"Putkimies\">Putkimies</option>\r\n            <option>Sähkömies</option>\r\n            <option value=\"Siivooja\">Siivooja</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <h3>{{prof}} Count: {{countOfActiveClients}} </h3>\r\n\r\n      <MDBBtn color=\"info\"\r\n              size=\"lg\"\r\n              block\r\n              style=\"position: relative; z-index:1; opacity: 0.8;\"\r\n      >\r\n        Tarjoa omaa palvelua\r\n      </MDBBtn>\r\n      <MDBBtn color=\"success\"\r\n              size=\"lg\"\r\n              block\r\n              @click=\"showClientLocationOnTheMap\"\r\n              style=\"position: relative; z-index:1; opacity: 0.8;\"\r\n      >\r\n        Recipients test\r\n      </MDBBtn>\r\n      <MDBBtn color=\"danger\"\r\n              size=\"lg\"\r\n              block\r\n              @click=\"$router.push('/')\"\r\n              style=\"position: relative; z-index:1; opacity: 0.8;\"\r\n      >\r\n        Poistu\r\n      </MDBBtn>\r\n\r\n    </MDBContainer>\r\n\r\n    <!--\r\n    <section\r\n        style=\"position: relative; z-index:1;\r\n        background-color: white;\r\n        opacity: 0.8;\r\n        margin-top: 60px;\"\r\n    >\r\n      <div>10 people around you need: {{ prof }}</div>\r\n\r\n      <div class=\"ui large segment form\">\r\n        <div class=\"field\">\r\n          <select v-model=\"prof\">\r\n            <option disabled value=\"\">Valitse ammattisi</option>\r\n            <option>Putkimies</option>\r\n            <option>Sähkömies</option>\r\n            <option>Siivooja</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"ui form\">\r\n        <div class=\"field\">\r\n          <select v-model=\"dist\">\r\n            <option disabled value=\"\">Valitse etäisyys</option>\r\n            <option>20 km</option>\r\n            <option>30 km</option>\r\n            <option>40 km</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n\r\n    </section>\r\n    -->\r\n\r\n    <section id=\"map\"></section>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\n/*global google*/\r\nimport axios from 'axios'\r\nimport recipientService from '../service/recipients'\r\nimport {\r\n  MDBContainer,\r\n  MDBInput,\r\n  MDBBtn\r\n} from \"mdb-vue-ui-kit\";\r\nimport gMap from '../components/location'\r\n//import key from '@/config/keys'\r\n\r\nexport default {\r\n  name: \"provider-public\",\r\n  components: {\r\n    MDBContainer,\r\n    MDBInput,\r\n    MDBBtn\r\n  },\r\n  data () {\r\n    return {\r\n      prof: \"\",\r\n      countOfActiveClients: null,\r\n      //spinner: false,\r\n      myLat: null,\r\n      mylng: null,\r\n      la: null,\r\n      ln: null\r\n    }\r\n  },\r\n  mounted () {\r\n    //document.getElementById(\"autocomplete\")\r\n\r\n    //this.getCurrentPosition ()\r\n\r\n    //gMap.userCurrentLocation (\"map\");\r\n\r\n\r\n    //gMap.userCurrentLocation (\"map\")\r\n\r\n    this.getCurrentPosition()\r\n\r\n\r\n    //gMap.userCurrentCoords ()\r\n    //this.showClientLocationOnTheMap(this.prof)\r\n\r\n\r\n  },\r\n  methods: {\r\n    renderClients (event) {\r\n      console.log(\"Event value \" + event.target.value)\r\n\r\n      if (event.target.value) {\r\n        this.showClientLocationOnTheMap(event.target.value)\r\n\r\n      }\r\n\r\n      this.countOfActiveClients = gMap.clientCount\r\n\r\n      console.log(\"Clients here: \" + this.countOfActiveClients)\r\n\r\n      event.target.value = \"\"\r\n    },\r\n    geolocationSuccess (pos) {\r\n      console.log(\"Geo latitude- \" + pos.coords.latitude)\r\n      console.log(\"Geo longitude- \" + pos.coords.longitude)\r\n      this.la = pos.coords.latitude\r\n      this.lg = pos.coords.longitude\r\n\r\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\r\n        zoom: 13,\r\n        center: new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude),\r\n        mapTypeId: google.maps.MapTypeId.ROADMAP\r\n\r\n      });\r\n      new google.maps.Marker({\r\n        position: new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude),\r\n        map: map\r\n      })\r\n\r\n\r\n    },\r\n    geolocationError (err) {\r\n      console.log(\"Error here: \" + err)\r\n    },\r\n    getCurrentPosition () {\r\n\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n          this.geolocationSuccess,\r\n          this.geolocationError, {\r\n            timeout: 0,\r\n            enableHighAccuracy: true,\r\n            maximumAge: Infinity,\r\n            accuracy: 10\r\n          }\r\n\r\n      );\r\n\r\n\r\n    },\r\n    async showClientLocationOnTheMap (profession) {\r\n\r\n      const recipients = await recipientService.getRecipients()\r\n      if (recipients) {\r\n        gMap.otherUserLocations(recipients, profession,\"map\");\r\n      }\r\n\r\n\r\n    },\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.ui.button,\r\n.dot.circle {\r\n  background-color: #ff5a5f;\r\n  color: white;\r\n}\r\n\r\n.pac-icon {\r\n  display: none;\r\n}\r\n.pac-item {\r\n  padding: 10px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n}\r\n.pac-item:hover {\r\n  background-color: #ececec;\r\n}\r\n.pac-item-query {\r\n  font-size: 16px;\r\n}#map {\r\n   position: absolute;\r\n   top: 50px;\r\n   right: 0;\r\n   bottom: 0;\r\n   left: 0;\r\n }\r\n\r\n</style>","/*global google*/\r\n\r\nlet myLat;\r\nlet myLng;\r\n\r\nlet clientCount = 0;\r\n\r\nexport default {\r\n    clientCount,\r\n    showUserLocationOnTheMap (latitude, longitude, mapId) {\r\n        let map = new google.maps.Map(document.getElementById(mapId), {\r\n            zoom: 13,\r\n            center: new google.maps.LatLng(latitude, longitude),\r\n            mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n            accuracy: 0,\r\n\r\n        });\r\n        new google.maps.Marker({\r\n            position: new google.maps.LatLng(latitude, longitude),\r\n            accuracy: 0,\r\n            map: map\r\n        })\r\n    },\r\n\r\n    userCurrentCoords () {\r\n        //let lat;\r\n        //let lng;\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            const { latitude, longitude } = position.coords;\r\n            // Show a map centered at latitude / longitude.\r\n            myLat = latitude;\r\n            myLng = longitude;\r\n            console.log(\"Lat now \" + latitude)\r\n            console.log(\"Lng now \" + longitude)\r\n        });\r\n\r\n        //return {latitude: lat, longitude: lng}\r\n    },\r\n\r\n    userCurrentLocation (mapId) {\r\n        // const watchId = navigator.geolocation.watchPosition(position => {\r\n        //   const { latitude, longitude } = position.coords;\r\n        //   // Show a map centered at latitude / longitude.\r\n        //   console.log(\"Position lat: \" + position.coords.latitude)\r\n        //   console.log(\"Position lng: \" + position.coords.longitude)\r\n        //   this.showUserLocationOnTheMap(position.coords.latitude, position.coords.longitude)\r\n        // });\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                const { latitude, longitude } = position.coords;\r\n                // Show a map centered at latitude / longitude.\r\n                myLat = latitude;\r\n                myLng = longitude;\r\n                console.log(\"Lat now \" + myLat)\r\n                console.log(\"Lng now \" + myLng)\r\n                this.showUserLocationOnTheMap (latitude, longitude, mapId)\r\n            });\r\n        } else {\r\n            console.log(\"Loading... or error?\")\r\n        }\r\n\r\n    },\r\n    otherUserLocations (recipients, profession, mapId) {\r\n        let map = new google.maps.Map(document.getElementById(mapId), {\r\n            zoom: 10,\r\n            center: new google.maps.LatLng(myLat, myLng),\r\n            mapTypeId: google.maps.MapTypeId.ROADMAP\r\n        });\r\n        console.log(\"Users count: \" + recipients.length)\r\n        if (recipients.length > 0) {\r\n            for (let pos = 0; pos < recipients.length; pos++) {\r\n\r\n                //console.log(\"Client latitude: \" + recipient[pos].latitude)\r\n                //console.log(\"Client longitude: \" + recipient[pos].longitude)\r\n\r\n                recipients[pos].professional.forEach(prof => {\r\n                    if (prof === profession) {\r\n                        clientCount += 1\r\n                        new google.maps.Marker({\r\n                            position: new google.maps.LatLng(recipients[pos].latitude, recipients[pos].longitude),\r\n                            map: map\r\n                        })\r\n                    }\r\n                })\r\n\r\n            }\r\n            console.log(\"Client count: \" + clientCount)\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n","import { render } from \"./ProviderPublic.vue?vue&type=template&id=6b8e84fa\"\nimport script from \"./ProviderPublic.vue?vue&type=script&lang=js\"\nexport * from \"./ProviderPublic.vue?vue&type=script&lang=js\"\n\nimport \"./ProviderPublic.vue?vue&type=style&index=0&id=6b8e84fa&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\majaa\\\\WebstormProjects\\\\prore-mongo\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["axios","require","baseUrl","getRecipients","async","results","get","data","addRecipient","id","newRecipient","recipient","post","class","_createElementVNode","disabled","value","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_createElementBlock","_createVNode","_component_MDBContainer","style","_hoisted_1","_hoisted_2","$data","prof","$event","onClick","_cache","$options","renderClients","_toDisplayString","countOfActiveClients","_component_MDBBtn","color","size","block","showClientLocationOnTheMap","_ctx","$router","push","_hoisted_8","myLat","myLng","clientCount","showUserLocationOnTheMap","latitude","longitude","mapId","map","google","maps","Map","document","getElementById","zoom","center","LatLng","mapTypeId","MapTypeId","ROADMAP","accuracy","Marker","position","userCurrentCoords","navigator","geolocation","getCurrentPosition","coords","console","log","userCurrentLocation","this","otherUserLocations","recipients","profession","length","pos","professional","forEach","name","components","MDBContainer","MDBInput","MDBBtn","mylng","la","ln","mounted","methods","event","target","gMap","geolocationSuccess","lg","geolocationError","err","timeout","enableHighAccuracy","maximumAge","Infinity","recipientService","__exports__","render"],"sourceRoot":""}