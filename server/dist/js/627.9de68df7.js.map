{"version":3,"file":"js/627.9de68df7.js","mappings":"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","sources":["webpack://prore-mongo/./src/pages/ProGallery.vue","webpack://prore-mongo/./src/pages/ProGallery.vue?115c","webpack://prore-mongo/./src/components/notifications/errorMessage.js"],"sourcesContent":["<template>\r\n  <MDBContainer>\r\n    <h2 style=\"margin-bottom: 27px;\">Kuvat omista palveluista!</h2>\r\n\r\n\r\n    <MDBRow>\r\n      <MDBCol lg=\"4\" v-for=\"(item, i) in proImages\" :key=\"i\">\r\n<!--        require(`/server/uploads/${img.image}`)-->\r\n        <div class=\"panel\">\r\n          <img\r\n              class=\"proRefLoading\"\r\n              :src=\"item.blob ? item.blob : item.imageUrl\"\r\n              :alt=\"item.name\"\r\n          />\r\n          <button class=\"img_btn\" @click=\"pressEditPanel(i)\">Muokkaa</button>\r\n        </div>\r\n\r\n\r\n<!--        <MDBBtn v-if=\"!isEdit\" block outline=\"success\" @click=\"pressEditPanel(i)\">Muokkaa</MDBBtn>-->\r\n        <div class=\"edit-panel\" v-if=\"isEditPanel && imgIndex === i\">\r\n          <error-message :message = wrongSizeTypeMessage />\r\n          <MDBRow>\r\n            <MDBCol>\r\n              <MDBBtnClose\r\n                  v-if=\"!value\"\r\n                  white\r\n                  class=\"close-btn\"\r\n                  style=\"float: right;\"\r\n                  @click=\"closeEditPanel\"\r\n              />\r\n              <input  id=\"pro-upload\" type=\"file\" @change=\"handleFileChange($event, i)\"/>\r\n              <label  for=\"pro-upload\" class=\"pro-file-upload\">\r\n                  <span v-if=\"value\">\r\n                  Muokka tehtävän kuvausta: {{value.name}}\r\n\r\n                   </span>\r\n                <span v-else>Valitse uusi kuva tehtävästä</span>\r\n              </label>\r\n              <MDBBtn v-if=\"isEdit\" block color=\"success\" @click=\"editRefImage(i, item)\">Upload edited image</MDBBtn>\r\n              <MDBBtn class=\"btn\" block size=\"lg\" color=\"danger\" @click=\"removeRefImage(i, item)\">Poista kuva</MDBBtn>\r\n            </MDBCol>\r\n            <MDBCol v-if=\"value\">\r\n              <MDBBtnClose\r\n                  white\r\n                  class=\"close-btn\"\r\n                  style=\"float: right;\"\r\n                  @click=\"closeEditPanel\"\r\n              />\r\n              <img\r\n                  style=\"width:100px; padding-top: 20px;\"\r\n                  :src=\"this.showImage\"\r\n                  alt=\"addEdit\"\r\n              />\r\n            </MDBCol>\r\n          </MDBRow>\r\n\r\n        </div>\r\n\r\n      </MDBCol>\r\n    </MDBRow>\r\n\r\n\r\n    <MDBBtn v-if=\"!isPressedAdd\" block color=\"warning\" @click=\"pressAddImage\" style=\"margin-top: 13px;\">Lisää uusi kuva tehtävästä</MDBBtn>\r\n    <div class=\"add-panel\" v-if=\"isPressedAdd && isAddPanel\">\r\n\r\n      <error-message :message = wrongSizeTypeMessage />\r\n      <MDBRow>\r\n\r\n        <MDBCol>\r\n          <MDBBtnClose\r\n              v-if=\"!value\"\r\n              white\r\n              class=\"close-btn\"\r\n              @click=\"closeAddPanel\"\r\n          />\r\n          <input   id=\"add-upload\" type=\"file\" @change=\"handleFileChange($event, i)\"/>\r\n          <label  for=\"add-upload\" class=\"pro-file-upload\">\r\n                  <span v-if=\"value\">\r\n                  Muokka tehtävän kuvausta: {{value.name}}\r\n                   </span>\r\n            <span v-else>Valitse lisää kuva tehtävästä</span>\r\n          </label>\r\n          <MDBBtn v-if=\"isAdd\" block outline=\"primary\" @click=\"addRefImage\">Tallenna kuva</MDBBtn>\r\n        </MDBCol>\r\n        <MDBCol v-if=\"value\">\r\n          <MDBBtnClose\r\n              class=\"close-btn\"\r\n              white\r\n              @click=\"closeAddPanel\"\r\n          />\r\n          <img\r\n              style=\"width:100px\"\r\n              :src=\"this.showImage\"\r\n              alt=\"addShow\"\r\n          />\r\n        </MDBCol>\r\n      </MDBRow>\r\n\r\n    </div>\r\n\r\n<!--    images {{proImages}}-->\r\n<!--    <MDBBtn color=\"success\" @click=\"getUser\">Get provider booking</MDBBtn>-->\r\n\r\n\r\n\r\n<!--    pro images: {{proImages}}<br>-->\r\n<!--    error message {{wrongSizeTypeMessage}}-->\r\n  </MDBContainer>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\nimport {\r\n  MDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn,\r\n    MDBBtnClose\r\n} from 'mdb-vue-ui-kit'\r\nimport imageService from \"@/service/image\";\r\nimport awsUploadService from '@/service/awsUploads'\r\nimport providerService from \"@/service/providers\";\r\nimport errorMessage from '../components/notifications/errorMessage'\r\nimport socket from \"@/socket\";\r\nimport recipientService from \"@/service/recipients\";\r\n//import socket from \"@/socket\";\r\nexport default {\r\n  name: \"ProGallery\",\r\n  props: {\r\n    provider: null,\r\n    proImages: Array\r\n  },\r\n  components: {\r\n    errorMessage,\r\n    MDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn,\r\n    MDBBtnClose,\r\n\r\n  },\r\n  data () {\r\n    return {\r\n\r\n      IMAGE_SIZE: 1000000,\r\n      value: null,\r\n      showImage: null,\r\n      files: null,\r\n      imgIndex: null,\r\n      isAdd: false,\r\n      isEdit: false,\r\n      isEditPanel: false,\r\n      isPressedAdd: false,\r\n      isAddPanel: false,\r\n      wrongSizeTypeMessage: null\r\n    }\r\n  },\r\n  methods: {\r\n    // getUser () {\r\n    //   this.provider.booking.forEach(b => {\r\n    //     console.log(\"Booking info \" + b.user.username);\r\n    //\r\n    //   })\r\n    // },\r\n    async sendReadableFileToRecipients (imageID, action) {\r\n      let recipients = [];\r\n      this.provider.booking.forEach(b => {\r\n        console.log(\"Booking info \" + b.user.username);\r\n        recipients = [\r\n            ...recipients,\r\n            b.user.id\r\n        ]\r\n      })\r\n      const data = new FormData();\r\n      data.append('file', this.files, this.files.name);\r\n\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = (e) => {\r\n        const bytes = new Uint8Array(e.target.result);\r\n        console.log(\"FILES IN gallery.... \" + this.files)\r\n\r\n        // const imgBytes = {\r\n        //   id: ,\r\n        //   bytes: bytes\r\n        // }\r\n\r\n        socket.emit(\"created file for recipients\", imageID, bytes, this.provider.id, recipients, action);\r\n      };\r\n      reader.readAsArrayBuffer(this.files);\r\n    },\r\n    handleFileChange(e, i) {\r\n      this.imgIndex = i;\r\n      try {\r\n\r\n        const files = e.target.files[0]\r\n        console.log('event target client ', e.target.files[0])\r\n\r\n        if (files) {\r\n          //const tempImage = URL.createObjectURL(files)\r\n          //this.tempImages.push(tempImage);\r\n          this.showImage = URL.createObjectURL(files)\r\n          //this.file = e.target.files[0];\r\n          this.files = e.target.files[0];\r\n\r\n          this.isAdd = true;\r\n          this.isEdit = true;\r\n        }\r\n\r\n      } catch (err) {\r\n        console.log('Error:', err)\r\n      }\r\n\r\n      this.value = e.target.files[0]\r\n\r\n    },\r\n    pressAddImage () {\r\n      this.isAdd = false\r\n      this.isEdit = false;\r\n      this.isEditPanel = false;\r\n      this.isPressedAdd = true;\r\n      this.isAddPanel = true;\r\n    },\r\n    pressEditPanel (index) {\r\n      this.isEdit = false;\r\n      this.value = null;\r\n      this.imgIndex = index;\r\n      this.isPressedAdd = false;\r\n      this.isEditPanel = true;\r\n      this.isAddPanel = false\r\n    },\r\n    closeEditPanel () {\r\n      this.isAddPanel = false\r\n      this.isEditPanel = false\r\n      this.isEdit = false;\r\n      this.value = null;\r\n    },\r\n    closeAddPanel () {\r\n      this.isAddPanel = false\r\n      this.isPressedAdd = false;\r\n      this.value = null;\r\n    },\r\n    async addRefImage () {\r\n      this.value = null;\r\n      this.isAddPanel = false;\r\n      this.isAdd = false;\r\n      this.isPressedAdd = false;\r\n      const data = new FormData();\r\n\r\n      data.append('file', this.files, this.files.name)\r\n      console.log(\"IMG pro size - \" + this.files.size);\r\n\r\n      console.log(\"Image pro type_ \" + this.files.type);\r\n      console.log(\"AAA \" + this.provider.user.id)\r\n      const type = this.files.type;\r\n      if (type ===\"image/jpeg\" || type === \"image/jpg\" || type === \"image/png\" || type === \"image/gif\") {\r\n        console.log(\"Pildi formaat on OK\")\r\n        if (this.files.size <= this.IMAGE_SIZE) {\r\n\r\n          //const reader = new FileReader();\r\n\r\n          // const img = await imageService.createProRefImg(this.provider.user.id, data);\r\n          const img = await awsUploadService.uploadProImage(data)\r\n\r\n          if (img) {\r\n            console.log(\"Pro image id is: \" + img.id)\r\n            //await recipientService.addImage(this.booking.id, img.imgCreated._id)\r\n\r\n\r\n            // await providerService.addProSlide(this.provider.id, {slideID: img.imgCreated._id});\r\n\r\n            await providerService.addProSlide(this.provider.id, {slideID: img.id});\r\n\r\n            //\r\n            const _image = {\r\n              _id: img.id,\r\n              key: img.key,\r\n              blob: this.showImage\r\n            }\r\n\r\n\r\n\r\n\r\n            this.$emit(\"addProImage\", _image);\r\n\r\n            await this.sendReadableFileToRecipients(img.id, 'add');\r\n\r\n\r\n            this.isEdit = false;\r\n\r\n          }\r\n        } else {\r\n\r\n          console.log(\"Pildi suurus peab olema väiksem kui 1 MB\");\r\n          this.isAddPanel = true\r\n          this.isPressedAdd = true;\r\n          this.wrongSizeTypeMessage = \"Kuvan maximi koko on 3 MB.\";\r\n\r\n          setTimeout(() => {\r\n            this.wrongSizeTypeMessage = null;\r\n          }, 3000);\r\n        }\r\n      }\r\n      else {\r\n        console.log(\"Pildi formaat on FAKE\")\r\n        this.isAddPanel = true\r\n        this.isPressedAdd = true;\r\n        this.wrongSizeTypeMessage = \"Väärä formaati. Kuva pitäisi olla jpeg, jpg, png tai gif formaatissa!\";\r\n        setTimeout(() => {\r\n          this.wrongSizeTypeMessage = null;\r\n        }, 3000);\r\n      }\r\n\r\n    },\r\n    async editRefImage (index, img) {\r\n\r\n      // imgIndex: null,\r\n      //     isAdd: false,\r\n      //     isEdit: false,\r\n      //     isEditPanel: false,\r\n      //     isPressedAdd: false,\r\n      //     isAddPanel: false,\r\n      //     wrongSizeTypeMessage: null\r\n\r\n      console.log(\"Edited image index is: \" + index);\r\n\r\n      this.isEditPanel = false;\r\n      this.isEdit = false;\r\n\r\n      const data = new FormData();\r\n      data.append('file', this.files, this.files.name)\r\n\r\n      console.log(\"Image id \" + this.proImages[index]._id)\r\n      const imgType = this.files.type;\r\n      if (imgType ===\"image/jpeg\" || imgType === \"image/jpg\" || imgType === \"image/png\" || imgType === \"image/gif\") {\r\n        if (this.files.size <= this.IMAGE_SIZE) {\r\n          // -----------------------------------------------\r\n          //const image = await imageService.updateImage(this.images[index]._id, data);\r\n          console.log(\"Image id to edit \" + this.proImages[index]._id);\r\n          //const changeImg = await imageService.editProRefImage(this.proImages[index]._id, data);\r\n          const changeImg = await awsUploadService.editProImage(img._id, img.key, data);\r\n\r\n          if (changeImg) {\r\n            console.log(\"Edited pro image key: \" + changeImg.key);\r\n            this.$emit(\"editProRefImage\", index, img._id, changeImg.key, this.showImage);\r\n\r\n            await this.sendReadableFileToRecipients(changeImg.id, 'edit');\r\n\r\n            // this.images[this.imageIndex] = {_id: this.images[index]._id, blob: this.showImage}\r\n            //\r\n            // this.images.forEach(img => {\r\n            //   console.log(\"Image name \" + img._id)\r\n            // })\r\n\r\n            // console.log(\"ORDRED in EDIT pikkus \" + this.booking.ordered.length)\r\n            // let ordered = [];\r\n            // this.booking.ordered.forEach(b => {\r\n            //   console.log(\"CVCVCV \" + b.user.username);\r\n            //   ordered = ordered.concat(b.user.id);\r\n            // })\r\n            //\r\n            // const reader = new FileReader();\r\n            //\r\n            // if (this.file) {\r\n            //   reader.onload = (e) => {\r\n            //     const bytes = new Uint8Array(e.target.result);\r\n            //     console.log(\"FILES.... \" + this.files)\r\n            //\r\n            //     const image_id = image._id;\r\n            //\r\n            //     socket.emit(\"display edited booking image\", image_id, bytes, this.booking.id, ordered)\r\n            //\r\n            //   };\r\n            //   reader.readAsArrayBuffer(this.files);\r\n            // }\r\n\r\n            // console.log(\"New image id is \" + image._id)\r\n            // this.imgId = image._id;\r\n            this.file = null;\r\n\r\n            this.isEditPanel = false;\r\n\r\n\r\n            this.closeAddPanel();\r\n\r\n          }\r\n        } else {\r\n          this.isEditPanel = true;\r\n          this.closeAddPanel();\r\n          this.wrong_SizeType_Message = \"Väärä formaati. Kuva pitäisi olla jpeg, jpg, png tai gif formaatissa!\";\r\n          setTimeout(() => {\r\n            this.wrong_SizeType_Message = null;\r\n          }, 3000);\r\n        }\r\n\r\n      }else {\r\n        this.isEditPanel = true;\r\n        this.closeAddPanel();\r\n        this.wrong_SizeType_Message = \"Kuvan maximi koko on oltava 3 MB!\";\r\n        setTimeout(() => {\r\n          this.wrong_SizeType_Message = null;\r\n        }, 3000);\r\n      }\r\n\r\n\r\n    },\r\n    async removeRefImage (index, image) {\r\n      //this.value = null;\r\n      if (!this.proImages[index].blob) {\r\n        console.log(\"removed image is blob\")\r\n\r\n      }\r\n\r\n      let clients = [];\r\n      this.provider.booking.forEach(pb => {\r\n        console.log(\"Booking info -- removing \" + pb.user.username);\r\n        clients = [\r\n          ...clients,\r\n          pb.user.id\r\n        ]\r\n      })\r\n\r\n      console.log(\"removable image id is \" + this.proImages[index]._id)\r\n\r\n      //await imageService.removeProRefImage(this.proImages[index]._id, this.provider.id);\r\n\r\n      await awsUploadService.deleteImage(image._id, image.key);\r\n\r\n      // await recipientService.removeImage(this.booking.id, this.images[id]._id);\r\n      // await imageService.remove(this.images[id]._id, this.booking.id);\r\n\r\n\r\n\r\n      //socket.emit(\"stop display booking image\", this.images[id]._id, this.booking, bIDs);\r\n\r\n      this.$emit(\"removeProRefImage\", index);\r\n      socket.emit(\"remove recipient side pro ref image\", image._id, this.provider.id, clients);\r\n\r\n      this.isEditPanel = false;\r\n\r\n    },\r\n    // transparent\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nimg.proRefLoading {\r\n  width: 100%;\r\n  margin: 0 13px 13px 0;\r\n  background: #1f1b1b url(https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif) no-repeat scroll center center;\r\n}\r\ninput[type=\"file\"] {\r\n  display: none;\r\n}\r\n.pro-file-upload {\r\n  width: 100%;\r\n\r\n  color: white;\r\n  font-size: 18px;\r\n  background-color: #87958e;\r\n  border: 1px solid #ccc;\r\n  display: inline-block;\r\n  padding: 20px 12px;\r\n  margin-bottom: 0;\r\n  cursor: pointer;\r\n}\r\n.edit-panel {\r\n  border: solid grey;\r\n  padding: 20px;\r\n  margin: 20px 0 20px 0;\r\n}\r\n.add-panel {\r\n  border: solid grey;\r\n  padding: 20px;\r\n  margin: 20px 0 20px 0;\r\n}\r\n.btn {\r\n  padding: 20px;\r\n  margin: 20px 0 20px 0;\r\n}\r\n.close-btn {\r\n  float: right;\r\n  padding: 20px;\r\n}\r\n\r\n\r\n/* Container needed to position the button. Adjust the width as needed */\r\n.panel {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n/* Make the image responsive */\r\n.panel img {\r\n  width: 100%;\r\n  height: auto;\r\n}\r\n\r\n/* Style the button and place it in the middle of the container/image */\r\n.panel .img_btn {\r\n  position: absolute;\r\n  top: 85%;\r\n  left: 80%;\r\n  transform: translate(-50%, -50%);\r\n  -ms-transform: translate(-50%, -50%);\r\n  background-color: #555;\r\n  opacity: 0.5;\r\n  color: white;\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n  border: none;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n}\r\n\r\n.panel .btn:hover {\r\n  background-color: black;\r\n}\r\n</style>","import { render } from \"./ProGallery.vue?vue&type=template&id=36438f50&scoped=true\"\nimport script from \"./ProGallery.vue?vue&type=script&lang=js\"\nexport * from \"./ProGallery.vue?vue&type=script&lang=js\"\n\nimport \"./ProGallery.vue?vue&type=style&index=0&id=36438f50&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-36438f50\"]])\n\nexport default __exports__","const ErrorMessage = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n\n        <div className=\"error\">\n            {message}\n            <img className={'errorImg'} alt={'error'} src={require('@/assets/error.png')}/>\n\n        </div>\n\n    )\n}\n\nexport default ErrorMessage"],"names":["class","key","for","_createBlock","_component_MDBContainer","default","_withCtx","_createElementVNode","style","_createVNode","_component_MDBRow","_createElementBlock","_Fragment","_renderList","$props","proImages","item","i","_component_MDBCol","lg","_hoisted_1","src","blob","imageUrl","alt","name","_hoisted_2","onClick","$event","$options","pressEditPanel","_hoisted_3","$data","isEditPanel","imgIndex","_hoisted_4","_component_error_message","message","wrongSizeTypeMessage","value","_createCommentVNode","_component_MDBBtnClose","white","closeEditPanel","id","type","onChange","handleFileChange","_hoisted_5","_hoisted_6","_hoisted_7","_toDisplayString","_hoisted_8","isEdit","_component_MDBBtn","block","color","editRefImage","_cache","_createTextVNode","_","size","removeRefImage","showImage","_hoisted_9","isPressedAdd","pressAddImage","isAddPanel","_hoisted_10","closeAddPanel","_ctx","_hoisted_11","_hoisted_12","_hoisted_13","isAdd","outline","addRefImage","_hoisted_14","props","provider","Array","components","errorMessage","MDBContainer","MDBRow","MDBCol","MDBBtn","MDBBtnClose","data","IMAGE_SIZE","files","methods","sendReadableFileToRecipients","imageID","action","recipients","this","booking","forEach","b","console","log","user","username","FormData","append","reader","FileReader","onload","e","bytes","Uint8Array","target","result","socket","emit","readAsArrayBuffer","URL","createObjectURL","err","index","img","awsUploadService","uploadProImage","providerService","addProSlide","slideID","_image","_id","$emit","setTimeout","imgType","changeImg","editProImage","file","wrong_SizeType_Message","image","clients","pb","deleteImage","__exports__","render","ErrorMessage","require"],"sourceRoot":""}