{"version":3,"file":"js/138.5ff2d543.js","mappings":"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","sources":["webpack://prore-mongo/./src/components/notifications/errorMessage.js","webpack://prore-mongo/./src/components/RegisterForm.vue","webpack://prore-mongo/./src/service/googleAuth.js","webpack://prore-mongo/./src/components/RegisterForm.vue?33ca"],"sourcesContent":["const ErrorMessage = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n\n        <div className=\"error\">\n            {message}\n            <img className={'errorImg'} alt={'error'} src={require('@/assets/error.png')}/>\n\n        </div>\n\n    )\n}\n\nexport default ErrorMessage","<template>\n  <div>\n<!--    <h2 style=\"margin-top: 50px; text-align: center\">- Rekisteröintilomake -</h2>-->\n    <MDBContainer style=\"margin-top: 50px;\">\n\n      <registerError\n          :message = registerErrorMessage\n      />\n      <registerError\n          :message = usernameExisting\n      />\n      <registerError\n          :message = registerEmailErrorMessage\n      />\n      <register-error\n        :message = registerPwRepeatErrorMessage\n      />\n      <form class=\"register\" @submit.prevent=\"userData\" autocomplete=\"off\">\n        <!-- 2 column grid layout with text inputs for the first and last names -->\n        <!-- First name input -->\n\n        <MDBInput\n            type=\"text\"\n            size=\"lg\"\n            label=\"Etunimi\"\n            white\n            id=\"registerFirstName\"\n            v-model=\"registerFirstName\"\n            wrapperClass=\"mb-4\"\n        />\n\n        <!-- Last name input -->\n        <MDBInput\n            type=\"text\"\n            size=\"lg\"\n            label=\"Sukunimi\"\n            white\n            id=\"registerLastName\"\n            v-model=\"registerLastName\"\n            wrapperClass=\"mb-4\"\n        />\n\n        <!-- Username input -->\n        <MDBInput\n            type=\"text\"\n            size=\"lg\"\n            label=\"käyttäjätunnus\"\n            white\n            id=\"registerUsername\"\n            v-model=\"registerUsername\"\n            wrapperClass=\"mb-4\"\n        />\n        <!-- Email input -->\n        <MDBInput\n            type=\"text\"\n            size=\"lg\"\n            label=\"Email\"\n            white\n            id=\"registerEmail\"\n            v-model=\"registerEmail\"\n            wrapperClass=\"mb-4\"\n        />\n<!--        <div>-->\n<!--          Email is {{isValidEmail ? 'valid' : 'invalid'}}-->\n<!--        </div>-->\n        <!-- Password input -->\n        <MDBInput\n            type=\"password\"\n            size=\"lg\"\n            label=\"Salasana\"\n            white\n            id=\"registerPassword\"\n            v-model=\"registerPassword\"\n            wrapperClass=\"mb-4\"\n        />\n\n        <!-- Repeat Password input -->\n        <MDBInput\n            type=\"password\"\n            size=\"lg\"\n            label=\"Toista salasana\"\n            white\n            id=\"registerPasswordRepeat\"\n            v-model=\"registerPasswordRepeat\"\n            wrapperClass=\"mb-4\"\n        />\n\n        <!-- Checkbox -->\n        <MDBCheckbox\n            label=\"Muista minut\"\n            white\n            size=\"lg\"\n            id=\"registerSubscribeCheck\"\n            v-model=\"registerSubscribeCheck\"\n            wrapperClass=\"d-flex justify-content-center mb-4\"\n        />\n\n<!--        <input required=\"required\" v-model=\"registerEmail\" :error-messages=\"emailErrors\"-->\n<!--               @input=\"$v.registerEmail.$touch()\" @blur=\"$v.registerEmail.$touch()\" label=\"Email\"-->\n<!--               />-->\n\n        <!-- Submit button -->\n        <MDBBtn outline=\"primary\" size=\"lg\" type=\"submit\"  block class=\"mb-4\"> Luo tili </MDBBtn>\n\n        <!-- Register buttons -->\n<!--        <div class=\"text-center\">-->\n<!--          <p>Tai registeröidy käyttämällä:</p>-->\n<!--          <MDBBtn color=\"secondary\" floating class=\"mx-1\">-->\n<!--            <MDBIcon iconStyle=\"fab\" icon=\"facebook-f\" />>-->\n<!--          </MDBBtn>-->\n\n<!--          <MDBBtn color=\"secondary\" floating class=\"mx-1\" @click=\"handleGoogleAuth\">-->\n<!--            <MDBIcon iconStyle=\"fab\" icon=\"google\" />-->\n<!--          </MDBBtn>-->\n\n<!--          <MDBBtn color=\"secondary\" floating class=\"mx-1\">-->\n<!--            <MDBIcon iconStyle=\"fab\" icon=\"twitter\" />-->\n<!--          </MDBBtn>-->\n\n<!--        </div>-->\n      </form>\n    </MDBContainer>\n\n  </div>\n\n</template>\n\n<script >\n/* eslint-disable */\n// import { validationMixin } from 'vuelidate'\n// import { required, email} from 'vuelidate/lib/validators'\nimport {\n  MDBContainer,\n  MDBInput,\n  MDBCheckbox,\n  MDBBtn,\n  MDBIcon\n} from \"mdb-vue-ui-kit\";\nimport { ref } from \"vue\";\nimport userService from \"@/service/users\";\nimport googleService from '@/service/googleAuth'\nimport loginService from \"@/service/login\";\nimport registerError from '../components/notifications/errorMessage'\nimport '@/css/style.css';\nimport '@/css/notification.css'\n\n\nexport default {\n  name: \"app-register\",\n  components: {\n    registerError,\n    MDBContainer,\n    MDBInput,\n    MDBCheckbox,\n    MDBBtn,\n    MDBIcon\n  },\n  // mixins: [validationMixin],\n  // validations: {\n  //\n  //   email: { required, email },\n  //\n  // },\n  data () {\n    return {\n      registerErrorMessage: null,\n      registerEmailErrorMessage: null,\n      registerPwRepeatErrorMessage: null,\n      usernameExisting: null,\n\n    }\n  },\n\n  //  'YOUR_APP_CLIENT_ID.apps.googleusercontent.com'\n\n  setup() {\n    const registerFirstName = ref(\"\");\n    const registerLastName = ref(\"\");\n    const registerUsername = ref(\"\");\n    const registerEmail = ref(\"\");\n    const registerPassword = ref(\"\");\n    const registerPasswordRepeat = ref(\"\");\n    const registerSubscribeCheck = ref(true);\n\n    return {\n      registerLastName,\n      registerFirstName,\n      registerUsername,\n      registerEmail,\n      registerPassword,\n      registerPasswordRepeat,\n      registerSubscribeCheck\n    };\n  },\n  computed: {\n    isValidEmail() {\n      return /^[^@]+@\\w+(\\.\\w+)+\\w$/.test(this.registerEmail);\n    }\n  },\n  // computed: {\n  //   emailErrors () {\n  //     const errors = []\n  //     if (!this.$v.email.$dirty) return errors\n  //     !this.$v.email.email && errors.push('Must be valid e-mail')\n  //     !this.$v.email.required && errors.push('E-mail is required')\n  //     return errors\n  //   },\n  // },\n  methods: {\n    emailValidation () {\n  //     Vue.createApp({\n  //       data: () => ({ email: '', password: '', errors: null }),\n  //       methods: {\n  //         async submitForm() {\n  //           const errors = {};\n  //           if (!this.email) {\n  //             errors.email = 'Email is required';\n  //           } else if (!/^[^@]+@\\w+(\\.\\w+)+\\w$/.test(this.email)) {\n  //             errors.email = 'Invalid email';\n  //           }\n  //\n  //           if (Object.keys(errors).length > 0) {\n  //             this.errors = errors;\n  //             return;\n  //           } else {\n  //             this.errors = null;\n  //           }\n  //\n  //           // Handle submitting form\n  //         }\n  //       },\n  //       template: `\n  // <div>\n  //   <form @submit.prevent=\"submitForm\">\n  //     <div>\n  //       <input v-model=\"email\" placeholder=\"email\" />\n  //       <div v-if=\"errors && errors.email\">\n  //         {{errors.email}}\n  //       </div>\n  //     </div>\n  //     <div>\n  //       <input type=\"password\" v-model=\"password\" />\n  //     </div>\n  //     <div>\n  //       <button type=\"submit\">Register</button>\n  //     </div>\n  //   </form>\n  // </div>\n  // `\n  //     }).mount('#example2');\n    },\n    validateEmail() {\n      if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(this.email)) {\n        this.msg['email'] = 'Please enter a valid email address';\n      } else {\n        this.msg['email'] = '';\n      }\n    },\n    // New user data to send forward\n    async userData () {\n      const newUser = {\n        firstName: this.registerFirstName,\n        lastName: this.registerLastName,\n        username: this.registerUsername,\n        email: this.registerEmail,\n        password: this.registerPassword\n      }\n      if (this.registerFirstName !== \"\"\n          && this.registerLastName !== \"\"\n          && this.registerUsername !== \"\"\n          && this.registerPassword !== \"\"\n          && this.registerEmail !== \"\"\n      ) {\n\n        if (this.registerUsername.length < 4) {\n          this.registerErrorMessage = \"Username must be longer than 4 characters!\"\n          setTimeout(() => {\n            this.registerErrorMessage = null;\n          }, 2000);\n        } else if (!/^[^@]+@\\w+(\\.\\w+)+\\w$/.test(this.registerEmail)) {\n          this.registerEmailErrorMessage = \"Anna kelvollinen sähköpostiosoite!\";\n          setTimeout(() => {\n            this.registerEmailErrorMessage = null;\n          }, 2000);\n        } else if (this.registerPassword !== this.registerPasswordRepeat) {\n          this.registerPwRepeatErrorMessage = \"Salasana on oltava sama!\";\n          setTimeout(() => {\n            this.registerPwRepeatErrorMessage = null;\n          }, 2000);\n        }\n        else {\n          console.log(\"Uus kasutaja\")\n          const userExisting = await userService.addUser(newUser);\n          if (userExisting.error === \"username existing\") {\n            this.usernameExisting = \"Käyttäjätunnus on jo olemassa! Vaihda käyttäjätunnus\";\n            setTimeout(() => {\n              this.usernameExisting = null;\n            }, 2000);\n          } else if (userExisting.error === \"email existing\") {\n            this.registerEmailErrorMessage = \"Antamasi sähköpostiosoite on jo olemassa!\";\n            setTimeout(() => {\n              this.registerEmailErrorMessage = null;\n            }, 2000);\n          }\n          else {\n            console.log(\"Aga siin!!!\")\n            const loggedInUser = await loginService.login({username: this.registerUsername, password: this.registerPassword});\n            if (loggedInUser.error !== \"login error\") {\n              console.log(\"Aga siin veel!!!\")\n              this.$emit('register:data', loggedInUser)\n            } else {\n              console.log(\"Error with login! \" + loggedInUser.error)\n            }\n          }\n\n        }\n      } else {\n        this.registerErrorMessage = \"Kaikki kentät on täytettävä!!\"\n        setTimeout(() => {\n          this.registerErrorMessage = null;\n        }, 2000);\n      }\n      //await userService.addUser(newUser);\n\n      //const loggedInUser = await loginService.login({username: this.registerUsername, password: this.registerPassword});\n\n      //this.$emit('register:data', newUser)\n    }\n  }\n}\n</script>\n\n<style>\n.g-signin-button {\n  /* This is where you control how the button looks. Be creative! */\n  display: inline-block;\n  padding: 4px 8px;\n  border-radius: 3px;\n  background-color: #3c82f7;\n  color: #fff;\n  box-shadow: 0 3px 0 #0f69ff;\n}\n/*#app {*/\n/*  font-family: Roboto, Helvetica, Arial, sans-serif;*/\n\n/*  -webkit-font-smoothing: antialiased;*/\n/*  -moz-osx-font-smoothing: grayscale;*/\n/*  text-align: center;*/\n/*  !*color: #2c3e50;*!*/\n/*  color: red;*/\n/*}*/\n/*.error {*/\n/*  color: white;*/\n/*  background: #f5839c;*/\n/*  font-size: 20px;*/\n/*  border: solid #f75959;*/\n/*  border-radius: 5px;*/\n/*  padding: 10px;*/\n/*  margin-bottom: 10px;*/\n/*}*/\n/*.errorImg {*/\n/*  width: 50px;*/\n/*  margin-left: 20px;*/\n/*}*/\n</style>","const axios = require('axios')\r\n//import axios from 'axios'\r\nconst baseUrl = \"/auth/google\"\r\n// http://localhost:3001s\r\n\r\nconst getAll = async () => {\r\n    const response = await axios.get(baseUrl)\r\n    return response.data\r\n}\r\n\r\nconst getUser = async () => {\r\n    const res = await axios.get('/api/current_user');\r\n    return res.data;\r\n}\r\n\r\nexport default { getAll, getUser }","import { render } from \"./RegisterForm.vue?vue&type=template&id=434b7c72\"\nimport script from \"./RegisterForm.vue?vue&type=script&lang=js\"\nexport * from \"./RegisterForm.vue?vue&type=script&lang=js\"\n\nimport \"./RegisterForm.vue?vue&type=style&index=0&id=434b7c72&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["ErrorMessage","message","_createVNode","require","_createElementBlock","_component_MDBContainer","style","default","_withCtx","_component_registerError","$data","registerErrorMessage","usernameExisting","registerEmailErrorMessage","_component_register_error","registerPwRepeatErrorMessage","_createElementVNode","class","onSubmit","_cache","_withModifiers","args","$options","userData","autocomplete","_component_MDBInput","type","size","label","white","id","modelValue","$setup","registerFirstName","$event","wrapperClass","registerLastName","registerUsername","registerEmail","registerPassword","registerPasswordRepeat","_component_MDBCheckbox","registerSubscribeCheck","_component_MDBBtn","outline","block","_createTextVNode","_","name","components","registerError","MDBContainer","MDBInput","MDBCheckbox","MDBBtn","MDBIcon","data","setup","ref","computed","isValidEmail","test","this","methods","emailValidation","validateEmail","email","msg","newUser","firstName","lastName","username","password","length","setTimeout","console","log","userExisting","userService","addUser","error","loggedInUser","loginService","login","$emit","__exports__","render"],"sourceRoot":""}