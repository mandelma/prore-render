{"version":3,"file":"js/372.81721e22.js","mappings":"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","sources":["webpack://prore-mongo/./src/components/profession/proList.js","webpack://prore-mongo/./src/pages/ProviderPublic.vue","webpack://prore-mongo/./src/pages/ProviderPublic.vue?dc7a"],"sourcesContent":["// const list = [\r\n//     \"Siivooja\",\r\n//     \"Hitsaaja\",\r\n//     \"Bussikuski\"\r\n// ]\r\n\r\nconst construction = [\r\n    {\"label\": \"Hitsaaja\", \"value\": \"1\"},\r\n    {\"label\": \"Putkimies\", \"value\": \"2\"},\r\n    {\"label\": \"Sähkömies\", \"value\": \"3\"}\r\n]\r\nconst realEstate = [\r\n    {\"label\": \"Siivooja\", \"value\": \"4\"}\r\n]\r\n\r\n// const options = [\r\n//     {\"group\":\"Fruits\",\"options\":[{\"label\":\"Apple\",\"value\":\"f-1\"},{\"label\":\"Banana\",\"value\":\"f-2\"},{\"label\":\"Orange\",\"value\":\"f-3\"}]},\r\n//     {\"label\":\"Chocolate\",\"value\":\"m-1\"},\r\n//     {\"label\":\"Cake\",\"value\":\"m-2\"},\r\n//     {\"group\": \"Construction\", \"options\": construction},\r\n//     {\"group\":\"Vegetables\",\"options\":[{\"label\":\"Cabbage\",\"value\":\"v-1\"},{\"label\":\"Tomato\",\"value\":\"v-2\"}]},\r\n//     {\"label\":\"Puddin\",\"value\":\"m-3\"}\r\n// ]\r\n\r\nconst options = [\r\n    {\"group\": \"Rakennus\", \"options\": construction},\r\n    {\"group\": \"Kiinteistöala\", \"options\": realEstate}\r\n]\r\n\r\n\r\n\r\nexport default options;","<template>\n  <div>\n\n    <MDBContainer\n        style=\"position: relative; z-index: 1;\n        opacity: 0.8;\n        margin-top: 60px;\"\n    >\n\n      <div id=\"test\" style=\"background-color:white;\">\n        <MDBInput\n            label=\"Anna osoitteesi\"\n            v-model=\"address\"\n            id=\"autocomplite\"\n            size=\"lg\"\n            wrapperClass=\"mb-4\"/>\n      </div>\n\n\n      <div class=\"ui large segment form\">\n\n        <div class=\"field\">\n\n          <select id=\"listOfProfessions\" v-model=\"prof\">\n            <option value=\"\">Valitse ammattisi</option>\n            <template v-for=\"option in prodata\">\n\n              <!-- if the `group` property is truthy -->\n              <optgroup v-if=\"option.group\" :label=\"option.group\" :key=\"option.group\">\n                <option v-for=\"opt in option.options\" :value=\"opt.label\" :key=\"opt.label\">\n                  {{ opt.label }}\n                </option>\n              </optgroup>\n              <!-- otherwise -->\n              <option v-else :value=\"option\" :key=\"option.value\">\n                {{ option.label }}\n              </option>\n            </template>\n          </select>\n        </div>\n\n        <div :class=\"{hideDistSelectPanel: !isDistSelection}\">\n          <select id=\"distanceOfClient\" v-model=\"distBtw\">\n            <option disabled value=\"1\">1 kilometriä ympärilläsi</option>\n            <option value=\"10\">10 km ympärilläsi</option>\n            <option value=\"20\">20 km ympärilläsi</option>\n            <option value=\"30\">30 km ympärilläsi</option>\n            <option value=\"40\">40 km ympärilläsi</option>\n            <option value=\"50\">50 km ympärilläsi</option>\n            <option value=\"60\">60 km ympärilläsi</option>\n            <option value=\"70\">70 km ympärilläsi</option>\n            <option value=\"80\">80 km ympärilläsi</option>\n            <option value=\"90\">90 km ympärilläsi</option>\n            <option value=\"100\">100 km ympärilläsi</option>\n          </select>\n        </div>\n\n\n        <h3\n            :class=\"{activeClients: !isActiveClients}\"\n        >\n          {{countOfSelectedClients + \" \" + client}}  tarvitsee palveluasi\n        </h3>\n        <h3\n            v-if=\"prof\"\n            :class=\"{noClients: isActiveClients}\"\n        >\n          Ei asiakkaita vielä!\n        </h3>\n\n      </div>\n\n\n\n      <MDBBtn color=\"dark\"\n              size=\"lg\"\n              block\n              @click=\"provide\"\n              style=\"position: relative; z-index:1; opacity: 1.2;\"\n      >\n        Tarjoa omaa palvelua\n      </MDBBtn>\n\n\n      <MDBBtn color=\"danger\"\n              size=\"lg\"\n              block\n              @click=\"$router.push('/')\"\n              style=\"position: relative; z-index:1; opacity: 1.0;\"\n      >\n        Poistu\n      </MDBBtn>\n\n\n    </MDBContainer>\n    <h3 style=\"margin-top: 50px;\">Kartta ladataan...</h3>\n    <div class=\"spinner-border\" role=\"status\">\n      <span class=\"visually-hidden\">Loading...</span>\n    </div>\n    <section id=\"map\"></section>\n  </div>\n</template>\n\n<script>\n/* eslint-disable */\n/*global google*/\nimport axios from 'axios'\nimport recipientService from '../service/recipients'\nimport providerService from '../service/providers'\nimport {\n  MDBContainer,\n  MDBInput,\n  MDBBtn\n} from \"mdb-vue-ui-kit\";\nimport proData from '@/components/profession/proList'\nimport gMap from '../components/location'\nexport default {\n  name: \"provider-public\",\n  props: {\n    userIsProvider: Object,\n    isProviderLoggedIn: Boolean\n  },\n  components: {\n    MDBContainer,\n    MDBInput,\n    MDBBtn\n  },\n  data () {\n    return {\n      prof: \"\",\n      userId: null,\n      providerId: null,\n      address: null,\n      myLat: null,\n      mylng: null,\n      countOfSelectedClients: 0,\n      isActiveClients: false,\n      client: \"\",\n      isDistSelection: false,\n      distBtw: 1,\n      currentProfessional: \"\",\n      prodata: proData\n    }\n  },\n  mounted () {\n    const loggedUserJSON = window.localStorage.getItem('loggedAppUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      this.userId = user.id\n      //console.log(\"User token: \" + this.loggedUser.token)\n    }\n\n    //console.log(\"Is provider in \" + this.isProviderLoggedIn)\n\n    //console.log(\"User id in providers \" + this.userId)\n\n\n\n    //this.setProviderId()\n\n    const myMarker = new google.maps.Marker({\n      icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\n    })\n\n    this.userCurrentLocation();\n\n    const selectProfession = document.getElementById(\"listOfProfessions\")\n\n    selectProfession.addEventListener(\"change\", (event) => {\n      //alert(\"Profession selected: \" + event.target.value)\n      this.isDistSelection = true;\n      this.currentProfessional = event.target.value;\n      this.showClientLocationOnTheMap(event.target.value, this.distBtw)\n    })\n\n    const selectDistanceBetween = document.getElementById(\"distanceOfClient\");\n\n    selectDistanceBetween.addEventListener(\"change\", (event) => {\n      this.distBtw = parseFloat(event.target.value);\n      //alert(\"Profession selected: \" + event.target.value)\n      console.log(\"Current distance in beginning \" + this.distBtw)\n      this.showClientLocationOnTheMap(this.currentProfessional, this.distBtw);\n      //this.showClient\n    })\n\n    const input = document.getElementById(\"autocomplite\");\n\n    const center = { lat: 50.064192, lng: -130.605469 };\n    const defaultBounds = {\n      north: center.lat + 0.1,\n      south: center.lat - 0.1,\n      east: center.lng + 0.1,\n      west: center.lng - 0.1,\n    };\n    const options = {\n      bounds: defaultBounds,\n      componentRestrictions: { country: \"fi\" },\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\", \"formatted_address\"],\n      strictBounds: false,\n      //types: [\"establishment\"],\n    };\n    const autocomplete = new google.maps.places.Autocomplete(input, options);\n\n    autocomplete.addListener(\"place_changed\", () => {\n      let place = autocomplete.getPlace()\n      this.myLat = place.geometry.location.lat();\n      this.myLng = place.geometry.location.lng();\n\n      this.getAddressFrom(place.geometry.location.lat(), place.geometry.location.lng())\n      this.address = place.formatted_address\n      console.log(place)\n    });\n\n\n\n\n    // let map = new google.maps.Map(document.getElementById(\"map\"), {\n    //   zoom: 13,\n    //   center: new google.maps.LatLng(this.myLat, this.myLng),\n    //   mapTypeId: google.maps.MapTypeId.ROADMAP,\n    //   accuracy: 50,\n    //\n    // });\n\n  },\n  methods: {\n    provide (){\n      this.$router.push('/provider-form')\n      // if (!this.isProviderLoggedIn) {\n      //   this.$router.push('/provider-form')\n      // } else {\n      //   this.$router.push('/provider-panel')\n      // }\n\n      // if (this.userId === this.providerId) {\n      //   this.$router.push('/provider-form')\n      // } else {\n      //   this.$router.push('/provider-panel')\n      // }\n    },\n    userCurrentLocation () {\n      // const watchId = navigator.geolocation.watchPosition(position => {\n      //   const { latitude, longitude } = position.coords;\n      //   // Show a map centered at latitude / longitude.\n      //   console.log(\"Position lat: \" + position.coords.latitude)\n      //   console.log(\"Position lng: \" + position.coords.longitude)\n      //   this.showUserLocationOnTheMap(position.coords.latitude, position.coords.longitude)\n      // });\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const { latitude, longitude } = position.coords;\n          // Show a map centered at latitude / longitude.\n          this.myLat = latitude\n          this.myLng = longitude\n\n          this.showUserLocationOnTheMap (latitude, longitude)\n        });\n      }\n\n    },\n\n    pinSymbol(color) {\n      return {\n        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',\n        fillColor: color,\n        fillOpacity: 1,\n        strokeColor: '#000',\n        strokeWeight: 2,\n        scale: 1\n      };\n    },\n\n    showUserLocationOnTheMap (latitude, longitude) {\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 13,\n        center: new google.maps.LatLng(latitude, longitude),\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        accuracy: 50,\n\n      });\n      // new google.maps.Marker({\n      //   icon: 'http://maps.google.com/mapfiles/ms/icons/white-dot.png',\n      //   position: new google.maps.LatLng(latitude, longitude),\n      //   accuracy: 50,\n      //   map: map\n      // })\n\n      // Oma asukoha marker\n\n      // new google.maps.Marker({\n      //   position: new google.maps.LatLng(latitude, longitude),\n      //   accuracy: 50,\n      //   map: map,\n      //   icon: this.pinSymbol('yellow'),\n      //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n      // })\n\n\n    },\n\n    getAddressFrom (lat, long) {\n      axios.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat +\n          \",\" + long\n          + \"&key=\" + 'AIzaSyBDA2EBoGezJx51wQtxoW3Ecq5Ql8CCAiE')\n          .then(response => {\n            if (response.data.error_message) {\n              this.error = response.data.error_message;\n\n              console.log(response.data.error_message)\n            } else {\n              const map = new google.maps.Map(document.getElementById(\"map\"), {\n                zoom: 13,\n                center: new google.maps.LatLng(lat, long),\n                mapTypeId: google.maps.MapTypeId.ROADMAP\n              });\n\n              // new google.maps.Marker({\n              //   position: new google.maps.LatLng(lat, long),\n              //   accuracy: 50,\n              //   map: map,\n              //   icon: this.pinSymbol('yellow'),\n              //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n              // })\n\n              //this.address = response.data.results[0].formatted_address\n              console.log(response.data.results.results[0].formatted_address)\n            }\n\n          })\n          .catch(error => {\n            this.error = error.message\n            console.log(error.message)\n          })\n    },\n\n    distanceBtw (originLat, originLng, destLat, destLng) {\n      var origin = new google.maps.LatLng(originLat, originLng);\n      var destination = new google.maps.LatLng(destLat, destLng);\n      return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n    },\n\n    otherUserLocations (recipients, profession, dist) {\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 9,\n        center: new google.maps.LatLng(this.myLat, this.myLng),\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n      });\n      console.log(\"Users count: \" + recipients.length)\n      console.log(\"Current distance \" + dist)\n      // new google.maps.Marker({\n      //   position: new google.maps.LatLng(this.myLat, this.myLng),\n      //   accuracy: 50,\n      //   map: map,\n      //   icon: this.pinSymbol('yellow'),\n      //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n      // })\n\n      let count = 0;\n      if (recipients.length > 0) {\n        for (let pos = 0; pos < recipients.length; pos++) {\n\n          //console.log(\"Client latitude: \" + recipient[pos].latitude)\n          //console.log(\"Client longitude: \" + recipient[pos].longitude)\n\n          recipients[pos].professional.forEach(prof => {\n            if (prof === profession) {\n              //this.countOfSelectedClient++;\n              console.log(\"Distance btw \" + this.distanceBtw(this.myLat, this.myLng, recipients[pos].latitude, recipients[pos].longitude));\n              this.isActiveClients = true;\n\n              if (this.distanceBtw(this.myLat, this.myLng, recipients[pos].latitude, recipients[pos].longitude) <= dist) {\n                count ++;\n                new google.maps.Marker({\n                  position: new google.maps.LatLng(recipients[pos].latitude, recipients[pos].longitude),\n                  map: map\n                })\n              }\n\n            }\n          })\n\n        }\n        if (count > 0) {\n          this.isActiveClients = true;\n        } else {\n          this.isActiveClients = false;\n        }\n        this.countOfSelectedClients = count;\n        this.identifyClientText();\n        //console.log(\"Count \" + this.countOfSelectedClients)\n\n      }\n\n    },\n\n    renderClients (event) {\n      console.log(\"Event value \" + event.target.value)\n      //this.countOfSelectedClients = 0;\n\n      if (event.target.value) {\n        // @click=\"renderClients($event)\"\n        this.showClientLocationOnTheMap(event.target.value)\n\n      }\n      this.prof = event.target.value\n\n      event.target.value = \"\"\n\n    },\n\n\n    async showClientLocationOnTheMap (profession, dist) {\n\n\n      const recipients = await recipientService.getRecipients()\n      if (recipients !== null) {\n        this.otherUserLocations(recipients, profession, dist);\n      }\n      // visibility: hidden;\n\n    },\n    identifyClientText () {\n      console.log(\"Klientide arv: \" + this.countOfSelectedClients)\n      if (this.countOfSelectedClients > 1) {\n        this.client = \"asiakasta\"\n      } else {\n        this.client = \"asiakas\"\n      }\n    }\n\n  }\n}\n</script>\n\n<style>\n.ui.button,\n.dot.circle {\n  background-color: #ff5a5f;\n  color: white;\n}\n\n.pac-icon {\n  display: none;\n}\n.pac-item {\n  padding: 10px;\n  font-size: 16px;\n  cursor: pointer;\n}\n.pac-item:hover {\n  background-color: #ececec;\n}\n.pac-item-query {\n  font-size: 16px;\n}\n.spinner-border {\n  margin-top: 100px;\n}\n#map {\n   position: absolute;\n   top: 50px;\n   right: 0;\n   bottom: 0;\n   left: 0;\n }\n\n@media only screen and (max-width: 1000px) {\n  #test {\n    display: none !important;\n\n  }\n}\n\n.activeClients {\n  display: none !important;\n}\n.noClients {\n  display: none !important;\n}\n.hideDistSelectPanel {\n  display: none !important;\n}\n\n</style>","import { render } from \"./ProviderPublic.vue?vue&type=template&id=2cf92e73\"\nimport script from \"./ProviderPublic.vue?vue&type=script&lang=js\"\nexport * from \"./ProviderPublic.vue?vue&type=script&lang=js\"\n\nimport \"./ProviderPublic.vue?vue&type=style&index=0&id=2cf92e73&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["construction","realEstate","options","id","style","class","_createElementVNode","value","disabled","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","role","_createElementBlock","_createVNode","_component_MDBContainer","_hoisted_1","_component_MDBInput","label","$data","address","$event","size","wrapperClass","_hoisted_2","_hoisted_3","prof","_hoisted_4","_Fragment","_renderList","prodata","option","group","key","opt","_hoisted_6","_hoisted_7","_normalizeClass","hideDistSelectPanel","isDistSelection","distBtw","activeClients","isActiveClients","countOfSelectedClients","client","noClients","_component_MDBBtn","color","block","onClick","$options","provide","_cache","_ctx","$router","push","_hoisted_20","_hoisted_21","_hoisted_22","name","props","userIsProvider","Object","isProviderLoggedIn","Boolean","components","MDBContainer","MDBInput","MDBBtn","data","userId","providerId","myLat","mylng","currentProfessional","proData","mounted","loggedUserJSON","window","localStorage","getItem","user","JSON","parse","this","google","maps","Marker","icon","userCurrentLocation","selectProfession","document","getElementById","addEventListener","event","target","showClientLocationOnTheMap","selectDistanceBetween","parseFloat","console","log","input","center","lat","lng","defaultBounds","north","south","east","west","bounds","componentRestrictions","country","fields","strictBounds","autocomplete","places","Autocomplete","addListener","place","getPlace","geometry","location","myLng","getAddressFrom","formatted_address","methods","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","showUserLocationOnTheMap","pinSymbol","path","fillColor","fillOpacity","strokeColor","strokeWeight","scale","Map","zoom","LatLng","mapTypeId","MapTypeId","ROADMAP","accuracy","long","axios","get","then","response","error_message","error","results","catch","message","distanceBtw","originLat","originLng","destLat","destLng","origin","destination","spherical","computeDistanceBetween","toFixed","otherUserLocations","recipients","profession","dist","map","length","count","pos","professional","forEach","identifyClientText","renderClients","async","recipientService","getRecipients","__exports__","render"],"sourceRoot":""}