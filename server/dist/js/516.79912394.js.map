{"version":3,"file":"js/516.79912394.js","mappings":"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","sources":["webpack://prore-mongo/./src/components/notifications/errorMessage.js","webpack://prore-mongo/./src/pages/ProGallery.vue","webpack://prore-mongo/./src/pages/ProGallery.vue?115c"],"sourcesContent":["const ErrorMessage = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n\n        <div className=\"error\">\n            {message}\n            <img className={'errorImg'} alt={'error'} src={require('@/assets/error.png')}/>\n\n        </div>\n\n    )\n}\n\nexport default ErrorMessage","<template>\r\n  <MDBContainer>\r\n    <h2 style=\"margin-bottom: 27px;\">Kuvat omista palveluista!</h2>\r\n\r\n    <MDBRow>\r\n      <MDBCol lg=\"4\" v-for=\"(img, i) in proImages\" :key=\"i\">\r\n\r\n        <div class=\"panel\">\r\n          <img\r\n              class=\"proRefLoading\"\r\n              :src=\"img.blob ? img.blob : require(`/server/uploads/pro/${img.name}`)\"\r\n              :alt=\"img.name\"\r\n          />\r\n          <button class=\"img_btn\" @click=\"pressEditPanel(i)\">Muokkaa</button>\r\n        </div>\r\n\r\n\r\n<!--        <MDBBtn v-if=\"!isEdit\" block outline=\"success\" @click=\"pressEditPanel(i)\">Muokkaa</MDBBtn>-->\r\n        <div class=\"edit-panel\" v-if=\"isEditPanel && imgIndex === i\">\r\n          <error-message :message = wrongSizeTypeMessage />\r\n          <MDBRow>\r\n            <MDBCol>\r\n              <MDBBtnClose\r\n                  v-if=\"!value\"\r\n                  white\r\n                  class=\"close-btn\"\r\n                  style=\"float: right;\"\r\n                  @click=\"closeEditPanel\"\r\n              />\r\n              <input  id=\"pro-upload\" type=\"file\" @change=\"handleFileChange($event, i)\"/>\r\n              <label  for=\"pro-upload\" class=\"pro-file-upload\">\r\n                  <span v-if=\"value\">\r\n                  Muokka tehtävän kuvausta: {{value.name}}\r\n\r\n                   </span>\r\n                <span v-else>Valitse uusi kuva tehtävästä</span>\r\n              </label>\r\n              <MDBBtn v-if=\"isEdit\" block color=\"success\" @click=\"editRefImage(i)\">Upload edited image</MDBBtn>\r\n              <MDBBtn class=\"btn\" block size=\"lg\" color=\"danger\" @click=\"removeRefImage(i, img._id)\">Poista kuva</MDBBtn>\r\n            </MDBCol>\r\n            <MDBCol v-if=\"value\">\r\n              <MDBBtnClose\r\n                  white\r\n                  class=\"close-btn\"\r\n                  style=\"float: right;\"\r\n                  @click=\"closeEditPanel\"\r\n              />\r\n              <img\r\n                  style=\"width:100px; padding-top: 20px;\"\r\n                  :src=\"this.showImage\"\r\n                  alt=\"addEdit\"\r\n              />\r\n            </MDBCol>\r\n          </MDBRow>\r\n\r\n        </div>\r\n\r\n      </MDBCol>\r\n    </MDBRow>\r\n\r\n\r\n    <MDBBtn v-if=\"!isPressedAdd\" block color=\"warning\" @click=\"pressAddImage\" style=\"margin-top: 13px;\">Lisää uusi kuva tehtävästä</MDBBtn>\r\n    <div class=\"add-panel\" v-if=\"isPressedAdd && isAddPanel\">\r\n\r\n      <error-message :message = wrongSizeTypeMessage />\r\n      <MDBRow>\r\n\r\n        <MDBCol>\r\n          <MDBBtnClose\r\n              v-if=\"!value\"\r\n              white\r\n              class=\"close-btn\"\r\n              @click=\"closeAddPanel\"\r\n          />\r\n          <input   id=\"add-upload\" type=\"file\" @change=\"handleFileChange($event, i)\"/>\r\n          <label  for=\"add-upload\" class=\"pro-file-upload\">\r\n                  <span v-if=\"value\">\r\n                  Muokka tehtävän kuvausta: {{value.name}}\r\n                   </span>\r\n            <span v-else>Valitse lisää kuva tehtävästä</span>\r\n          </label>\r\n          <MDBBtn v-if=\"isAdd\" block outline=\"primary\" @click=\"addRefImage\">Tallenna kuva</MDBBtn>\r\n        </MDBCol>\r\n        <MDBCol v-if=\"value\">\r\n          <MDBBtnClose\r\n              class=\"close-btn\"\r\n              white\r\n              @click=\"closeAddPanel\"\r\n          />\r\n          <img\r\n              style=\"width:100px\"\r\n              :src=\"this.showImage\"\r\n              alt=\"addShow\"\r\n          />\r\n        </MDBCol>\r\n      </MDBRow>\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!--    <MDBBtn color=\"success\" @click=\"getUser\">Get provider booking</MDBBtn>-->\r\n\r\n\r\n\r\n<!--    pro images: {{proImages}}<br>-->\r\n<!--    error message {{wrongSizeTypeMessage}}-->\r\n  </MDBContainer>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\nimport {\r\n  MDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn,\r\n    MDBBtnClose\r\n} from 'mdb-vue-ui-kit'\r\nimport imageService from \"@/service/image\";\r\nimport providerService from \"@/service/providers\";\r\nimport errorMessage from '../components/notifications/errorMessage'\r\nimport socket from \"@/socket\";\r\nimport recipientService from \"@/service/recipients\";\r\n//import socket from \"@/socket\";\r\nexport default {\r\n  name: \"ProGallery\",\r\n  props: {\r\n    provider: null,\r\n    proImages: Array\r\n  },\r\n  components: {\r\n    errorMessage,\r\n    MDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn,\r\n    MDBBtnClose,\r\n\r\n  },\r\n  data () {\r\n    return {\r\n\r\n      IMAGE_SIZE: 1000000,\r\n      value: null,\r\n      showImage: null,\r\n      files: null,\r\n      imgIndex: null,\r\n      isAdd: false,\r\n      isEdit: false,\r\n      isEditPanel: false,\r\n      isPressedAdd: false,\r\n      isAddPanel: false,\r\n      wrongSizeTypeMessage: null\r\n    }\r\n  },\r\n  methods: {\r\n    // getUser () {\r\n    //   this.provider.booking.forEach(b => {\r\n    //     console.log(\"Booking info \" + b.user.username);\r\n    //\r\n    //   })\r\n    // },\r\n    async sendReadableFileToRecipients (imageID, action) {\r\n      let recipients = [];\r\n      this.provider.booking.forEach(b => {\r\n        console.log(\"Booking info \" + b.user.username);\r\n        recipients = [\r\n            ...recipients,\r\n            b.user.id\r\n        ]\r\n      })\r\n      const data = new FormData();\r\n      data.append('file', this.files, this.files.name);\r\n\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = (e) => {\r\n        const bytes = new Uint8Array(e.target.result);\r\n        console.log(\"FILES IN gallery.... \" + this.files)\r\n\r\n        // const imgBytes = {\r\n        //   id: ,\r\n        //   bytes: bytes\r\n        // }\r\n\r\n        socket.emit(\"created file for recipients\", imageID, bytes, this.provider.id, recipients, action);\r\n      };\r\n      reader.readAsArrayBuffer(this.files);\r\n    },\r\n    handleFileChange(e, i) {\r\n      this.imgIndex = i;\r\n      try {\r\n\r\n        const files = e.target.files[0]\r\n        console.log('event target client ', e.target.files[0])\r\n\r\n        if (files) {\r\n          //const tempImage = URL.createObjectURL(files)\r\n          //this.tempImages.push(tempImage);\r\n          this.showImage = URL.createObjectURL(files)\r\n          //this.file = e.target.files[0];\r\n          this.files = e.target.files[0];\r\n\r\n          this.isAdd = true;\r\n          this.isEdit = true;\r\n        }\r\n\r\n      } catch (err) {\r\n        console.log('Error:', err)\r\n      }\r\n\r\n      this.value = e.target.files[0]\r\n\r\n    },\r\n    pressAddImage () {\r\n      this.isAdd = false\r\n      this.isEdit = false;\r\n      this.isEditPanel = false;\r\n      this.isPressedAdd = true;\r\n      this.isAddPanel = true;\r\n    },\r\n    pressEditPanel (index) {\r\n      this.isEdit = false;\r\n      this.value = null;\r\n      this.imgIndex = index;\r\n      this.isPressedAdd = false;\r\n      this.isEditPanel = true;\r\n      this.isAddPanel = false\r\n    },\r\n    closeEditPanel () {\r\n      this.isAddPanel = false\r\n      this.isEditPanel = false\r\n      this.isEdit = false;\r\n      this.value = null;\r\n    },\r\n    closeAddPanel () {\r\n      this.isAddPanel = false\r\n      this.isPressedAdd = false;\r\n      this.value = null;\r\n    },\r\n    async addRefImage () {\r\n      this.value = null;\r\n      this.isAddPanel = false;\r\n      this.isAdd = false;\r\n      this.isPressedAdd = false;\r\n      const data = new FormData();\r\n\r\n      data.append('file', this.files, this.files.name)\r\n      console.log(\"IMG pro size - \" + this.files.size);\r\n\r\n      console.log(\"Image pro type_ \" + this.files.type);\r\n      console.log(\"AAA \" + this.provider.user.id)\r\n      const type = this.files.type;\r\n      if (type ===\"image/jpeg\" || type === \"image/jpg\" || type === \"image/png\" || type === \"image/gif\") {\r\n        console.log(\"Pildi formaat on OK\")\r\n        if (this.files.size <= this.IMAGE_SIZE) {\r\n\r\n          //const reader = new FileReader();\r\n\r\n          const img = await imageService.createProRefImg(this.provider.user.id, data);\r\n\r\n          if (img) {\r\n            //await recipientService.addImage(this.booking.id, img.imgCreated._id)\r\n            await providerService.addProSlide(this.provider.id, {slideID: img.imgCreated._id});\r\n            //\r\n            const _image = {\r\n              _id: img.imgCreated._id,\r\n              blob: this.showImage\r\n            }\r\n\r\n\r\n\r\n\r\n            this.$emit(\"addProImage\", _image);\r\n\r\n            this.sendReadableFileToRecipients(img.imgCreated._id, 'add');\r\n\r\n\r\n            this.isEdit = false;\r\n\r\n\r\n            // console.log(\"ORDRED pikkus \" + this.booking.ordered.length)\r\n            // let ordered = [];\r\n            // this.booking.ordered.forEach(b => {\r\n            //   console.log(\"CVCVCV \" + b.user.username);\r\n            //   ordered = ordered.concat(b.user.id);\r\n            // })\r\n\r\n            // reader.onload = (e) => {\r\n            //   const bytes = new Uint8Array(e.target.result);\r\n            //   console.log(\"FILES IN UPLOAD.... \" + this.files)\r\n            //\r\n            //   const image_bytes = {\r\n            //     id: img.imgCreated._id,\r\n            //     bytes: bytes\r\n            //   }\r\n            //   socket.emit(\"display booking image\", image_bytes, this.booking.id, ordered)\r\n            //\r\n            // };\r\n            // reader.readAsArrayBuffer(this.files);\r\n\r\n          }\r\n        } else {\r\n\r\n          console.log(\"Pildi suurus peab olema väiksem kui 1 MB\");\r\n          this.isAddPanel = true\r\n          this.isPressedAdd = true;\r\n          this.wrongSizeTypeMessage = \"Kuvan maximi koko on 3 MB.\";\r\n\r\n          setTimeout(() => {\r\n            this.wrongSizeTypeMessage = null;\r\n          }, 3000);\r\n        }\r\n      }\r\n      else {\r\n        console.log(\"Pildi formaat on FAKE\")\r\n        this.isAddPanel = true\r\n        this.isPressedAdd = true;\r\n        this.wrongSizeTypeMessage = \"Väärä formaati. Kuva pitäisi olla jpeg, jpg, png tai gif formaatissa!\";\r\n        setTimeout(() => {\r\n          this.wrongSizeTypeMessage = null;\r\n        }, 3000);\r\n      }\r\n\r\n    },\r\n    async editRefImage (index, img) {\r\n\r\n      // imgIndex: null,\r\n      //     isAdd: false,\r\n      //     isEdit: false,\r\n      //     isEditPanel: false,\r\n      //     isPressedAdd: false,\r\n      //     isAddPanel: false,\r\n      //     wrongSizeTypeMessage: null\r\n\r\n      console.log(\"Edited image index is: \" + index);\r\n\r\n      this.isEditPanel = false;\r\n      this.isEdit = false;\r\n\r\n      const data = new FormData();\r\n      data.append('file', this.files, this.files.name)\r\n\r\n      console.log(\"Image id \" + this.proImages[index]._id)\r\n      const imgType = this.files.type;\r\n      if (imgType ===\"image/jpeg\" || imgType === \"image/jpg\" || imgType === \"image/png\" || imgType === \"image/gif\") {\r\n        if (this.files.size <= this.IMAGE_SIZE) {\r\n          // -----------------------------------------------\r\n          //const image = await imageService.updateImage(this.images[index]._id, data);\r\n          console.log(\"Image id to edit \" + this.proImages[index]._id);\r\n          const changeImg = await imageService.editProRefImage(this.proImages[index]._id, data);\r\n\r\n          if (changeImg) {\r\n            this.$emit(\"editProRefImage\", index, changeImg._id,  this.showImage);\r\n\r\n            await this.sendReadableFileToRecipients(changeImg._id, 'edit');\r\n\r\n            // this.images[this.imageIndex] = {_id: this.images[index]._id, blob: this.showImage}\r\n            //\r\n            // this.images.forEach(img => {\r\n            //   console.log(\"Image name \" + img._id)\r\n            // })\r\n\r\n            // console.log(\"ORDRED in EDIT pikkus \" + this.booking.ordered.length)\r\n            // let ordered = [];\r\n            // this.booking.ordered.forEach(b => {\r\n            //   console.log(\"CVCVCV \" + b.user.username);\r\n            //   ordered = ordered.concat(b.user.id);\r\n            // })\r\n            //\r\n            // const reader = new FileReader();\r\n            //\r\n            // if (this.file) {\r\n            //   reader.onload = (e) => {\r\n            //     const bytes = new Uint8Array(e.target.result);\r\n            //     console.log(\"FILES.... \" + this.files)\r\n            //\r\n            //     const image_id = image._id;\r\n            //\r\n            //     socket.emit(\"display edited booking image\", image_id, bytes, this.booking.id, ordered)\r\n            //\r\n            //   };\r\n            //   reader.readAsArrayBuffer(this.files);\r\n            // }\r\n\r\n            // console.log(\"New image id is \" + image._id)\r\n            // this.imgId = image._id;\r\n            this.file = null;\r\n\r\n            this.isEditPanel = false;\r\n\r\n\r\n            this.closeAddPanel();\r\n\r\n          }\r\n        } else {\r\n          this.isEditPanel = true;\r\n          this.closeAddPanel();\r\n          this.wrong_SizeType_Message = \"Väärä formaati. Kuva pitäisi olla jpeg, jpg, png tai gif formaatissa!\";\r\n          setTimeout(() => {\r\n            this.wrong_SizeType_Message = null;\r\n          }, 3000);\r\n        }\r\n\r\n      }else {\r\n        this.isEditPanel = true;\r\n        this.closeAddPanel();\r\n        this.wrong_SizeType_Message = \"Kuvan maximi koko on oltava 3 MB!\";\r\n        setTimeout(() => {\r\n          this.wrong_SizeType_Message = null;\r\n        }, 3000);\r\n      }\r\n\r\n\r\n    },\r\n    async removeRefImage (index, imageID) {\r\n      //this.value = null;\r\n      if (!this.proImages[index].blob) {\r\n        console.log(\"removed image is blob\")\r\n\r\n      }\r\n\r\n      let clients = [];\r\n      this.provider.booking.forEach(pb => {\r\n        console.log(\"Booking info -- removing \" + pb.user.username);\r\n        clients = [\r\n          ...clients,\r\n          pb.user.id\r\n        ]\r\n      })\r\n\r\n      console.log(\"removable image id is \" + this.proImages[index]._id)\r\n\r\n      await imageService.removeProRefImage(this.proImages[index]._id, this.provider.id);\r\n\r\n      // await recipientService.removeImage(this.booking.id, this.images[id]._id);\r\n      // await imageService.remove(this.images[id]._id, this.booking.id);\r\n\r\n\r\n\r\n      //socket.emit(\"stop display booking image\", this.images[id]._id, this.booking, bIDs);\r\n\r\n      this.$emit(\"removeProRefImage\", index);\r\n      socket.emit(\"remove recipient side pro ref image\", imageID, this.provider.id, clients);\r\n\r\n      this.isEditPanel = false;\r\n\r\n    },\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nimg.proRefLoading {\r\n  width: 100%;\r\n  margin: 0 13px 13px 0;\r\n  background: transparent url(https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif) no-repeat scroll center center;\r\n}\r\ninput[type=\"file\"] {\r\n  display: none;\r\n}\r\n.pro-file-upload {\r\n  width: 100%;\r\n\r\n  color: white;\r\n  font-size: 18px;\r\n  background-color: #87958e;\r\n  border: 1px solid #ccc;\r\n  display: inline-block;\r\n  padding: 20px 12px;\r\n  margin-bottom: 0;\r\n  cursor: pointer;\r\n}\r\n.edit-panel {\r\n  border: solid grey;\r\n  padding: 20px;\r\n  margin: 20px 0 20px 0;\r\n}\r\n.add-panel {\r\n  border: solid grey;\r\n  padding: 20px;\r\n  margin: 20px 0 20px 0;\r\n}\r\n.btn {\r\n  padding: 20px;\r\n  margin: 20px 0 20px 0;\r\n}\r\n.close-btn {\r\n  float: right;\r\n  padding: 20px;\r\n}\r\n\r\n\r\n/* Container needed to position the button. Adjust the width as needed */\r\n.panel {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n/* Make the image responsive */\r\n.panel img {\r\n  width: 100%;\r\n  height: auto;\r\n}\r\n\r\n/* Style the button and place it in the middle of the container/image */\r\n.panel .img_btn {\r\n  position: absolute;\r\n  top: 85%;\r\n  left: 85%;\r\n  transform: translate(-50%, -50%);\r\n  -ms-transform: translate(-50%, -50%);\r\n  background-color: #555;\r\n  opacity: 0.5;\r\n  color: white;\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n  border: none;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n}\r\n\r\n.panel .btn:hover {\r\n  background-color: black;\r\n}\r\n</style>","import { render } from \"./ProGallery.vue?vue&type=template&id=98e8a184&scoped=true\"\nimport script from \"./ProGallery.vue?vue&type=script&lang=js\"\nexport * from \"./ProGallery.vue?vue&type=script&lang=js\"\n\nimport \"./ProGallery.vue?vue&type=style&index=0&id=98e8a184&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-98e8a184\"]])\n\nexport default __exports__"],"names":["ErrorMessage","message","_createVNode","require","class","key","for","_createBlock","_component_MDBContainer","default","_withCtx","_createElementVNode","style","_component_MDBRow","_createElementBlock","_Fragment","_renderList","$props","proImages","img","i","_component_MDBCol","lg","_hoisted_1","src","blob","name","alt","_hoisted_2","onClick","$event","$options","pressEditPanel","_hoisted_3","$data","isEditPanel","imgIndex","_hoisted_4","_component_error_message","wrongSizeTypeMessage","value","_createCommentVNode","_component_MDBBtnClose","white","closeEditPanel","id","type","onChange","handleFileChange","_hoisted_5","_hoisted_6","_hoisted_7","_toDisplayString","_hoisted_8","isEdit","_component_MDBBtn","block","color","editRefImage","_cache","_createTextVNode","_","size","removeRefImage","_id","showImage","_hoisted_9","isPressedAdd","pressAddImage","isAddPanel","_hoisted_10","closeAddPanel","_ctx","_hoisted_11","_hoisted_12","_hoisted_13","isAdd","outline","addRefImage","_hoisted_14","props","provider","Array","components","errorMessage","MDBContainer","MDBRow","MDBCol","MDBBtn","MDBBtnClose","data","IMAGE_SIZE","files","methods","sendReadableFileToRecipients","imageID","action","recipients","this","booking","forEach","b","console","log","user","username","FormData","append","reader","FileReader","onload","e","bytes","Uint8Array","target","result","socket","emit","readAsArrayBuffer","URL","createObjectURL","err","index","imageService","createProRefImg","providerService","addProSlide","slideID","imgCreated","_image","$emit","setTimeout","imgType","changeImg","editProRefImage","file","wrong_SizeType_Message","clients","pb","removeProRefImage","__exports__","render"],"sourceRoot":""}