{"version":3,"file":"js/934.d631607e.js","mappings":"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","sources":["webpack://prore-mongo/./src/components/controllers/distance.js","webpack://prore-mongo/./src/components/profession/proList.js","webpack://prore-mongo/./src/pages/RecipientPublic.vue","webpack://prore-mongo/./src/pages/RecipientPublic.vue?a5fc"],"sourcesContent":["/*global google*/\nlet res = \"\";\nconst distance = () => {\n    //let text = \"\";\n    //let value = 0;\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\n    var service = new google.maps.DistanceMatrixService();\n    service.getDistanceMatrix(\n        {\n            origins: [origin],\n            destinations: [destination],\n            travelMode: 'DRIVING',\n            unitSystem: google.maps.UnitSystem.METRIC,\n            durationInTraffic: true,\n            avoidHighways: false,\n            avoidTolls: false\n        }, response_data);\n    //return response_data;\n}\n\nconst response_data = (responseDis, status) => {\n    //let result = \"\";\n    if (status !== google.maps.DistanceMatrixStatus.OK || status !== \"OK\"){\n        console.log('Error:', status);\n        // OR\n        alert(status);\n    }else{\n        //alert(responseDis.rows[0].elements[0].distance.text);\n        console.log(\"Distance \" + responseDis.rows[0].elements[0].distance.text)\n\n        res = responseDis.rows[0].elements[0].distance.text;\n        return \"aaaaaaaaaaaaa\"\n        //result = responseDis.rows[0].elements[0].distance.text;\n    }\n    //return  \"Hallo\"        //result.toString();\n}\n\nconst test = () => {\n    console.log(\"Is it working??\" + res)\n\n    return  <div>Hiiii</div>;\n}\n\nconst theDist = () => {\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\n    return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n}\n\n// function calcDistance() {\n//     // var origin = new google.maps.LatLng(60.233093,24.7531362);\n//     // var destination = new google.maps.LatLng(60.2767265,24.8575089);\n//     // return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n//\n//     var directionsService = new google.maps.DirectionsService();\n//\n//     var request = {\n//         origin      : 'Melbourne VIC', // a city, full address, landmark etc\n//         destination : 'Sydney NSW',\n//         travelMode  : google.maps.DirectionsTravelMode.DRIVING\n//     };\n//\n//     directionsService.route(request, function(response, status) {\n//         if ( status === google.maps.DirectionsStatus.OK ) {\n//             alert( response.routes[0].legs[0].distance.value ) ; // the distance in metres\n//         }\n//         else {\n//             // oops, there's no route between these two locations\n//             // every time this happens, a kitten dies\n//             // so please, ensure your address is formatted properly\n//         }\n//     });\n// }\n\nexport default { distance, test, theDist }","// const list = [\r\n//     \"Siivooja\",\r\n//     \"Hitsaaja\",\r\n//     \"Bussikuski\"\r\n// ]\r\n\r\nconst construction = [\r\n    {\"label\": \"Hitsaaja\", \"value\": \"1\"},\r\n    {\"label\": \"Putkimies\", \"value\": \"2\"},\r\n    {\"label\": \"Sähkömies\", \"value\": \"3\"}\r\n]\r\nconst realEstate = [\r\n    {\"label\": \"Siivooja\", \"value\": \"4\"}\r\n]\r\n\r\n// const options = [\r\n//     {\"group\":\"Fruits\",\"options\":[{\"label\":\"Apple\",\"value\":\"f-1\"},{\"label\":\"Banana\",\"value\":\"f-2\"},{\"label\":\"Orange\",\"value\":\"f-3\"}]},\r\n//     {\"label\":\"Chocolate\",\"value\":\"m-1\"},\r\n//     {\"label\":\"Cake\",\"value\":\"m-2\"},\r\n//     {\"group\": \"Construction\", \"options\": construction},\r\n//     {\"group\":\"Vegetables\",\"options\":[{\"label\":\"Cabbage\",\"value\":\"v-1\"},{\"label\":\"Tomato\",\"value\":\"v-2\"}]},\r\n//     {\"label\":\"Puddin\",\"value\":\"m-3\"}\r\n// ]\r\n\r\nconst options = [\r\n    {\"group\": \"Rakennus\", \"options\": construction},\r\n    {\"group\": \"Kiinteistöala\", \"options\": realEstate}\r\n]\r\n\r\n\r\n\r\nexport default options;","<template>\n  <div>\n\n\n\n    <MDBContainer\n\n        style=\"position: relative; z-index: 1;\n\n        opacity: 0.8;\n        padding-top: 150px;\"\n    >\n\n      <div id=\"test\" style=\"background-color:white;\">\n        <MDBInput\n            label=\"Anna osoitteesi\"\n            v-model=\"address\"\n            id=\"autocomplite\"\n            size=\"lg\"\n            wrapperClass=\"mb-4\"/>\n      </div>\n\n\n      <div class=\"ui large segment form\">\n\n        <div class=\"field\">\n\n          <select id=\"listOfProfessionals\" v-model=\"prof\">\n            <option value=\"\">Valitse ammattilainen</option>\n            <template v-for=\"option in prodata\">\n\n              <!-- if the `group` property is truthy -->\n              <optgroup v-if=\"option.group\" :label=\"option.group\" :key=\"option.group\">\n                <option v-for=\"opt in option.options\" :value=\"opt.label\" :key=\"opt.label\">\n                  {{ opt.label }}\n                </option>\n              </optgroup>\n              <!-- otherwise -->\n              <option v-else :value=\"option\" :key=\"option.value\">\n                {{ option.label }}\n              </option>\n            </template>\n          </select>\n        </div>\n\n        <div :class=\"{hideDistSelectPanel: !isDistSelection}\">\n          <select id=\"distance\" v-model=\"distBtw\" @click=\"filterByDistance\">\n            <option disabled value=\"1\">1 kilometriä ympärilläsi</option>\n            <option value=\"10\">10 km ympärilläsi</option>\n            <option value=\"20\">20 km ympärilläsi</option>\n            <option value=\"30\">30 km ympärilläsi</option>\n            <option value=\"40\">40 km ympärilläsi</option>\n            <option value=\"50\">50 km ympärilläsi</option>\n            <option value=\"60\">60 km ympärilläsi</option>\n            <option value=\"70\">70 km ympärilläsi</option>\n            <option value=\"80\">80 km ympärilläsi</option>\n            <option value=\"90\">90 km ympärilläsi</option>\n            <option value=\"100\">100 km ympärilläsi</option>\n          </select>\n        </div>\n\n        {{ isSelection }}\n\n\n        <h3\n            :class=\"{activeClients: !isActiveProffs}\"\n        >\n          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua\n        </h3>\n        <h3\n            v-if=\"prof\"\n            :class=\"{noClients: isActiveProffs}\"\n        >\n          Ei ammattilaisia vielä!\n        </h3>\n\n      </div>\n\n\n\n      <MDBBtn color=\"dark\"\n              size=\"lg\"\n              block\n              @click=\"receive\"\n              style=\"position: relative; z-index:1; opacity: 1.2;\"\n      >\n        Tee uusi tilaus\n      </MDBBtn>\n\n\n      <MDBBtn color=\"danger\"\n              size=\"lg\"\n              block\n              @click=\"$router.push('/received')\"\n              style=\"position: relative; z-index:1; opacity: 1.0;\"\n      >\n        Poistu\n      </MDBBtn>\n\n\n    </MDBContainer>\n    <h3 style=\"margin-top: 50px;\">Kartta ladataan...</h3>\n    <div class=\"spinner-border\" role=\"status\">\n      <span class=\"visually-hidden\">Loading...</span>\n    </div>\n    <section id=\"map\"></section>\n  </div>\n\n</template>\n\n<script>\n/* eslint-disable */\n/*global google*/\nimport axios from 'axios'\nimport recipientService from '../service/recipients'\nimport providerService from '../service/providers'\nimport {\n  MDBContainer,\n  MDBInput,\n  MDBBtn\n} from \"mdb-vue-ui-kit\";\nimport distance from '../components/controllers/distance'\nimport gMap from '../components/location'\nimport proData from '@/components/profession/proList'\nexport default {\n  name: \"recipient-public\",\n  props: {\n    userIsProvider: Object,\n    isProviderLoggedIn: Boolean\n  },\n  components: {\n    MDBContainer,\n    MDBInput,\n    MDBBtn\n  },\n  data () {\n    return {\n      prof: \"\",\n      userId: null,\n      providerId: null,\n      address: null,\n      myLat: null,\n      mylng: null,\n      countOfSelectedProfessional: 0,\n      isActiveProffs: false,\n      isDistSelection: false,\n      professional: \"\",\n      currentProfession: \"\",\n      distBtw: 1,\n      prodata: proData\n    }\n  },\n  mounted () {\n    const loggedUserJSON = window.localStorage.getItem('loggedAppUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      this.userId = user.id\n      //console.log(\"User token: \" + this.loggedUser.token)\n    }\n\n    //console.log(\"Is provider in \" + this.isProviderLoggedIn)\n\n    //console.log(\"User id in providers \" + this.userId)\n\n\n\n    //this.setProviderId()\n\n    const myMarker = new google.maps.Marker({\n      icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\n    })\n\n    this.userCurrentLocation();\n\n    const selectProfession = document.getElementById(\"listOfProfessionals\")\n\n    selectProfession.addEventListener(\"change\", (event) => {\n      //alert(\"Profession selected: \" + event.target.value)\n      this.isDistSelection = true;\n      this.currentProfession = event.target.value;\n      this.showClientLocationOnTheMap(event.target.value, this.distBtw);\n    })\n\n    const selectDistance = document.getElementById(\"distance\");\n\n    selectDistance.addEventListener(\"change\", (event) => {\n      this.distBtw = parseFloat(event.target.value);\n      //alert(\"Profession selected: \" + event.target.value)\n\n      this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\n      //this.showClient\n    })\n\n\n\n    const input = document.getElementById(\"autocomplite\");\n\n    const center = { lat: 50.064192, lng: -130.605469 };\n    const defaultBounds = {\n      north: center.lat + 0.1,\n      south: center.lat - 0.1,\n      east: center.lng + 0.1,\n      west: center.lng - 0.1,\n    };\n    const options = {\n      bounds: defaultBounds,\n      componentRestrictions: { country: \"fi\" },\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\", \"formatted_address\"],\n      strictBounds: false,\n      //types: [\"establishment\"],\n    };\n    const autocomplete = new google.maps.places.Autocomplete(input, options);\n\n    autocomplete.addListener(\"place_changed\", () => {\n      let place = autocomplete.getPlace()\n      this.myLat = place.geometry.location.lat();\n      this.myLng = place.geometry.location.lng();\n\n      this.getAddressFrom(place.geometry.location.lat(), place.geometry.location.lng())\n      this.address = place.formatted_address\n      console.log(place)\n    });\n\n  },\n  methods: {\n    receive (){\n      this.$router.push('/rf')\n\n    },\n    userCurrentLocation () {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const { latitude, longitude } = position.coords;\n          // Show a map centered at latitude / longitude.\n          this.myLat = latitude\n          this.myLng = longitude\n\n          this.showUserLocationOnTheMap (latitude, longitude)\n        });\n      }\n\n    },\n\n    pinSymbol(color) {\n      return {\n        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',\n        fillColor: color,\n        fillOpacity: 1,\n        strokeColor: '#000',\n        strokeWeight: 2,\n        scale: 1\n      };\n    },\n\n    showUserLocationOnTheMap (latitude, longitude) {\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 13,\n        center: new google.maps.LatLng(latitude, longitude),\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        accuracy: 50,\n\n      });\n\n    },\n\n    getAddressFrom (lat, long) {\n      axios.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat +\n          \",\" + long\n          + \"&key=\" + 'AIzaSyAQPLmTMlmSTp4spxPwvaJLnzYnkLmZ9zc')\n          .then(response => {\n            if (response.data.error_message) {\n              this.error = response.data.error_message;\n\n              console.log(response.data.error_message)\n            } else {\n              const map = new google.maps.Map(document.getElementById(\"map\"), {\n                zoom: 13,\n                center: new google.maps.LatLng(lat, long),\n                mapTypeId: google.maps.MapTypeId.ROADMAP\n              });\n\n              // AIzaSyBDA2EBoGezJx51wQtxoW3Ecq5Ql8CCAiE\n\n               /*new google.maps.Marker({\n                 position: new google.maps.LatLng(lat, long),\n                 accuracy: 50,\n                 map: map,\n                 icon: this.pinSymbol('yellow'),\n                 label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n               })*/\n\n              //this.address = response.data.results[0].formatted_address\n              console.log(response.data.results.results[0].formatted_address)\n            }\n\n          })\n          .catch(error => {\n            this.error = error.message\n            console.log(error.message)\n          })\n    },\n\n    distanceBtw (originLat, originLng, destLat, destLng) {\n      var origin = new google.maps.LatLng(originLat, originLng);\n      var destination = new google.maps.LatLng(destLat, destLng);\n      return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n    },\n\n\n    otherUserLocations (recipients, profession, dist) {\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 9,\n        center: new google.maps.LatLng(this.myLat, this.myLng),\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n      });\n      console.log(\"Users count: \" + recipients.length)\n      console.log(\"Current distance \" + dist)\n\n       /*new google.maps.Marker({\n         position: new google.maps.LatLng(this.myLat, this.myLng),\n         accuracy: 50,\n         map: map,\n         icon: this.pinSymbol('yellow'),\n         label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n       })\n*/\n      let count = 0;\n      if (recipients.length > 0) {\n        for (let pos = 0; pos < recipients.length; pos++) {\n\n          //console.log(\"Client latitude: \" + recipient[pos].latitude)\n          //console.log(\"Client longitude: \" + recipient[pos].longitude)\n          let myLatLong = [this.myLat, this.myLng];\n          recipients[pos].profession.forEach(prof => {\n            if (prof === profession) {\n              console.log(\"Pro \" + prof.yritys)\n              let providerLatLng = [recipients[pos].latitude, recipients[pos].longitude];\n              console.log(\"Distance btw \" + this.distanceBtw(this.myLat, this.myLng, recipients[pos].latitude, recipients[pos].longitude));\n\n              //distance.theDist()\n\n              //this.countOfSelectedClient++;\n              this.isActiveProffs = true;\n\n              if (this.distanceBtw(this.myLat, this.myLng, recipients[pos].latitude, recipients[pos].longitude) <= dist) {\n                count ++;\n                new google.maps.Marker({\n                  position: new google.maps.LatLng(recipients[pos].latitude, recipients[pos].longitude),\n                  map: map\n                })\n              }\n\n            }\n          })\n\n        }\n        if (count > 0) {\n          this.isActiveProffs = true;\n        } else {\n          this.isActiveProffs = false;\n        }\n        this.countOfSelectedProfessional = count;\n        console.log(\"countxx \" + count)\n        this.identifyProfText();\n        //console.log(\"Count \" + this.countOfSelectedClients)\n\n      }\n\n    },\n\n    renderClients (event) {\n      console.log(\"Event value \" + event.target.value)\n      //this.countOfSelectedClients = 0;\n\n      if (event.target.value) {\n        // @click=\"renderClients($event)\"\n        this.showClientLocationOnTheMap(event.target.value)\n\n      }\n      this.prof = event.target.value\n\n      event.target.value = \"\"\n\n    },\n\n\n    async showClientLocationOnTheMap (profession, dist) {\n\n      console.log(\"Current distance herexx  \" + dist)\n      const providers = await providerService.getProviders()\n      if (providers !== null) {\n        this.otherUserLocations(providers, profession, dist);\n      }\n      // visibility: hidden;\n\n    },\n    identifyProfText () {\n      if (this.countOfSelectedProfessional > 1) {\n        this.professional = \"ammattilaista\"\n      } else {\n        this.professional = \"ammattilainen\"\n      }\n    }\n\n  }\n}\n</script>\n\n<style>\n.ui.button,\n.dot.circle {\n  background-color: #ff5a5f;\n  color: white;\n}\n\n.pac-icon {\n  display: none;\n}\n.pac-item {\n  padding: 10px;\n  font-size: 16px;\n  cursor: pointer;\n}\n.pac-item:hover {\n  background-color: #ececec;\n}\n.pac-item-query {\n  font-size: 16px;\n}\n.spinner-border {\n  margin-top: 100px;\n}\n\n#map {\n   position: absolute;\n   top: 120px;\n   right: 0;\n   bottom: 0;\n   left: 0;\n }\n\n@media only screen and (max-width: 1000px) {\n  #test {\n    display: none !important;\n\n  }\n}\n\n.activeClients {\n  display: none !important;\n}\n.noClients {\n  display: none !important;\n}\n.hideDistSelectPanel {\n  display: none !important;\n}\n\n</style>","import { render } from \"./RecipientPublic.vue?vue&type=template&id=6a24d48f\"\nimport script from \"./RecipientPublic.vue?vue&type=script&lang=js\"\nexport * from \"./RecipientPublic.vue?vue&type=script&lang=js\"\n\nimport \"./RecipientPublic.vue?vue&type=style&index=0&id=6a24d48f&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["res","distance","origin","google","maps","LatLng","destination","service","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","unitSystem","UnitSystem","METRIC","durationInTraffic","avoidHighways","avoidTolls","response_data","responseDis","status","DistanceMatrixStatus","OK","console","log","rows","elements","text","alert","test","_createVNode","_createTextVNode","theDist","geometry","spherical","computeDistanceBetween","toFixed","construction","realEstate","options","id","style","class","_createElementVNode","value","disabled","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","role","_createElementBlock","_component_MDBContainer","_hoisted_1","_component_MDBInput","label","$data","address","$event","size","wrapperClass","_hoisted_2","_hoisted_3","prof","_hoisted_4","_Fragment","_renderList","prodata","option","group","key","opt","_hoisted_6","_hoisted_7","_normalizeClass","hideDistSelectPanel","isDistSelection","distBtw","onClick","_cache","args","_ctx","filterByDistance","_toDisplayString","isSelection","activeClients","isActiveProffs","countOfSelectedProfessional","professional","noClients","_component_MDBBtn","color","block","$options","receive","$router","push","_hoisted_20","_hoisted_21","_hoisted_22","name","props","userIsProvider","Object","isProviderLoggedIn","Boolean","components","MDBContainer","MDBInput","MDBBtn","data","userId","providerId","myLat","mylng","currentProfession","proData","mounted","loggedUserJSON","window","localStorage","getItem","user","JSON","parse","this","Marker","icon","userCurrentLocation","selectProfession","document","getElementById","addEventListener","event","target","showClientLocationOnTheMap","selectDistance","parseFloat","input","center","lat","lng","defaultBounds","north","south","east","west","bounds","componentRestrictions","country","fields","strictBounds","autocomplete","places","Autocomplete","addListener","place","getPlace","location","myLng","getAddressFrom","formatted_address","methods","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","showUserLocationOnTheMap","pinSymbol","path","fillColor","fillOpacity","strokeColor","strokeWeight","scale","Map","zoom","mapTypeId","MapTypeId","ROADMAP","accuracy","long","axios","get","then","response","error_message","error","results","catch","message","distanceBtw","originLat","originLng","destLat","destLng","otherUserLocations","recipients","profession","dist","map","length","count","pos","forEach","yritys","identifyProfText","renderClients","async","providers","providerService","getProviders","__exports__","render"],"sourceRoot":""}