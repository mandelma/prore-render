{"version":3,"file":"js/762.60fb3872.js","mappings":"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","sources":["webpack://prore-mongo/./src/components/controllers/distance.js","webpack://prore-mongo/./src/components/profession/proList.js","webpack://prore-mongo/./src/pages/RecipientPublic.vue","webpack://prore-mongo/./src/pages/RecipientPublic.vue?a5fc"],"sourcesContent":["/*global google*/\nlet res = \"\";\nconst distance = () => {\n    //let text = \"\";\n    //let value = 0;\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\n    var service = new google.maps.DistanceMatrixService();\n    service.getDistanceMatrix(\n        {\n            origins: [origin],\n            destinations: [destination],\n            travelMode: 'DRIVING',\n            unitSystem: google.maps.UnitSystem.METRIC,\n            durationInTraffic: true,\n            avoidHighways: false,\n            avoidTolls: false\n        }, response_data);\n    //return response_data;\n}\n\nconst response_data = (responseDis, status) => {\n    //let result = \"\";\n    if (status !== google.maps.DistanceMatrixStatus.OK || status !== \"OK\"){\n        console.log('Error:', status);\n        // OR\n        alert(status);\n    }else{\n        //alert(responseDis.rows[0].elements[0].distance.text);\n        console.log(\"Distance \" + responseDis.rows[0].elements[0].distance.text)\n\n        res = responseDis.rows[0].elements[0].distance.text;\n        return \"aaaaaaaaaaaaa\"\n        //result = responseDis.rows[0].elements[0].distance.text;\n    }\n    //return  \"Hallo\"        //result.toString();\n}\n\nconst test = () => {\n    console.log(\"Is it working??\" + res)\n\n    return  <div>Hiiii</div>;\n}\n\nconst theDist = () => {\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\n    return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n}\n\n// function calcDistance() {\n//     // var origin = new google.maps.LatLng(60.233093,24.7531362);\n//     // var destination = new google.maps.LatLng(60.2767265,24.8575089);\n//     // return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n//\n//     var directionsService = new google.maps.DirectionsService();\n//\n//     var request = {\n//         origin      : 'Melbourne VIC', // a city, full address, landmark etc\n//         destination : 'Sydney NSW',\n//         travelMode  : google.maps.DirectionsTravelMode.DRIVING\n//     };\n//\n//     directionsService.route(request, function(response, status) {\n//         if ( status === google.maps.DirectionsStatus.OK ) {\n//             alert( response.routes[0].legs[0].distance.value ) ; // the distance in metres\n//         }\n//         else {\n//             // oops, there's no route between these two locations\n//             // every time this happens, a kitten dies\n//             // so please, ensure your address is formatted properly\n//         }\n//     });\n// }\n\nexport default { distance, test, theDist }","// const list = [\r\n//     \"Siivooja\",\r\n//     \"Hitsaaja\",\r\n//     \"Bussikuski\"\r\n// ]\r\n\r\n// const construction = [\r\n//     {\"label\": \"Hitsaaja\"},\r\n//     {\"label\": \"Putkimies\"},\r\n//     {\"label\": \"Sähkömies\"}\r\n// ]\r\n// const realEstate = [\r\n//     {\"label\": \"Siivooja\", \"value\": \"4\"}\r\n// ]\r\n//\r\n// const hospital = [\r\n//     {\"label\": \"Kirurgi\", \"value\": \"5\"},\r\n//     {\"label\": \"Psykiatri\", \"value\": \"6\"}\r\n// ]\r\n//\r\n// const beauty = [\r\n//     {\"label\": \"Kampaaja\", \"value\": \"7\"},\r\n//     {\"label\": \"Parturi\", \"value\": \"8\"}\r\n// ]\r\nconst automotive_industry = [\r\n    {\"label\": \"Automekaanikko\"},\r\n    {\"label\": \"Automaalari\"},\r\n    {\"label\": \"Automyyjä\"},\r\n    {\"label\": \"Katsastaja\"},\r\n    {\"label\": \"Varaosamyyjä\"},\r\n\r\n]\r\nconst food_industry = [\r\n    {\"label\": \"Elintarvikekemisti\"},\r\n    {\"label\": \"Elintarviketyöntekijä\"},\r\n    {\"label\": \"Hankintapäällikkö, meijeriteollisuus\"},\r\n    {\"label\": \"Kondiittori\"},\r\n    {\"label\": \"Leipomotyöntekijä\"},\r\n    {\"label\": \"Leipuri\"},\r\n    {\"label\": \"Lihanleikkaaja\"},\r\n    {\"label\": \"Lihavalmistetyöntekijä\"},\r\n    {\"label\": \"Mylläri\"},\r\n    {\"label\": \"Elintarvikepakkaaja\"},\r\n    {\"label\": \"Juomatyöntekijä\"},\r\n    {\"label\": \"Säilyketyöntekijä\"},\r\n    {\"label\": \"Teurastaja\"},\r\n    {\"label\": \"Elintarviketuotannon työnjohtaja\"},\r\n    {\"label\": \"Tuotannonsuunnittelija, elintarviketeollisuus\"},\r\n    {\"label\": \"Tuotantopäällikkö, meijeriteollisuus\"},\r\n    {\"label\": \"Meijeristi, meijerituotteiden valmistaja\"},\r\n\r\n]\r\nconst energy_sector = [\r\n    {\"label\": \"Automaatioasentaja\"},\r\n    {\"label\": \"Automaatioinsinööri\"},\r\n    {\"label\": \"Biotekniikan insinööri\"},\r\n    {\"label\": \"Elektroniikka-asentaja\"},\r\n    {\"label\": \"Elektroniikkainsinööri\"},\r\n    {\"label\": \"Energianeuvoja\"},\r\n    {\"label\": \"Energiatekniikan insinööri\"},\r\n    {\"label\": \"Hakkurinkuljettaja\"},\r\n    {\"label\": \"Huoltopäällikkö, kylmäala\"},\r\n    {\"label\": \"Kaukolämpöasentaja\"},\r\n    {\"label\": \"Kaukolämpöinsinööri\"},\r\n    {\"label\": \"Insinööri, kemiantekniikka\"},\r\n    {\"label\": \"Kemisti\"},\r\n    {\"label\": \"Kunnossapitoinsinööri\"},\r\n    {\"label\": \"Kylmäsuunnittelija\"},\r\n    {\"label\": \"Käyttöinsinööri\"},\r\n    {\"label\": \"LVI-asentaja\"},\r\n    {\"label\": \"LVI-insinööri\"},\r\n    {\"label\": \"Laborantti\"},\r\n    {\"label\": \"Lämpöyrittäjä\"},\r\n    {\"label\": \"Metsuri\"},\r\n    {\"label\": \"Metsäkoneenkuljettaja\"},\r\n    {\"label\": \"Metsätalouden harjoittaja\"},\r\n    {\"label\": \"Metsätalousinsinööri\"},\r\n    {\"label\": \"Sähköasentaja\"},\r\n    {\"label\": \"Sähköinsinööri\"},\r\n    {\"label\": \"Sähkömestari, meriliikenne\"},\r\n    {\"label\": \"Sähköverkostoasentaja\"},\r\n    {\"label\": \"Tuulivoimainsinööri\"},\r\n    {\"label\": \"Voimalaitoksen käyttäjä\"},\r\n    {\"label\": \"Voimalaitospäällikkö\"},\r\n    {\"label\": \"Huoltoteknikko\"},\r\n\r\n]\r\n\r\n\r\n\r\nconst options = [\r\n    // {\"group\": \"Rakennus\", \"options\": construction},\r\n    // {\"group\": \"Kiinteistöala\", \"options\": realEstate},\r\n    // {\"group\": \"Terveydenala\", \"options\": hospital},\r\n    // {\"group\": \"Kauneusala\", \"options\": beauty},\r\n\r\n    {\"group\": \"Autoala\", \"options\": automotive_industry},\r\n    {\"group\": \"Elintarviketeollisuus\", \"options\": food_industry},\r\n    {\"group\": \"Energia-ala\", \"options\": energy_sector},\r\n\r\n]\r\n\r\n\r\n\r\nexport default options;","<template>\n  <div>\n\n\n\n    <MDBContainer\n\n        style=\"position: relative; z-index: 1;\n        /*width: 80%;*/\n        padding-top: 80px;\n        opacity: 0.8;\n        \"\n    >\n\n\n\n\n\n      <div :class=\"{hideMainPanel: !isMainPanel}\" style=\"background-color: white; padding: 10px;\">\n        <div style=\"display: flex; justify-content: right;\">\n          <MDBIcon size=\"lg\" style=\"padding: 10px;\" @click=\"closeMainPanel\">\n            <i class=\"fas fa-compress-arrows-alt\"></i>\n          </MDBIcon>\n          <div>\n            <MDBBtnClose\n                style=\" padding: 10px;\"\n                size=\"lg\"\n                @click=\"$router.go(-1)\"\n            />\n          </div>\n\n\n\n        </div>\n\n        <MDBBtn color=\"secondary\"\n                v-if=\"isMainPanel\"\n                size=\"lg\"\n                block\n                @click=\"receive\"\n                style=\"position: relative; z-index:1; opacity: 1.2; margin-bottom: 10px;\"\n        >\n          Tee uusi tilaus\n        </MDBBtn>\n\n        <div id=\"panel\">\n          <MDBInput\n              label=\"Anna toinen osoitteesi kun ei täsmää\"\n              v-model=\"address\"\n              id=\"autocomplite\"\n              size=\"lg\"\n              wrapperClass=\"mb-4\"\n          />\n        </div>\n\n\n        <select style=\"padding: 12px; width: 100%;\"  id=\"listOfProfessionals\" v-model=\"prof\">\n          <option value=\"\">Valitse ammattilainen</option>\n          <template v-for=\"option in prodata\">\n\n            <!-- if the `group` property is truthy -->\n            <optgroup v-if=\"option.group\" :label=\"option.group\" :key=\"option.group\">\n              <option v-for=\"opt in option.options\" :value=\"opt.label\" :key=\"opt.label\">\n                {{ opt.label }}\n              </option>\n            </optgroup>\n            <!-- otherwise -->\n            <option v-else :value=\"option\" :key=\"option.value\">\n              {{ option.label }}\n            </option>\n          </template>\n\n        </select>\n\n        <div  :class=\"{hideDistSelectPanel: !isDistSelection}\" style=\"padding-top: 10px;\">\n          <select style=\"padding: 12px; width: 100%;\" id=\"distance\" v-model=\"distBtw\" @click=\"filterByDistance\">\n            <option disabled value=\"1\">1 kilometriä ympärilläsi</option>\n            <option value=\"2\">2 km ympärilläsi</option>\n            <option value=\"3\">3 km ympärilläsi</option>\n            <option value=\"4\">4 km ympärilläsi</option>\n            <option value=\"5\">5 km ympärilläsi</option>\n            <option value=\"6\">6 km ympärilläsi</option>\n            <option value=\"7\">7 km ympärilläsi</option>\n            <option value=\"8\">8 km ympärilläsi</option>\n            <option value=\"9\">9 km ympärilläsi</option>\n            <option value=\"10\">10 km ympärilläsi</option>\n            <option value=\"20\">20 km ympärilläsi</option>\n            <option value=\"30\">30 km ympärilläsi</option>\n            <option value=\"40\">40 km ympärilläsi</option>\n            <option value=\"50\">50 km ympärilläsi</option>\n            <option value=\"60\">60 km ympärilläsi</option>\n            <option value=\"70\">70 km ympärilläsi</option>\n            <option value=\"80\">80 km ympärilläsi</option>\n            <option value=\"90\">90 km ympärilläsi</option>\n            <option value=\"100\">100 km ympärilläsi</option>\n            <option value=\"200\">200 km ympärilläsi</option>\n            <option value=\"300\">300 km ympärilläsi</option>\n          </select>\n\n        </div>\n\n\n<!--        <h3-->\n<!--            :class=\"{activeClients: !isActiveProffs}\"-->\n<!--        >-->\n<!--          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua-->\n<!--        </h3>-->\n        <h3\n            v-if=\"prof\"\n            :class=\"{noClients: isActiveProffs}\"\n        >\n          Ei ammattilaisia vielä!\n        </h3>\n\n\n      </div>\n\n\n\n      <div v-if=\"isMapChat\" style=\"background-color: white; margin: auto; padding: 10px; width: 350px;  border: solid darkgrey\">\n        <p style=\"float: right; color: limegreen;\" @click=\"closeMapChat\">Valmis</p>\n        <chat-panel\n\n            :chatusers = chatusers\n            :messages =messages\n            :selecteduser = selecteduser\n            @select:user = selectUser\n            @noSelected = noSelectUser\n            @on:message = onMessage\n        />\n      </div>\n\n      <div class=\"map-info-table\" v-else-if=\"isTargetSelected && !isMapChat\" style=\"background-color: white; padding: 10px; width: 90%; margin: auto;  border: solid darkgrey\">\n        <div style=\"display: flex; justify-content: right;\">\n          <p style=\" font-size: 15px; padding: 10px; color: orangered;\" @click=\"outFromMarkerPanel\">Valmis</p>\n        </div>\n\n        <table style=\"font-size: 14px; width: 100%; text-align: left;\">\n          <tbody>\n          <tr>\n            <td>\n              Yritys:\n            </td>\n            <td>\n              {{ this.target.yritys }}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Y - tunnus:\n            </td>\n            <td>\n              {{this.target.ytunnus}}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Työalue:\n            </td>\n            <td>\n              {{this.target.range ? this.target.range : \"Palvelun tarjous vain paikalla!\"}}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Tuntihinta:\n            </td>\n            <td>\n              {{ this.target.priceByHour }} Euroa\n            </td>\n          </tr>\n          <tr>\n            <td>\n              palaute:\n            </td>\n            <td>\n              <MDBIcon  style=\"padding: 10px; cursor: pointer;\" class=\"far fa-smile\" size=\"lg\"\n                        @click=\"negative\"></MDBIcon>\n\n\n              <MDBBadge color=\"success\" class=\"translate-middle p-1\"\n                        pill\n                        notification>\n                <p>{{this.target.rating.positive}}</p>\n              </MDBBadge>\n\n\n              <MDBIcon  style=\"padding: 10px; cursor: pointer;\" class=\"far fa-frown\" size=\"lg\"\n                        @click=\"negative\"></MDBIcon>\n\n\n\n              <MDBBadge color=\"danger\" class=\"translate-middle p-1\"\n                        pill\n                        notification>\n                <p>{{this.target.rating.negative}}</p>\n              </MDBBadge>\n            </td>\n          </tr>\n          <tr v-if=\"target.user.id !== userId\">\n<!--            v-if=\"isCreatingChatPanel\"-->\n            <td colspan=\"2\">\n              <MDBBtn  block color=\"secondary\" size=\"lg\" @click=\"createChatPanel\">Chattailemaan</MDBBtn>\n            </td>\n          </tr>\n          <tr v-if=\"target.user.id !== userId && !isOrder\">\n            <td colspan=\"2\">\n              <MDBBtn  block color=\"success\" size=\"lg\" @click=\"createBooking\">Tee tilaus</MDBBtn>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n\n\n\n      </div>\n\n      <div v-if=\"isOrder\" class=\"order\">\n<!--        <p style=\"color: green; display: flex; justify-content: right; padding: 20px;\" @click=\"isOrder = false\">Valmis</p>-->\n        <div style=\"display: flex; justify-content: right; padding: 20px;\">\n          <MDBBtnClose\n            white\n            size=\"lg\"\n            @click=\"isOrder = false\"\n          />\n        </div>\n\n        <form @submit.prevent=\"confirmOrder\">\n          <p style=\"color: #00a6ff; text-align: left;\">Address: {{address}}</p>\n\n          <MDBInput\n              white\n              label=\"Anna otsiko\"\n              v-model=\"orderHeader\"\n              wrapperClass=\"mb-4\"\n          />\n\n          <p style=\"text-align: left;\">Missä ajalla haluaisit ammattilaista?</p>\n\n          <div style=\"color: #fff;\">\n            <VueDatePicker\n                style=\"margin-bottom: 20px;\"\n                v-model=\"orderDate\"\n                dark\n                :min-date=\"new Date()\"\n                teleport-center\n                @internal-model-change=\"handleInternalDate\"\n                :state=\"isNoDate ? false : null\"\n            >\n\n            </VueDatePicker>\n            <MDBTextarea\n                maxlength=\"70\"\n                label=\"Tehtävän kuvaus...\"\n                white\n                rows=\"2\"\n\n                v-model=\"orderDescription\"\n                invalidFeedback=\"Ole hyvä ja kirjoita tehtävän kuvaus.\"\n                validFeedback=\"Ok!\"\n                wrapperClass=\"mb-4\"\n            />\n            <span class=\"message-counter\">{{ orderDescription.length }} / 70</span>\n          </div>\n          <MDBBtn block type=\"submit\" color=\"success\">Tilaa</MDBBtn>\n        </form>\n\n      </div>\n\n\n\n<!--      <p style=\"color: red;\">selecteduser {{selecteduser}}</p>-->\n\n      <div v-if=\"!isTargetSelected\">\n        <div v-if=!isMainPanel >\n          <MDBIcon size=\"2x\" style=\"float: right; padding: 10px;\" @click=\"returnToMainPanel\">\n            <i class=\"fas fa-expand-arrows-alt\"></i>\n          </MDBIcon>\n        </div>\n      </div>\n\n\n\n<!--      style=\"background-color:white; width: 40%; float: right;\"-->\n      <div v-if=\"!isMainPanel && countOfSelectedProfessional > 0 && !isTargetSelected\" style=\"background-color:white;\">\n\n\n        <p style=\"color: red; font-size: 14px; text-align: left; padding: 15px; \">\n          Napsauta merkkiä nähdäksesi palveluntarjoajan!\n        </p>\n\n<!--        <p style=\"color: blue;\">-->\n<!--          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua-->\n<!--        </p>-->\n\n      </div>\n\n\n\n<!--      <MDBBtn color=\"dark\"-->\n<!--              v-if=\"isMainPanel\"-->\n<!--              size=\"lg\"-->\n<!--              block-->\n<!--              @click=\"receive\"-->\n<!--              style=\"position: relative; z-index:1; opacity: 1.2;\"-->\n<!--      >-->\n<!--        Tee uusi tilaus-->\n<!--      </MDBBtn>-->\n\n\n<!--      <MDBBtn color=\"danger\"-->\n<!--              v-if=\"isMainPanel\"-->\n<!--              size=\"lg\"-->\n<!--              block-->\n<!--              @click=\"$router.go(-1)\"-->\n<!--              style=\"position: relative; z-index:1; opacity: 1.0;\"-->\n<!--      >-->\n<!--        Poistu-->\n<!--      </MDBBtn>-->\n\n    </MDBContainer>\n<!--    <h3 style=\"margin-top: 50px;\">Kartta ladataan...</h3>-->\n<!--    <div class=\"spinner-border\" role=\"status\">-->\n<!--      <span class=\"visually-hidden\">Loading...</span>-->\n<!--    </div>-->\n<!--    <section id=\"map\"></section>-->\n\n    <div id=\"map\"></div>\n\n\n  </div>\n\n</template>\n\n<script>\n/* eslint-disable */\n/*global google*/\nimport axios from 'axios'\nimport recipientService from '../service/recipients'\nimport providerService from '../service/providers'\nimport {\n  MDBContainer,\n  MDBInput,\n  MDBBtn,\n  MDBBtnClose,\n  MDBRow,\n  MDBCol,\n  MDBIcon,\n  MDBBadge,\n  MDBTextarea\n} from \"mdb-vue-ui-kit\";\nimport distance from '../components/controllers/distance'\nimport gMap from '../components/location'\nimport proData from '@/components/profession/proList'\nimport chatPanel from '@/pages/LiveChat'\nimport VueDatePicker from '@vuepic/vue-datepicker';\nimport socket from \"@/socket\";\nexport default {\n  name: \"recipient-public\",\n  props: {\n    userIsProvider: Object,\n    selecteduser: null,\n    chatusers: Array,\n    messages: Array,\n    isProviderLoggedIn: Boolean\n  },\n  components: {\n    chatPanel,\n    MDBContainer,\n    MDBInput,\n    MDBBtn,\n    MDBBtnClose,\n    MDBRow,\n    MDBCol,\n    MDBIcon,\n    MDBBadge,\n    MDBTextarea,\n    VueDatePicker\n  },\n  data () {\n    return {\n      isOrder: false,\n      target: {}, // Selected provider from map\n      isTargetSelected: false,\n      isMainPanel: true,\n      isCreatingChatPanel: false,\n      prof: \"\",\n      username: null,\n      userId: null,\n      providerId: null,\n      address: null,\n      myLat: null,\n      mylng: null,\n      countOfSelectedProfessional: 0,\n      isActiveProffs: false,\n      isDistSelection: false,\n      professional: \"\",\n      currentProfession: \"\",\n      distBtw: 1,\n      prodata: proData,\n      room: null,\n      isChatPanel: true,\n      isMapChat: false,\n      providers: [],\n\n      selectedProPosition: null,\n      orderDate: null,\n      orderHeader: \"\",\n      orderDescription: \"\"\n    }\n  },\n  mounted () {\n    const loggedUserJSON = window.localStorage.getItem('loggedAppUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      this.username = user.username;\n      this.userId = user.id\n      //console.log(\"User token: \" + this.loggedUser.token)\n    }\n\n\n  // @media screen and (max-width: 480px) {\n  //     select{\n  //       /* Add your mobile only CSS here */\n  //     }\n  //   }\n  //\n  //   select {\n  //     /* Add your non-mobile CSS here */\n  //   }\n  //\n\n\n    this.resizeMap();\n\n    //console.log(\"Is provider in \" + this.isProviderLoggedIn)\n\n    //console.log(\"User id in providers \" + this.userId)\n\n\n\n    //this.setProviderId()\n\n    const myMarker = new google.maps.Marker({\n      icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\n    })\n\n    this.userCurrentLocation();\n\n    const selectProfession = document.getElementById(\"listOfProfessionals\")\n\n    selectProfession.addEventListener(\"change\", (event) => {\n      this.isDistSelection = true;\n\n      this.currentProfession = event.target.value;\n      this.showClientLocationOnTheMap(event.target.value, this.distBtw);\n    })\n\n    const selectDistance = document.getElementById\n    (\"distance\");\n\n    selectDistance.addEventListener(\"change\", (event) => {\n      this.distBtw = parseFloat(event.target.value);\n\n      console.log(\"+++++++++++ \" + this.countOfSelectedProfessional > 0)\n      this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\n\n    })\n\n\n\n    const input = document.getElementById(\"autocomplite\");\n\n    const center = { lat: 50.064192, lng: -130.605469 };\n    const defaultBounds = {\n      north: center.lat + 0.1,\n      south: center.lat - 0.1,\n      east: center.lng + 0.1,\n      west: center.lng - 0.1,\n    };\n    const options = {\n      bounds: defaultBounds,\n      componentRestrictions: { country: \"fi\" },\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\", \"formatted_address\"],\n      strictBounds: false,\n      //types: [\"establishment\"],\n    };\n    const autocomplete = new google.maps.places.Autocomplete(input, options);\n\n    autocomplete.addListener(\"place_changed\", () => {\n      let place = autocomplete.getPlace()\n      this.myLat = place.geometry.location.lat();\n      this.myLng = place.geometry.location.lng();\n\n      this.getAddressFrom(place.geometry.location.lat(), place.geometry.location.lng())\n      this.address = place.formatted_address;\n      console.log(\"Address xxxx \" + place.formatted_address)\n      console.log(\"place-----------\" + this.myLat)\n    });\n\n  },\n  methods: {\n    selectUser(user) {\n      this.$emit('select:user', user);\n      //if (!user.self)\n      //this.selectedUser = user;\n    },\n\n    noSelectUser () {\n      this.$emit(\"noSelected\");\n    },\n    onMessage(content, date) {\n\n      this.$emit(\"on:message\", content, date);\n\n    },\n    resizeMap() {\n      var myMap = document.getElementById('map');\n      myMap.style.height = \"100%\";\n      myMap.style.width = \"100%\";\n    },\n    receive (){\n      this.$router.push('/rf')\n\n    },\n    userCurrentLocation () {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const { latitude, longitude } = position.coords;\n          // Show a map centered at latitude / longitude.\n          this.myLat = latitude\n          this.myLng = longitude\n          this.showUserLocationOnTheMap (latitude, longitude)\n        });\n      }\n\n    },\n\n    pinSymbol(color) {\n      return {\n        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',\n        fillColor: color,\n        fillOpacity: 1,\n        strokeColor: '#000',\n        strokeWeight: 2,\n        scale: 1\n      };\n    },\n    // Kasutaja sihtkoht, otsitakse automaatselt\n    showUserLocationOnTheMap (latitude, longitude) {\n\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 13,\n        center: new google.maps.LatLng(latitude, longitude),\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        accuracy: 50,\n\n      });\n\n      // new google.maps.Marker({\n      //   position: new google.maps.LatLng(latitude, longitude),\n      //   accuracy: 50,\n      //   map: map,\n      //   icon: this.pinSymbol('yellow'),\n      //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n      // })\n      this.getAddressFrom (latitude, longitude)\n    },\n    // Siis kui sisestada käsitsi aadress\n    getAddressFrom (lat, long) {\n\n      axios.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat +\n          \",\" + long\n          + \"&key=\" + 'AIzaSyDt2YXE5tk0J72JgqnH3DTD7MeoqbbWBmU')\n          .then(response => {\n            if (response.data.error_message) {\n              this.error = response.data.error_message;\n\n              console.log(response.data.error_message)\n            } else {\n              const map = new google.maps.Map(document.getElementById(\"map\"), {\n                zoom: 13,\n                center: new google.maps.LatLng(lat, long),\n                mapTypeId: google.maps.MapTypeId.ROADMAP\n              });\n\n              // AIzaSyBDA2EBoGezJx51wQtxoW3Ecq5Ql8CCAiE\n\n               // new google.maps.Marker({\n               //   position: new google.maps.LatLng(lat, long),\n               //   accuracy: 50,\n               //   map: map,\n               //   icon: this.pinSymbol('yellow'),\n               //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n               // })\n\n              this.address = response.data.results[1].formatted_address\n              //console.log(\"zzzzzzzzzzzzzzzzzzzzzzz\" + response.data.results[0].formatted_address)\n            }\n\n          })\n          .catch(error => {\n            this.error = error.message\n            console.log(error.message)\n          })\n    },\n\n    distanceBtw (originLat, originLng, destLat, destLng) {\n      var origin = new google.maps.LatLng(originLat, originLng);\n      var destination = new google.maps.LatLng(destLat, destLng);\n      return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n    },\n\n\n    otherUserLocations (providers, profession, dist) {\n      let prev_infowindow = false;\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 9,\n        center: new google.maps.LatLng(this.myLat, this.myLng),\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n      });\n      console.log(\"Users count: \" + providers.length)\n      console.log(\"Current distance \" + dist)\n\n       // new google.maps.Marker({\n       //   position: new google.maps.LatLng(this.myLat, this.myLng),\n       //   accuracy: 50,\n       //   map: map,\n       //   icon: this.pinSymbol('yellow'),\n       //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n       // })\n      let count = 0;\n\n      if (providers.length > 0) {\n        this.target = {};\n\n        for (let pos = 0; pos < providers.length; pos++) {\n          console.log(\"------------ \" + providers[pos].yritys);\n          //console.log(\"Client latitude: \" + recipient[pos].latitude)\n          //console.log(\"Client longitude: \" + recipient[pos].longitude)\n          let myLatLong = [this.myLat, this.myLng];\n          providers[pos].profession.forEach(prof => {\n            if (prof === profession) {\n              //his.providers.push(providers[pos])\n              console.log(\"Pro \" + prof.yritys)\n              let providerLatLng = [providers[pos].latitude, providers[pos].longitude];\n              console.log(\"Distance btw \" + this.distanceBtw(this.myLat, this.myLng, providers[pos].latitude, providers[pos].longitude));\n\n              //distance.theDist()\n\n              //this.countOfSelectedClient++;\n              this.isActiveProffs = true;\n\n              if (this.distanceBtw(this.myLat, this.myLng, providers[pos].latitude, providers[pos].longitude) <= dist) {\n                count ++;\n\n                //this.isMainPanel = false;\n\n                // let marker = new google.maps.Marker({\n                //   position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                //   accuracy: 50,\n                //   map: map\n                // })\n                let marker;\n                if (this.isTargetSelected) {\n\n\n\n                  // marker = new google.maps.Marker({\n                  //   position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                  //   map: map\n                  // })\n                  //marker.setMap(null);\n\n                  marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                    accuracy: 50,\n                    map: map,\n                    icon: this.pinSymbol('orange'),\n                    label: { color: '#f75959',  fontWeight: 'bold', fontSize: '14px', text: 'TMI ' + providers[pos].yritys }\n                  })\n                } else {\n\n                  marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                    accuracy: 50,\n                    map: map\n                  })\n\n                }\n\n\n\n                // this.target = providers[pos];\n                // this.room = providers[pos].yritys + this.username;\n\n                window.myGlobalFunction = this.openMarker;\n\n\n                const content = \"class='map-info-window'\"\n\n\n\n                const infowindow = new google.maps.InfoWindow({\n                  //content: \"Hei hei!\"\n                  //content:'<p id=\"map-info-window\">Hello World!</p>'\n                  //content: \"TMI: \" + providers[pos].yritys\n                });\n\n                google.maps.event.addListener(marker, 'click', function() {\n                  //infowindow.setContent(content);\n\n\n                  console.log(\"POOOOS \" + pos)\n                  let p = pos\n\n                  if( prev_infowindow ) {\n                    prev_infowindow.close();\n                  }\n\n                  prev_infowindow = infowindow;\n\n\n                  infowindow.open(map,marker);\n\n                  infowindow.setContent(\"<div  class='map-info-window'>\" + '<p style=\"color: green; \">'+providers[pos].yritys+'</p>' + '<p style=\"color: red; \" onclick=\"myGlobalFunction('+ p +' )\">Tiedot</p>' + \"</div>\")\n\n                });\n\n                console.log(\"Prev infowondow \" + prev_infowindow)\n\n              }\n\n            }\n          })\n\n        }\n\n\n        if (count > 0) {\n          this.isActiveProffs = true;\n          this.isMainPanel = false;\n\n        } else {\n          this.isActiveProffs = false;\n        }\n        this.countOfSelectedProfessional = count;\n        console.log(\"countxx \" + count)\n        this.identifyProfText();\n        //console.log(\"Count \" + this.countOfSelectedClients)\n\n      }\n\n    },\n\n    createChatPanel () {\n      if (this.target.user.username !== this.username) {\n        const room = this.target.yritys + this.username;\n        console.log(\"Username in map: \" + this.target.user.username);\n        console.log(\"Room in map \" + room);\n        // Room users in server will be created\n        socket.emit(\"create room users\", {\n          room: room,\n          username: this.username,\n          providerUsername: this.target.user.username,\n          providerID: this.target.user.id\n        })\n        const chatCredentials = {\n          room: room,\n          userID: this.target.user.id,\n          username: this.target.user.username\n        }\n        this.$emit(\"chatCredentials\", chatCredentials);\n      }\n\n      this.isMapChat = true\n    },\n\n    async openMarker (p) {\n      //this.noSelectUser();\n      console.log(\"Profession \" + this.currentProfession);\n      const pro = [this.currentProfession]\n      // if (this.target.user.username !== this.username) {\n      //   this.room = this.target.yritys + this.username;\n      // }\n\n      const providersMatchingProSearch = await providerService.getProvidersMatchingByProfession({result: pro});\n      let dataForward = [];\n      console.log(\"Matching pro length \" + providersMatchingProSearch.length)\n\n      providersMatchingProSearch.forEach(pms => {\n        console.log(\"Results: \" + pms.user.id);\n        let distance = parseInt(this.distanceBtw(this.myLat, this.myLng, pms.latitude, pms.longitude)).toFixed(0)\n\n        dataForward = dataForward.concat({\n          id: pms.user.id,\n          dist: distance,\n          pro: this.currentProfession\n        })\n      })\n\n\n\n      socket.emit(\"map search report\", dataForward);\n\n      const providers = await providerService.getProviders()\n      if (providers) {\n        console.log(\"watcher position \" + this.myLat + \" / \" + this.myLng);\n        if (providers[p].user.username !== this.username) {\n          this.isCreatingChatPanel = true\n        }\n\n        this.target = providers[p];\n        this.isTargetSelected = true;\n        //console.log(\"Pooooos ---- \" + p);\n        //this.otherUserLocations(providers, this.currentProfession, this.distBtw)\n      }\n\n    },\n    createBooking () {\n      console.log(\"Here you can make an order! \" + this.address)\n      this.isOrder = true;\n    },\n\n    async confirmOrder () {\n      console.log(\"Order\")\n      let recipient;\n      if (this.orderDate) {\n        let year = this.orderDate.getFullYear();\n        let month = this.orderDate.getMonth();\n        let day = this.orderDate.getDate();\n        let hour = this.orderDate.getHours();\n        let minute = this.orderDate.getMinutes();\n        const dateForMs = new Date(year, month, day, hour, minute).getTime();\n\n        recipient = {\n          created: this.orderDate,\n          created_ms: dateForMs,\n          header: this.orderHeader,\n          address: this.address,\n          latitude: this.myLat,\n          longitude: this.myLng,\n          professional: this.currentProfession,\n          year: this.orderDate.getFullYear(),\n          month: this.orderDate.getMonth(),\n          day: this.orderDate.getDate(),\n          hours: this.orderDate.getHours(),\n          minutes: this.orderDate.getMinutes(),\n          description: this.orderDescription,\n          status: \"notSeen\",\n          ordered: this.target.id\n        }\n\n\n      }\n      console.log(\"Address: \" + this.address);\n      const booking = await recipientService.addRecipient(this.userId, recipient)\n      //const room = this.target.yritys + this.username;\n      await recipientService.addProviderData(booking.id, this.target.id);\n      const bookingToProvider = await providerService.addProviderBooking(this.target.id, booking.id);\n      if (bookingToProvider === \"Recipient is added!\") {\n        console.log(\"Iiiiisss \" + (this.target.yritys + this.username))\n        const room = this.target.yritys + this.username;\n        const chatUserDataNavbar = {\n          status: \"\",\n          userID: this.target.user.id,\n          name: this.target.user.username,\n          room: room\n        };\n        const chatCredentials = {\n          room: room,\n          userID: this.target.user.id,\n          username: this.target.user.username\n        }\n        this.$emit(\"chatCredentials\", chatCredentials);\n\n        this.$emit('client:confirmed_provider', this.target.id, booking, chatUserDataNavbar);\n      }\n\n\n\n      const id = this.target.user.id;\n      this.$emit('booking:update', booking)\n      socket.emit(\"accept provider\", {\n        id,\n        booking: booking,\n      })\n      this.$router.push('/received')\n    },\n\n    async outFromMarkerPanel () {\n      this.isTargetSelected = false\n      //this.isMainPanel = true;\n      this.noSelectUser();\n      const providers = await providerService.getProviders()\n      if (providers !== null) {\n        this.otherUserLocations(providers, this.currentProfession, this.distBtw);\n      }\n    },\n\n    closeMapChat () {\n      this.isMapChat = false\n    },\n\n    async returnToMainPanel () {\n      this.isMainPanel = true;\n\n      this.noSelectUser();\n\n      // const providers = await providerService.getProviders()\n      // if (providers !== null) {\n      //   this.otherUserLocations(providers, \"\", \"\");\n      // }\n      //this.currentProfession = \"\"\n      // this.prof = \"\";\n      // this.distBtw = 0\n    },\n\n    closeMainPanel () {\n      this.isMainPanel = false;\n      this.noSelectUser();\n      console.log(\"Close main panel\")\n    },\n\n    renderClients (event) {\n      console.log(\"Event value \" + event.target.value)\n      //this.countOfSelectedClients = 0;\n\n      if (event.target.value) {\n        // @click=\"renderClients($event)\"\n        this.showClientLocationOnTheMap(event.target.value)\n\n      }\n      this.prof = event.target.value\n\n      event.target.value = \"\"\n\n    },\n\n\n    async showClientLocationOnTheMap (profession, dist) {\n\n      console.log(\"Current distance herexx  \" + dist)\n      const providers = await providerService.getProviders()\n      if (providers !== null) {\n        this.otherUserLocations(providers, profession, dist);\n      }\n      // visibility: hidden;\n\n    },\n    identifyProfText () {\n      if (this.countOfSelectedProfessional > 1) {\n        this.professional = \"ammattilaista\"\n      } else {\n        this.professional = \"ammattilainen\"\n      }\n    }\n\n  }\n}\n</script>\n\n<style>\n.ui.button,\n.dot.circle {\n  background-color: #ff5a5f;\n  color: white;\n}\n\n.pac-icon {\n  display: none;\n}\n.pac-item {\n  padding: 10px;\n  font-size: 16px;\n  cursor: pointer;\n}\n.pac-item:hover {\n  background-color: #ececec;\n}\n.pac-item-query {\n  font-size: 16px;\n}\n.spinner-border {\n\n}\n\n\n#map {\n  background:  url(/src/assets/map.gif)  no-repeat center center;\n\n}\n\n#map {\n   position: absolute;\n\n  /*height: 500px; !* The height is 400 pixels *!*/\n  /*width: 100%; !* The width is the width of the web page *!*/\n\n   top: 120px;\n   right: 0;\n   bottom: 0;\n   left: 0;\n }\n\n.map-info-window {\n  /*width: 200px;*/\n\n}\n\n@media only screen and (max-width: 1000px) {\n  #panel {\n    display: none !important;\n\n  }\n}\n\n.activeClients {\n  display: none !important;\n}\n.noClients {\n  display: none !important;\n}\n.hideDistSelectPanel {\n  display: none !important;\n}\n.hideMainPanel {\n  display: none !important;\n}\nh3 {\n  padding: 10px;\n  color: #0095ff;\n}\n.minmax-icon {\n  padding: 12px;\n}\n\n.map-info-table  td {\n  border: 1px solid blue;\n  padding: 5px;\n}\n\n.order{\n  color:yellow;\n\n  /*background-color:rgba(255, 0, 0, 0.5);*/\n  /*background-color:#221a16;*/\n  background-color: #82570c;\n  /*opacity: 0.2  ;*/\n  /*height:300px;*/\n  width:90%;\n  margin: auto;\n  padding: 14px;\n  /*display:flex;*/\n  /*align-items:center;*/\n  /*justify-content:center;*/\n\n\n  /*top: 50vh; left: 50vw; transform: translate(-50%, -50%);*/\n  /*top: 50vh; left: 50vw; transform: translate(-50%, -50%);*/\n  position:relative;\n  /*bottom:5px;*/\n  /*right:5px;*/\n}\n\n</style>","import { render } from \"./RecipientPublic.vue?vue&type=template&id=28b50222\"\nimport script from \"./RecipientPublic.vue?vue&type=script&lang=js\"\nexport * from \"./RecipientPublic.vue?vue&type=script&lang=js\"\n\nimport \"./RecipientPublic.vue?vue&type=style&index=0&id=28b50222&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["res","distance","origin","google","maps","LatLng","destination","service","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","unitSystem","UnitSystem","METRIC","durationInTraffic","avoidHighways","avoidTolls","response_data","responseDis","status","DistanceMatrixStatus","OK","console","log","rows","elements","text","alert","test","_createVNode","_createTextVNode","theDist","geometry","spherical","computeDistanceBetween","toFixed","automotive_industry","food_industry","energy_sector","options","style","_createElementVNode","class","id","value","disabled","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","colspan","_hoisted_53","_createElementBlock","_component_MDBContainer","_normalizeClass","hideMainPanel","$data","isMainPanel","_hoisted_1","_component_MDBIcon","size","onClick","$options","closeMainPanel","_hoisted_2","_component_MDBBtnClose","_cache","$event","_ctx","$router","go","_createBlock","_component_MDBBtn","color","block","receive","_hoisted_3","_component_MDBInput","label","address","wrapperClass","prof","_hoisted_4","_Fragment","_renderList","prodata","option","group","key","opt","_hoisted_6","_hoisted_7","hideDistSelectPanel","isDistSelection","distBtw","args","filterByDistance","noClients","isActiveProffs","isMapChat","_hoisted_30","closeMapChat","_component_chat_panel","chatusers","$props","messages","selecteduser","selectUser","onNoSelected","noSelectUser","onMessage","isTargetSelected","_hoisted_31","_hoisted_32","outFromMarkerPanel","_hoisted_33","_hoisted_34","_toDisplayString","target","yritys","_hoisted_35","ytunnus","_hoisted_36","range","this","_hoisted_37","priceByHour","_hoisted_38","negative","_component_MDBBadge","pill","notification","rating","positive","user","userId","_hoisted_39","_hoisted_40","createChatPanel","isOrder","_hoisted_41","_hoisted_42","createBooking","_hoisted_43","_hoisted_44","white","onSubmit","_withModifiers","confirmOrder","_hoisted_45","orderHeader","_hoisted_46","_hoisted_47","_component_VueDatePicker","orderDate","dark","Date","onInternalModelChange","handleInternalDate","state","isNoDate","_component_MDBTextarea","maxlength","orderDescription","invalidFeedback","validFeedback","_hoisted_48","length","type","_hoisted_49","_hoisted_50","returnToMainPanel","_hoisted_51","countOfSelectedProfessional","_hoisted_52","_hoisted_54","_hoisted_55","name","props","userIsProvider","Object","Array","isProviderLoggedIn","Boolean","components","chatPanel","MDBContainer","MDBInput","MDBBtn","MDBBtnClose","MDBRow","MDBCol","MDBIcon","MDBBadge","MDBTextarea","VueDatePicker","data","isCreatingChatPanel","username","providerId","myLat","mylng","professional","currentProfession","proData","room","isChatPanel","providers","selectedProPosition","mounted","loggedUserJSON","window","localStorage","getItem","JSON","parse","resizeMap","Marker","icon","userCurrentLocation","selectProfession","document","getElementById","addEventListener","event","showClientLocationOnTheMap","selectDistance","parseFloat","input","center","lat","lng","defaultBounds","north","south","east","west","bounds","componentRestrictions","country","fields","strictBounds","autocomplete","places","Autocomplete","addListener","place","getPlace","location","myLng","getAddressFrom","formatted_address","methods","$emit","content","date","myMap","height","width","push","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","showUserLocationOnTheMap","pinSymbol","path","fillColor","fillOpacity","strokeColor","strokeWeight","scale","Map","zoom","mapTypeId","MapTypeId","ROADMAP","accuracy","long","axios","get","then","response","error_message","error","results","catch","message","distanceBtw","originLat","originLng","destLat","destLng","otherUserLocations","profession","dist","prev_infowindow","map","count","pos","forEach","marker","fontWeight","fontSize","myGlobalFunction","openMarker","infowindow","InfoWindow","p","close","open","setContent","identifyProfText","socket","emit","providerUsername","providerID","chatCredentials","userID","async","pro","providersMatchingProSearch","providerService","getProvidersMatchingByProfession","result","dataForward","pms","parseInt","concat","getProviders","recipient","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","dateForMs","getTime","created","created_ms","header","hours","minutes","description","ordered","booking","recipientService","addRecipient","addProviderData","bookingToProvider","addProviderBooking","chatUserDataNavbar","renderClients","__exports__","render"],"sourceRoot":""}