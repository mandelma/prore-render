{"version":3,"file":"js/935.f7bcdfea.js","mappings":"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","sources":["webpack://prore-mongo/./src/components/controllers/distance.js","webpack://prore-mongo/./src/pages/RecipientPublic.vue","webpack://prore-mongo/./src/pages/RecipientPublic.vue?a5fc"],"sourcesContent":["/*global google*/\nlet res = \"\";\nconst distance = () => {\n    //let text = \"\";\n    //let value = 0;\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\n    var service = new google.maps.DistanceMatrixService();\n    service.getDistanceMatrix(\n        {\n            origins: [origin],\n            destinations: [destination],\n            travelMode: 'DRIVING',\n            unitSystem: google.maps.UnitSystem.METRIC,\n            durationInTraffic: true,\n            avoidHighways: false,\n            avoidTolls: false\n        }, response_data);\n    //return response_data;\n}\n\nconst response_data = (responseDis, status) => {\n    //let result = \"\";\n    if (status !== google.maps.DistanceMatrixStatus.OK || status !== \"OK\"){\n        console.log('Error:', status);\n        // OR\n        alert(status);\n    }else{\n        //alert(responseDis.rows[0].elements[0].distance.text);\n        console.log(\"Distance \" + responseDis.rows[0].elements[0].distance.text)\n\n        res = responseDis.rows[0].elements[0].distance.text;\n        return \"aaaaaaaaaaaaa\"\n        //result = responseDis.rows[0].elements[0].distance.text;\n    }\n    //return  \"Hallo\"        //result.toString();\n}\n\nconst test = () => {\n    console.log(\"Is it working??\" + res)\n\n    return  <div>Hiiii</div>;\n}\n\nconst theDist = () => {\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\n    return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n}\n\n// function calcDistance() {\n//     // var origin = new google.maps.LatLng(60.233093,24.7531362);\n//     // var destination = new google.maps.LatLng(60.2767265,24.8575089);\n//     // return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n//\n//     var directionsService = new google.maps.DirectionsService();\n//\n//     var request = {\n//         origin      : 'Melbourne VIC', // a city, full address, landmark etc\n//         destination : 'Sydney NSW',\n//         travelMode  : google.maps.DirectionsTravelMode.DRIVING\n//     };\n//\n//     directionsService.route(request, function(response, status) {\n//         if ( status === google.maps.DirectionsStatus.OK ) {\n//             alert( response.routes[0].legs[0].distance.value ) ; // the distance in metres\n//         }\n//         else {\n//             // oops, there's no route between these two locations\n//             // every time this happens, a kitten dies\n//             // so please, ensure your address is formatted properly\n//         }\n//     });\n// }\n\nexport default { distance, test, theDist }","<template>\n  <div>\n\n\n\n    <MDBContainer\n\n        style=\"position: relative; z-index: 1;\n        /*width: 80%;*/\n        margin-top: 80px;\n        opacity: 0.8;\n        \"\n    >\n\n\n\n\n\n      <div :class=\"{hideMainPanel: !isMainPanel}\" style=\"background-color: #2b2a2a; padding: 10px;\">\n        <div style=\"display: flex; justify-content: right;\">\n          <MDBIcon size=\"lg\" style=\"padding: 10px;\" @click=\"closeMainPanel\">\n            <i class=\"fas fa-compress-arrows-alt\"></i>\n          </MDBIcon>\n          <div>\n            <MDBBtnClose\n                white\n                style=\" padding: 10px;\"\n                size=\"lg\"\n                @click=\"$router.go(-1)\"\n            />\n          </div>\n\n\n\n        </div>\n\n<!--        <MDBBtn color=\"info\"-->\n<!--                v-if=\"isMainPanel\"-->\n<!--                size=\"lg\"-->\n<!--                block-->\n<!--                @click=\"receive\"-->\n<!--                style=\"position: relative; z-index:1; opacity: 1.2; margin-bottom: 10px;\"-->\n<!--        >-->\n<!--          Tee uusi tilaus-->\n<!--        </MDBBtn>-->\n\n        <div id=\"panel\">\n          <MDBInput\n              white\n              label=\"Anna toinen osoitteesi kun ei täsmää\"\n              v-model=\"address\"\n              id=\"autocomplite\"\n              size=\"lg\"\n              wrapperClass=\"mb-4\"\n          />\n        </div>\n<!--        <span id=\"listOfProfessionals\">Options</span>-->\n<!--        <Dropdown aria-labelledby=\"listOfProfessionals\" />-->\n\n\n        <div style=\" margin-bottom: 20px;\" >\n          <Dropdown  @change=\"changedProfession\"   v-model=\"prof\" :options=\"prodata\"   filter optionLabel=\"label\" optionGroupLabel=\"label\" optionGroupChildren=\"items\" placeholder=\"Valitse ammattilainen\" class=\"w-full md:w-100rem\">\n\n            <template value=\"slotProps\" >\n              <div v-if=\"slotProps.value\" >\n                <!--              <img :alt=\"slotProps.value.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`mr-2 flag flag-${slotProps.value.code.toLowerCase()}`\" style=\"width: 18px\" />-->\n                <div >{{ slotProps.value.label }}</div>\n              </div>\n              <span v-else>\n              {{ slotProps.placeholder }}\n            </span>\n            </template>\n            <template  #optiongroup=\"slotProps\"  >\n              <div style=\"\" class=\"flex align-items-center\">\n                <!--              <img :alt=\"slotProps.option.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`mr-2 flag flag-${slotProps.option.code.toLowerCase()}`\" style=\"width: 18px\" />-->\n                <div >{{ slotProps.option.label }}</div>\n              </div>\n            </template>\n          </Dropdown>\n        </div>\n\n\n\n<!--        <select style=\"padding: 12px; width: 100%;\"  id=\"listOfProfessionals\" v-model=\"prof\">-->\n<!--          <option value=\"\">Valitse ammattilainen</option>-->\n<!--          <template v-for=\"option in prodata\">-->\n\n<!--            &lt;!&ndash; if the `group` property is truthy &ndash;&gt;-->\n<!--            <optgroup v-if=\"option.group\" :label=\"option.group\" :key=\"option.group\">-->\n<!--              <option v-for=\"opt in option.options\" :value=\"opt.label\" :key=\"opt.label\">-->\n<!--                {{ opt.label }}-->\n<!--              </option>-->\n<!--            </optgroup>-->\n<!--            &lt;!&ndash; otherwise &ndash;&gt;-->\n<!--            <option v-else :value=\"option\" :key=\"option.value\">-->\n<!--              {{ option.label }}-->\n<!--            </option>-->\n<!--          </template>-->\n\n<!--        </select>-->\n\n\n        <div  :class=\"{hideDistSelectPanel: !isDistSelection}\" style=\"padding-top: 10px;\">\n          <select style=\"padding: 12px; width: 100%; background-color: dimgrey; color: white;\" id=\"distance\" v-model=\"distBtw\" @click=\"filterByDistance\">\n            <option disabled value=\"1\">1 kilometriä ympärilläsi</option>\n            <option value=\"2\">2 km ympärilläsi</option>\n            <option value=\"3\">3 km ympärilläsi</option>\n            <option value=\"4\">4 km ympärilläsi</option>\n            <option value=\"5\">5 km ympärilläsi</option>\n            <option value=\"6\">6 km ympärilläsi</option>\n            <option value=\"7\">7 km ympärilläsi</option>\n            <option value=\"8\">8 km ympärilläsi</option>\n            <option value=\"9\">9 km ympärilläsi</option>\n            <option value=\"10\">10 km ympärilläsi</option>\n            <option value=\"20\">20 km ympärilläsi</option>\n            <option value=\"30\">30 km ympärilläsi</option>\n            <option value=\"40\">40 km ympärilläsi</option>\n            <option value=\"50\">50 km ympärilläsi</option>\n            <option value=\"60\">60 km ympärilläsi</option>\n            <option value=\"70\">70 km ympärilläsi</option>\n            <option value=\"80\">80 km ympärilläsi</option>\n            <option value=\"90\">90 km ympärilläsi</option>\n            <option value=\"100\">100 km ympärilläsi</option>\n            <option value=\"200\">200 km ympärilläsi</option>\n            <option value=\"300\">300 km ympärilläsi</option>\n          </select>\n\n        </div>\n\n\n<!--        <h3-->\n<!--            :class=\"{activeClients: !isActiveProffs}\"-->\n<!--        >-->\n<!--          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua-->\n<!--        </h3>-->\n        <h3\n            v-if=\"prof\"\n            :class=\"{noClients: isActiveProffs}\"\n        >\n          Ei ammattilaisia vielä!\n        </h3>\n\n\n      </div>\n\n\n\n      <div v-if=\"isMapChat\" style=\"background-color: white; margin: auto; padding: 10px; width: 350px;  border: solid darkgrey\">\n        <p style=\"float: right; color: limegreen;\" @click=\"closeMapChat\">Valmis</p>\n        <chat-panel\n\n            :chatusers = chatusers\n            :messages =messages\n            :selecteduser = selecteduser\n            @select:user = selectUser\n            @noSelected = noSelectUser\n            @on:message = onMessage\n        />\n      </div>\n\n      <div class=\"map-info-table\" v-else-if=\"isTargetSelected && !isMapChat\" style=\"background-color: white; padding: 10px; width: 90%; margin: auto;  border: solid darkgrey\">\n        <div style=\"display: flex; justify-content: right;\">\n          <p style=\" font-size: 15px; padding: 10px; color: green;\" @click=\"outFromMarkerPanel\">Valmis</p>\n        </div>\n\n        <table style=\"font-size: 14px; width: 100%; text-align: left;\">\n          <tbody>\n          <tr>\n            <td>\n              Yritys:\n            </td>\n            <td>\n              {{ this.target.yritys }}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Y - tunnus:\n            </td>\n            <td>\n              {{this.target.ytunnus}}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Työalue:\n            </td>\n            <td>\n              {{this.target.range ? this.target.range + \" km\" : \"Palvelun tarjous vain paikalla!\"}}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Palvelun hinta:\n            </td>\n            <td>\n              {{this.target.priceByHour ? this.target.priceByHour + \" Euroa / tunti\": \"Urakkahinta sovittaessa!\"}}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Saatu palaute:\n            </td>\n            <td>\n              <MDBIcon  style=\"padding: 10px; cursor: pointer;\" class=\"far fa-smile\" size=\"lg\"\n                        @click=\"negative\"></MDBIcon>\n\n\n              <MDBBadge color=\"success\" class=\"translate-middle p-1\"\n                        pill\n                        notification>\n                <p>{{this.target.rating.positive}}</p>\n              </MDBBadge>\n\n\n              <MDBIcon  style=\"padding: 10px; cursor: pointer;\" class=\"far fa-frown\" size=\"lg\"\n                        @click=\"negative\"></MDBIcon>\n\n\n\n              <MDBBadge color=\"danger\" class=\"translate-middle p-1\"\n                        pill\n                        notification>\n                <p>{{this.target.rating.negative}}</p>\n              </MDBBadge>\n            </td>\n          </tr>\n          <tr v-if=\"this.target.pro_link\">\n            <td>\n              Kotisivu\n            </td>\n            <td>\n              <a :href=\"'//' + this.target.pro_link\" target=\"_blank\">\n                Palveluntarjoajan kotisivu\n              </a>\n            </td>\n          </tr>\n          <tr v-if=\"target.user.id !== userId\">\n<!--            v-if=\"isCreatingChatPanel\"-->\n            <td colspan=\"2\">\n              <MDBBtn  block color=\"secondary\" size=\"lg\" @click=\"createChatPanel\">Chattailemaan</MDBBtn>\n            </td>\n          </tr>\n          <tr v-if=\"target.user.id !== userId && !isOrder\">\n            <td colspan=\"2\">\n              <MDBBtn  block color=\"success\" size=\"lg\" @click=\"createBooking\">Tee tilaus</MDBBtn>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n\n      </div>\n\n      <div v-if=\"isOrder\" class=\"order\">\n<!--        <p style=\"color: green; display: flex; justify-content: right; padding: 20px;\" @click=\"isOrder = false\">Valmis</p>-->\n        <div style=\"display: flex; justify-content: right; padding: 20px;\">\n          <MDBBtnClose\n            white\n            size=\"lg\"\n            @click=\"isOrder = false\"\n          />\n        </div>\n\n        <form @submit.prevent=\"confirmOrder\">\n          <p style=\"color: #00a6ff; text-align: left;\">Address: {{address}}</p>\n\n          <MDBInput\n              white\n              label=\"Anna otsiko\"\n              v-model=\"orderHeader\"\n              wrapperClass=\"mb-4\"\n          />\n\n          <p style=\"text-align: left;\">Missä ajalla haluaisit ammattilaista?</p>\n\n          <div style=\"color: #fff;\">\n            <VueDatePicker\n                style=\"margin-bottom: 20px;\"\n                v-model=\"orderDate\"\n                dark\n                :min-date=\"new Date()\"\n                teleport-center\n                @internal-model-change=\"handleInternalDate\"\n                :state=\"isNoDate ? false : null\"\n            >\n\n            </VueDatePicker>\n            <MDBTextarea\n                maxlength=\"70\"\n                label=\"Tehtävän kuvaus...\"\n                white\n                rows=\"2\"\n\n                v-model=\"orderDescription\"\n                invalidFeedback=\"Ole hyvä ja kirjoita tehtävän kuvaus.\"\n                validFeedback=\"Ok!\"\n                wrapperClass=\"mb-4\"\n            />\n            <span class=\"message-counter\">{{ orderDescription.length }} / 70</span>\n          </div>\n          <MDBBtn block type=\"submit\" color=\"success\">Tilaa</MDBBtn>\n        </form>\n\n      </div>\n\n\n\n<!--      <p style=\"color: red;\">selecteduser {{selecteduser}}</p>-->\n\n      <div v-if=\"!isTargetSelected\">\n        <div v-if=!isMainPanel >\n          <MDBIcon size=\"2x\" style=\"float: right; padding: 10px;\" @click=\"returnToMainPanel\">\n            <i class=\"fas fa-expand-arrows-alt\"></i>\n          </MDBIcon>\n        </div>\n      </div>\n\n\n\n<!--      style=\"background-color:white; width: 40%; float: right;\"-->\n      <div v-if=\"!isMainPanel && countOfSelectedProfessional > 0 && !isTargetSelected\" style=\"background-color:white;\">\n\n\n        <p style=\"color: red; font-size: 14px; text-align: left; padding: 15px; \">\n          Napsauta merkkiä nähdäksesi palveluntarjoajan!\n        </p>\n\n<!--        <p style=\"color: blue;\">-->\n<!--          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua-->\n<!--        </p>-->\n\n      </div>\n\n\n\n<!--      <MDBBtn color=\"dark\"-->\n<!--              v-if=\"isMainPanel\"-->\n<!--              size=\"lg\"-->\n<!--              block-->\n<!--              @click=\"receive\"-->\n<!--              style=\"position: relative; z-index:1; opacity: 1.2;\"-->\n<!--      >-->\n<!--        Tee uusi tilaus-->\n<!--      </MDBBtn>-->\n\n\n<!--      <MDBBtn color=\"danger\"-->\n<!--              v-if=\"isMainPanel\"-->\n<!--              size=\"lg\"-->\n<!--              block-->\n<!--              @click=\"$router.go(-1)\"-->\n<!--              style=\"position: relative; z-index:1; opacity: 1.0;\"-->\n<!--      >-->\n<!--        Poistu-->\n<!--      </MDBBtn>-->\n\n    </MDBContainer>\n<!--    <h3 style=\"margin-top: 50px;\">Kartta ladataan...</h3>-->\n<!--    <div class=\"spinner-border\" role=\"status\">-->\n<!--      <span class=\"visually-hidden\">Loading...</span>-->\n<!--    </div>-->\n<!--    <section id=\"map\"></section>-->\n\n    <div id=\"map\"></div>\n\n\n  </div>\n\n</template>\n\n<script>\n/* eslint-disable */\n/*global google*/\nimport axios from 'axios'\nimport recipientService from '../service/recipients'\nimport providerService from '../service/providers'\nimport {\n  MDBContainer,\n  MDBInput,\n  MDBBtn,\n  MDBBtnClose,\n  MDBRow,\n  MDBCol,\n  MDBIcon,\n  MDBBadge,\n  MDBTextarea\n} from \"mdb-vue-ui-kit\";\nimport distance from '../components/controllers/distance'\nimport gMap from '../components/location'\nimport proData from '@/components/profession/proList'\nimport chatPanel from '@/pages/LiveChat'\nimport VueDatePicker from '@vuepic/vue-datepicker';\nimport Dropdown from 'primevue/dropdown';\nimport '@/css/pro.css'\nimport socket from \"@/socket\";\nexport default {\n  name: \"recipient-public\",\n  props: {\n    userIsProvider: Object,\n    selecteduser: null,\n    chatusers: Array,\n    messages: Array,\n    isProviderLoggedIn: Boolean\n  },\n  components: {\n    chatPanel,\n    MDBContainer,\n    MDBInput,\n    MDBBtn,\n    MDBBtnClose,\n    MDBRow,\n    MDBCol,\n    MDBIcon,\n    MDBBadge,\n    MDBTextarea,\n    Dropdown,\n    VueDatePicker\n  },\n  data () {\n    return {\n      obj: null,\n      isOrder: false,\n      target: {}, // Selected provider from map\n      isTargetSelected: false,\n      isMainPanel: true,\n      isCreatingChatPanel: false,\n      prof: null,\n      username: null,\n      userId: null,\n      providerId: null,\n      address: null,\n      myLat: null,\n      mylng: null,\n      countOfSelectedProfessional: 0,\n      isActiveProffs: false,\n      isDistSelection: false,\n      professional: \"Automaalari\",\n      currentProfession: \"\",\n      distBtw: 1,\n      prodata: proData,\n      room: null,\n      isChatPanel: true,\n      isMapChat: false,\n      providers: [],\n\n      selectedProPosition: null,\n      orderDate: null,\n      orderHeader: \"\",\n      orderDescription: \"\"\n    }\n  },\n  mounted () {\n    const loggedUserJSON = window.localStorage.getItem('loggedAppUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      this.username = user.username;\n      this.userId = user.id\n      //console.log(\"User token: \" + this.loggedUser.token)\n    }\n\n\n  // @media screen and (max-width: 480px) {\n  //     select{\n  //       /* Add your mobile only CSS here */\n  //     }\n  //   }\n  //\n  //   select {\n  //     /* Add your non-mobile CSS here */\n  //   }\n  //\n\n\n    this.resizeMap();\n\n    //console.log(\"Is provider in \" + this.isProviderLoggedIn)\n\n    //console.log(\"User id in providers \" + this.userId)\n\n    const myMarker = new google.maps.Marker({\n      icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\n    })\n\n    this.userCurrentLocation();\n\n    const mapSearch = window.localStorage.getItem('mapSearchData')\n    if (mapSearch) {\n      const data = JSON.parse(mapSearch)\n      console.log(\"Data+++ \" + data.profession);\n      this.currentProfession = data.profession;\n      this.distBtw = data.distance;\n      this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\n    }\n\n    const mapSearchPro = window.localStorage.getItem('mapSearchProData');\n    if (mapSearchPro) {\n      const currentPro = JSON.parse(mapSearchPro);\n      console.log(\"Pro pos in map ---- \" + currentPro);\n      // console.log(\"User id --------- \" + currentPro.user.id)\n      this.isMainPanel = false;\n      this.openMarker(currentPro);\n\n      //this.isTargetSelected = true;\n\n\n      //this.target = currentPro;\n      //console.log(\"User id in target --------- \" + this.target.user.id)\n\n      // isTargetSelected && !isMapChat\n    }\n\n    //this.setProviderId()\n\n\n\n\n\n    // const selectProfession = document.getElementById(\"listOfProfessionals\")\n    //\n    // selectProfession.addEventListener(\"change\", (event) => {\n    //   this.isDistSelection = true;\n    //\n    //   console.log(\"Selected \" + event.target.value);\n    //\n    //   this.currentProfession = event.target.value;\n    //   this.showClientLocationOnTheMap(event.target.value, this.distBtw);\n    // })\n\n    // this.currentProfession = \"Automaalari\";\n    // this.distBtw = 20;\n    //\n    // this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\n\n    const selectDistance = document.getElementById\n    (\"distance\");\n\n    selectDistance.addEventListener(\"change\", (event) => {\n      this.distBtw = parseFloat(event.target.value);\n\n      const data = {\n        profession: this.currentProfession,\n        distance: parseFloat(event.target.value)\n      }\n\n      window.localStorage.setItem('mapSearchData', JSON.stringify(data));\n\n      //console.log(\"+++++++++++ \" + this.countOfSelectedProfessional > 0)\n      this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\n\n    })\n\n\n\n    const input = document.getElementById(\"autocomplite\");\n\n    const center = { lat: 50.064192, lng: -130.605469 };\n    const defaultBounds = {\n      north: center.lat + 0.1,\n      south: center.lat - 0.1,\n      east: center.lng + 0.1,\n      west: center.lng - 0.1,\n    };\n    const options = {\n      bounds: defaultBounds,\n      componentRestrictions: { country: \"fi\" },\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\", \"formatted_address\"],\n      strictBounds: false,\n      //types: [\"establishment\"],\n    };\n    const autocomplete = new google.maps.places.Autocomplete(input, options);\n\n    autocomplete.addListener(\"place_changed\", () => {\n      let place = autocomplete.getPlace()\n      this.myLat = place.geometry.location.lat();\n      this.myLng = place.geometry.location.lng();\n\n      this.getAddressFrom(place.geometry.location.lat(), place.geometry.location.lng())\n      this.address = place.formatted_address;\n      console.log(\"Address xxxx \" + place.formatted_address)\n      console.log(\"place-----------\" + this.myLat)\n    });\n\n  },\n  methods: {\n    changedProfession () {\n      console.log(\"Changed \" + this.prof.label);\n      this.showClientLocationOnTheMap(this.prof.label, this.distBtw);\n      this.currentProfession = this.prof.label;\n      this.isDistSelection = true;\n    },\n    selectUser(user) {\n      this.$emit('select:user', user);\n      //if (!user.self)\n      //this.selectedUser = user;\n    },\n\n    noSelectUser () {\n      this.$emit(\"noSelected\");\n    },\n    onMessage(content, blob, date) {\n\n      this.$emit(\"on:message\", content, blob, date);\n\n    },\n    resizeMap() {\n      var myMap = document.getElementById('map');\n      myMap.style.height = \"100%\";\n      myMap.style.width = \"100%\";\n    },\n    receive (){\n      this.$router.push('/rf')\n      //this.$router.push('recipient-form');\n\n    },\n    userCurrentLocation () {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const { latitude, longitude } = position.coords;\n          // Show a map centered at latitude / longitude.\n          this.myLat = latitude\n          this.myLng = longitude\n          this.showUserLocationOnTheMap (latitude, longitude)\n        });\n      }\n\n    },\n\n    pinSymbol(color) {\n      return {\n        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',\n        fillColor: color,\n        fillOpacity: 1,\n        strokeColor: '#000',\n        strokeWeight: 2,\n        scale: 1\n      };\n    },\n    // Kasutaja sihtkoht, otsitakse automaatselt\n    showUserLocationOnTheMap (latitude, longitude) {\n\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 13,\n        center: new google.maps.LatLng(latitude, longitude),\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        accuracy: 50,\n\n      });\n\n      // new google.maps.Marker({\n      //   position: new google.maps.LatLng(latitude, longitude),\n      //   accuracy: 50,\n      //   map: map,\n      //   icon: this.pinSymbol('yellow'),\n      //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n      // })\n      this.getAddressFrom (latitude, longitude)\n    },\n    // Siis kui sisestada käsitsi aadress\n    getAddressFrom (lat, long) {\n\n      axios.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat +\n          \",\" + long\n          + \"&key=\" + 'AIzaSyDt2YXE5tk0J72JgqnH3DTD7MeoqbbWBmU')\n          .then(response => {\n            if (response.data.error_message) {\n              this.error = response.data.error_message;\n\n              console.log(response.data.error_message)\n            } else {\n              const map = new google.maps.Map(document.getElementById(\"map\"), {\n                zoom: 13,\n                center: new google.maps.LatLng(lat, long),\n                mapTypeId: google.maps.MapTypeId.ROADMAP\n              });\n\n              // AIzaSyBDA2EBoGezJx51wQtxoW3Ecq5Ql8CCAiE\n\n              this.address = response.data.results[1].formatted_address\n            }\n\n          })\n          .catch(error => {\n            this.error = error.message\n            console.log(error.message)\n          })\n    },\n\n    distanceBtw (originLat, originLng, destLat, destLng) {\n      var origin = new google.maps.LatLng(originLat, originLng);\n      var destination = new google.maps.LatLng(destLat, destLng);\n      return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n    },\n\n\n    otherUserLocations (providers, profession, dist) {\n      let prev_infowindow = false;\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 9,\n        center: new google.maps.LatLng(this.myLat, this.myLng),\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n      });\n      console.log(\"Users count: \" + providers.length)\n      console.log(\"Current distance \" + dist)\n\n       // new google.maps.Marker({\n       //   position: new google.maps.LatLng(this.myLat, this.myLng),\n       //   accuracy: 50,\n       //   map: map,\n       //   icon: this.pinSymbol('yellow'),\n       //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n       // })\n      let count = 0;\n\n      if (providers.length > 0) {\n        this.target = {};\n\n        for (let pos = 0; pos < providers.length; pos++) {\n          console.log(\"------------ \" + providers[pos].yritys);\n          //console.log(\"Client latitude: \" + recipient[pos].latitude)\n          //console.log(\"Client longitude: \" + recipient[pos].longitude)\n          let myLatLong = [this.myLat, this.myLng];\n          providers[pos].profession.forEach(prof => {\n            if (prof === profession) {\n              //his.providers.push(providers[pos])\n              console.log(\"Pro \" + prof.yritys)\n              let providerLatLng = [providers[pos].latitude, providers[pos].longitude];\n              console.log(\"Distance btw \" + this.distanceBtw(this.myLat, this.myLng, providers[pos].latitude, providers[pos].longitude));\n\n              //distance.theDist()\n\n              //this.countOfSelectedClient++;\n              this.isActiveProffs = true;\n\n              if (this.distanceBtw(this.myLat, this.myLng, providers[pos].latitude, providers[pos].longitude) <= dist) {\n                count ++;\n\n                let marker;\n                if (this.isTargetSelected) {\n\n                  marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                    accuracy: 50,\n                    map: map,\n                    icon: this.pinSymbol('orange'),\n                    label: { color: '#f75959',  fontWeight: 'bold', fontSize: '14px', text: 'TMI ' + providers[pos].yritys }\n                  })\n                } else {\n\n                  marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                    accuracy: 50,\n                    map: map\n                  })\n\n                }\n\n\n\n                // this.target = providers[pos];\n                // this.room = providers[pos].yritys + this.username;\n\n                window.myGlobalFunction = this.openMarker;\n\n\n                const content = \"class='map-info-window'\"\n\n\n\n                const infowindow = new google.maps.InfoWindow({\n                  //content: \"Hei hei!\"\n                  //content:'<p id=\"map-info-window\">Hello World!</p>'\n                  //content: \"TMI: \" + providers[pos].yritys\n                });\n\n                google.maps.event.addListener(marker, 'click', function() {\n                  //infowindow.setContent(content);\n\n\n                  console.log(\"POOOOS \" + pos)\n                  let p = pos\n\n                  if( prev_infowindow ) {\n                    prev_infowindow.close();\n                  }\n\n                  prev_infowindow = infowindow;\n\n\n                  infowindow.open(map,marker);\n\n                  infowindow.setContent(\"<div  class='map-info-window'>\" + '<p style=\"color: green; \">'+providers[pos].yritys+'</p>' + '<p style=\"color: red; \" onclick=\"myGlobalFunction('+ p +' )\">Tiedot</p>' + \"</div>\")\n\n                });\n\n                console.log(\"Prev infowondow \" + prev_infowindow)\n\n              }\n\n            }\n          })\n\n        }\n\n\n        if (count > 0) {\n          this.isActiveProffs = true;\n          this.isMainPanel = false;\n\n        } else {\n          this.isActiveProffs = false;\n        }\n        this.countOfSelectedProfessional = count;\n        console.log(\"countxx \" + count)\n        this.identifyProfText();\n        //console.log(\"Count \" + this.countOfSelectedClients)\n\n      }\n\n    },\n\n    handleInitChat () {\n      if (this.target.user.username !== this.username) {\n        const room = this.target.yritys + this.username;\n        console.log(\"Username in map: \" + this.target.user.username);\n        console.log(\"Room in map \" + this.room);\n        // Room users in server will be created\n        // socket.emit(\"create room users\", {\n        //   room: this.room,\n        //   pro: this.target.yritys,\n        //   status: \"map\",\n        //   username: this.username,\n        //   providerUsername: this.target.user.username,\n        //   providerID: this.target.user.id\n        // })\n        const createChatRoom = {\n          room: this.room,\n          pro: this.target.yritys,\n          status: \"map\",\n          username: this.username,\n          providerUsername: this.target.user.username,\n          providerID: this.target.user.id\n        }\n        const chatCredentials = {\n          room: this.room,\n          proID: this.target.user.id,\n          pro: this.target.yritys,\n          userID: this.target.user.id,\n          username: this.target.user.username\n        }\n        //this.$emit(\"chatCredentials\", chatCredentials);\n\n        this.$emit(\"initializeChat\", {\n          initChatRoom: createChatRoom,\n          chatData: chatCredentials\n        });\n\n      }\n    },\n\n    createChatPanel () {\n      // if (this.target.user.username !== this.username) {\n      //   const room = this.target.yritys + this.username;\n      //   console.log(\"Username in map: \" + this.target.user.username);\n      //   console.log(\"Room in map \" + this.room);\n      //   // Room users in server will be created\n      //   socket.emit(\"create room users\", {\n      //     room: this.room,\n      //     pro: this.target.yritys,\n      //     status: \"map\",\n      //     username: this.username,\n      //     providerUsername: this.target.user.username,\n      //     providerID: this.target.user.id\n      //   })\n      //   const chatCredentials = {\n      //     room: this.room,\n      //     userID: this.target.user.id,\n      //     username: this.target.user.username\n      //   }\n      //   this.$emit(\"chatCredentials\", chatCredentials);\n      // }\n      this.handleInitChat();\n      this.isMapChat = true\n    },\n\n    async openMarker (p) {\n      //this.noSelectUser();\n      //console.log(\"Profession \" + this.currentProfession);\n      console.log(\"Pro profession \" )\n      const pro = [this.currentProfession]\n      // if (this.target.user.username !== this.username) {\n      //   this.room = this.target.yritys + this.username;\n      // }\n\n\n      const providersMatchingProSearch = await providerService.getProvidersMatchingByProfession({result: pro});\n\n      let dataForward = [];\n\n      providersMatchingProSearch.forEach(pms => {\n\n        console.log(\"Results: \" + pms.user.id);\n        let distance = parseInt(this.distanceBtw(this.myLat, this.myLng, pms.latitude, pms.longitude)).toFixed(0)\n\n        dataForward = dataForward.concat({\n          id: pms.user.id,\n          dist: distance,\n          pro: this.currentProfession\n        })\n      })\n\n      socket.emit(\"map search report\", dataForward);\n\n      const providers = await providerService.getProviders()\n      if (providers) {\n        //console.log(\"watcher position \" + this.myLat + \" / \" + this.myLng);\n        if (providers[p].user.username !== this.username) {\n          this.isCreatingChatPanel = true\n        }\n\n        console.log(\"Room in client map: \" + this.room);\n\n        this.target = providers[p];\n        window.localStorage.setItem('mapSearchProData', JSON.stringify(p));\n        if (this.username) {\n          this.room = this.target.yritys + this.username;\n        } else {\n          this.room = \"nipitiri\";\n        }\n        this.isTargetSelected = true;\n        //console.log(\"Pooooos ---- \" + p);\n        //this.otherUserLocations(providers, this.currentProfession, this.distBtw)\n      }\n\n    },\n    createBooking () {\n      console.log(\"Here you can make an order! \" + this.address)\n      this.isOrder = true;\n    },\n\n    async confirmOrder () {\n      console.log(\"Order\")\n      let recipient;\n      if (this.orderDate) {\n        let year = this.orderDate.getFullYear();\n        let month = this.orderDate.getMonth();\n        let day = this.orderDate.getDate();\n        let hour = this.orderDate.getHours();\n        let minute = this.orderDate.getMinutes();\n        const dateForMs = new Date(year, month, day, hour, minute).getTime();\n\n        recipient = {\n          created: this.orderDate,\n          created_ms: dateForMs,\n          header: this.orderHeader,\n          address: this.address,\n          latitude: this.myLat,\n          longitude: this.myLng,\n          professional: this.currentProfession,\n          year: this.orderDate.getFullYear(),\n          month: this.orderDate.getMonth(),\n          day: this.orderDate.getDate(),\n          hours: this.orderDate.getHours(),\n          minutes: this.orderDate.getMinutes(),\n          description: this.orderDescription,\n          status: \"notSeen\",\n          ordered: this.target.id\n        }\n\n\n      }\n      console.log(\"Address: \" + this.address);\n      const booking = await recipientService.addRecipient(this.userId, recipient)\n      //const room = this.target.yritys + this.username;\n      await recipientService.addProviderData(booking.id, this.target.id);\n      const bookingToProvider = await providerService.addProviderBooking(this.target.id, booking.id);\n      if (bookingToProvider === \"Recipient is added!\") {\n        console.log(\"Iiiiisss \" + (this.target.yritys + this.username))\n        const room = this.target.yritys + this.username;\n        const chatUserDataNavbar = {\n          status: \"\",\n          userID: this.target.user.id,\n          name: this.target.user.username,\n          room: room\n        };\n        this.handleInitChat();\n        // const chatCredentials = {\n        //   room: this.room,\n        //   pro: this.target.yritys,\n        //   userID: this.target.user.id,\n        //   username: this.target.user.username\n        // }\n        // this.$emit(\"chatCredentials\", chatCredentials);\n\n        this.$emit('client:confirmed_provider', this.target.id, booking, chatUserDataNavbar);\n      }\n\n\n\n      const id = this.target.user.id;\n      this.$emit('booking:update', booking)\n      socket.emit(\"accept provider\", {\n        id,\n        booking: booking,\n      })\n      this.$router.push('/received')\n    },\n\n    async outFromMarkerPanel () {\n      this.isTargetSelected = false\n      //this.isMainPanel = true;\n      this.noSelectUser();\n      window.localStorage.removeItem('mapSearchProData');\n      const providers = await providerService.getProviders()\n      if (providers !== null) {\n        this.otherUserLocations(providers, this.currentProfession, this.distBtw);\n      }\n    },\n\n    closeMapChat () {\n      this.isMapChat = false\n    },\n\n    async returnToMainPanel () {\n      this.isMainPanel = true;\n      window.localStorage.removeItem('mapSearchData')\n      this.noSelectUser();\n\n      // const providers = await providerService.getProviders()\n      // if (providers !== null) {\n      //   this.otherUserLocations(providers, \"\", \"\");\n      // }\n      //this.currentProfession = \"\"\n      // this.prof = \"\";\n      // this.distBtw = 0\n    },\n\n    closeMainPanel () {\n      this.isMainPanel = false;\n      this.noSelectUser();\n      console.log(\"Close main panel\")\n    },\n\n    // renderClients (event) {\n    //   console.log(\"Event value \" + event.target.value)\n    //   //this.countOfSelectedClients = 0;\n    //\n    //   if (event.target.value) {\n    //     // @click=\"renderClients($event)\"\n    //     this.showClientLocationOnTheMap(event.target.value)\n    //\n    //   }\n    //   this.prof = event.target.value\n    //\n    //   event.target.value = \"\"\n    //\n    // },\n\n\n    async showClientLocationOnTheMap (profession, dist) {\n\n      console.log(\"Current distance herexx  \" + dist)\n      const providers = await providerService.getProviders()\n      if (providers !== null) {\n        this.otherUserLocations(providers, profession, dist);\n      }\n\n    },\n    identifyProfText () {\n      if (this.countOfSelectedProfessional > 1) {\n        this.professional = \"ammattilaista\"\n      } else {\n        this.professional = \"ammattilainen\"\n      }\n    }\n\n  }\n}\n</script>\n\n<style>\n.ui.button,\n.dot.circle {\n  background-color: #ff5a5f;\n  color: white;\n}\n\n\n\n.pac-icon {\n  display: none;\n}\n.pac-item {\n  padding: 10px;\n  font-size: 16px;\n  cursor: pointer;\n}\n.pac-item:hover {\n  background-color: #ececec;\n}\n.pac-item-query {\n  font-size: 16px;\n}\n.spinner-border {\n\n}\n\n\n#map {\n  background:  url(/src/assets/map.gif)  no-repeat center center;\n\n}\n\n#map {\n   position: absolute;\n\n  /*height: 500px; !* The height is 400 pixels *!*/\n  /*width: 100%; !* The width is the width of the web page *!*/\n\n   top: 120px;\n   right: 0;\n   bottom: 0;\n   left: 0;\n }\n\n.map-info-window {\n  /*width: 200px;*/\n\n}\n\n#panel {\n  margin-top: 10px;\n}\n\n@media only screen and (max-width: 1000px) {\n  #panel {\n    display: none !important;\n\n  }\n}\n\n.activeClients {\n  display: none !important;\n}\n.noClients {\n  display: none !important;\n}\n.hideDistSelectPanel {\n  display: none !important;\n}\n.hideMainPanel {\n  display: none !important;\n}\nh3 {\n  padding: 10px;\n  color: #0095ff;\n}\n.minmax-icon {\n  padding: 12px;\n}\n\n.map-info-table  td {\n  border: 1px solid blue;\n  padding: 5px;\n}\n\n.order{\n  color:yellow;\n\n  /*background-color:rgba(255, 0, 0, 0.5);*/\n  /*background-color:#221a16;*/\n  background-color: #434240;\n  /*opacity: 0.2  ;*/\n  /*height:300px;*/\n  width:90%;\n  margin: auto;\n  padding: 14px;\n  /*display:flex;*/\n  /*align-items:center;*/\n  /*justify-content:center;*/\n\n\n  /*top: 50vh; left: 50vw; transform: translate(-50%, -50%);*/\n  /*top: 50vh; left: 50vw; transform: translate(-50%, -50%);*/\n  position:relative;\n  /*bottom:5px;*/\n  /*right:5px;*/\n}\n\n</style>","import { render } from \"./RecipientPublic.vue?vue&type=template&id=2d7dc6fe\"\nimport script from \"./RecipientPublic.vue?vue&type=script&lang=js\"\nexport * from \"./RecipientPublic.vue?vue&type=script&lang=js\"\n\nimport \"./RecipientPublic.vue?vue&type=style&index=0&id=2d7dc6fe&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["res","distance","origin","google","maps","LatLng","destination","service","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","unitSystem","UnitSystem","METRIC","durationInTraffic","avoidHighways","avoidTolls","response_data","responseDis","status","DistanceMatrixStatus","OK","console","log","rows","elements","text","alert","test","_createVNode","_createTextVNode","theDist","geometry","spherical","computeDistanceBetween","toFixed","style","_createElementVNode","class","id","value","disabled","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","colspan","_hoisted_57","_createElementBlock","_component_MDBContainer","_normalizeClass","hideMainPanel","$data","isMainPanel","_hoisted_1","_component_MDBIcon","size","onClick","$options","closeMainPanel","_hoisted_2","_component_MDBBtnClose","white","_cache","$event","_ctx","$router","go","_hoisted_3","_component_MDBInput","label","address","wrapperClass","_hoisted_4","_component_Dropdown","onChange","changedProfession","prof","options","prodata","filter","optionLabel","optionGroupLabel","optionGroupChildren","placeholder","optiongroup","_withCtx","slotProps","_hoisted_8","_toDisplayString","option","_hoisted_5","_hoisted_6","_hoisted_7","hideDistSelectPanel","isDistSelection","distBtw","args","filterByDistance","noClients","isActiveProffs","isMapChat","_hoisted_31","closeMapChat","_component_chat_panel","chatusers","$props","messages","selecteduser","selectUser","onNoSelected","noSelectUser","onMessage","isTargetSelected","_hoisted_32","_hoisted_33","outFromMarkerPanel","_hoisted_34","_hoisted_35","target","yritys","_hoisted_36","ytunnus","_hoisted_37","range","this","_hoisted_38","priceByHour","_hoisted_39","negative","_component_MDBBadge","color","pill","notification","rating","positive","pro_link","_hoisted_40","_hoisted_41","href","_hoisted_42","user","userId","_hoisted_43","_hoisted_44","_component_MDBBtn","block","createChatPanel","isOrder","_hoisted_45","_hoisted_46","createBooking","_hoisted_47","_hoisted_48","onSubmit","_withModifiers","confirmOrder","_hoisted_49","orderHeader","_hoisted_50","_hoisted_51","_component_VueDatePicker","orderDate","dark","Date","onInternalModelChange","handleInternalDate","state","isNoDate","_component_MDBTextarea","maxlength","orderDescription","invalidFeedback","validFeedback","_hoisted_52","length","type","_hoisted_53","_hoisted_54","returnToMainPanel","_hoisted_55","countOfSelectedProfessional","_hoisted_56","_hoisted_58","_hoisted_59","name","props","userIsProvider","Object","Array","isProviderLoggedIn","Boolean","components","chatPanel","MDBContainer","MDBInput","MDBBtn","MDBBtnClose","MDBRow","MDBCol","MDBIcon","MDBBadge","MDBTextarea","Dropdown","VueDatePicker","data","obj","isCreatingChatPanel","username","providerId","myLat","mylng","professional","currentProfession","proData","room","isChatPanel","providers","selectedProPosition","mounted","loggedUserJSON","window","localStorage","getItem","JSON","parse","resizeMap","Marker","icon","userCurrentLocation","mapSearch","profession","showClientLocationOnTheMap","mapSearchPro","currentPro","openMarker","selectDistance","document","getElementById","addEventListener","event","parseFloat","setItem","stringify","input","center","lat","lng","defaultBounds","north","south","east","west","bounds","componentRestrictions","country","fields","strictBounds","autocomplete","places","Autocomplete","addListener","place","getPlace","location","myLng","getAddressFrom","formatted_address","methods","$emit","content","blob","date","myMap","height","width","receive","push","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","showUserLocationOnTheMap","pinSymbol","path","fillColor","fillOpacity","strokeColor","strokeWeight","scale","Map","zoom","mapTypeId","MapTypeId","ROADMAP","accuracy","long","axios","get","then","response","error_message","error","results","catch","message","distanceBtw","originLat","originLng","destLat","destLng","otherUserLocations","dist","prev_infowindow","map","count","pos","forEach","marker","fontWeight","fontSize","myGlobalFunction","infowindow","InfoWindow","p","close","open","setContent","identifyProfText","handleInitChat","createChatRoom","pro","providerUsername","providerID","chatCredentials","proID","userID","initChatRoom","chatData","async","providersMatchingProSearch","providerService","getProvidersMatchingByProfession","result","dataForward","pms","parseInt","concat","socket","emit","getProviders","recipient","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","dateForMs","getTime","created","created_ms","header","hours","minutes","description","ordered","booking","recipientService","addRecipient","addProviderData","bookingToProvider","addProviderBooking","chatUserDataNavbar","removeItem","__exports__","render"],"sourceRoot":""}