{"version":3,"file":"js/689.0d03facd.js","mappings":"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","sources":["webpack://prore-mongo/./src/components/notifications/errorMessage.js","webpack://prore-mongo/./src/components/RegisterForm.vue","webpack://prore-mongo/./src/components/RegisterForm.vue?33ca"],"sourcesContent":["const ErrorMessage = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n\n        <div className=\"error\">\n            {message}\n\n        </div>\n\n    )\n}\n\nexport default ErrorMessage","<template>\n  <div>\n    <h2 style=\"margin-top: 50px; text-align: center\">- Rekisteröintilomake -</h2>\n    <MDBContainer style=\"margin-top: 50px;\">\n\n      <registerError\n          :message = registerErrorMessage\n      />\n      <registerError\n          :message = usernameExisting\n      />\n      <form @submit.prevent=\"userData\">\n        <!-- 2 column grid layout with text inputs for the first and last names -->\n        <!-- First name input -->\n        <MDBInput\n            type=\"text\"\n            size=\"lg\"\n            label=\"Etunimi\"\n            id=\"registerFirstName\"\n            v-model=\"registerFirstName\"\n            wrapperClass=\"mb-4\"\n        />\n\n        <!-- Last name input -->\n        <MDBInput\n            type=\"text\"\n            size=\"lg\"\n            label=\"Sukunimi\"\n            id=\"registerLastName\"\n            v-model=\"registerLastName\"\n            wrapperClass=\"mb-4\"\n        />\n\n        <!-- Username input -->\n        <MDBInput\n            type=\"text\"\n            size=\"lg\"\n            label=\"käyttäjätunnus\"\n            id=\"registerUsername\"\n            v-model=\"registerUsername\"\n            wrapperClass=\"mb-4\"\n        />\n        <!-- Email input -->\n        <MDBInput\n            type=\"text\"\n            size=\"lg\"\n            label=\"Email\"\n            white\n            id=\"registerEmail\"\n            v-model=\"registerEmail\"\n            wrapperClass=\"mb-4\"\n        />\n        <div>\n          Email is {{isValidEmail ? 'valid' : 'invalid'}}\n        </div>\n        <!-- Password input -->\n        <MDBInput\n            type=\"password\"\n            size=\"lg\"\n            label=\"Salasana\"\n            id=\"registerPassword\"\n            v-model=\"registerPassword\"\n            wrapperClass=\"mb-4\"\n        />\n\n        <!-- Repeat Password input -->\n        <MDBInput\n            type=\"password\"\n            size=\"lg\"\n            label=\"Toista salasana\"\n            id=\"registerPasswordRepeat\"\n            v-model=\"registerPasswordRepeat\"\n            wrapperClass=\"mb-4\"\n        />\n\n        <!-- Checkbox -->\n        <MDBCheckbox\n            label=\"Muista minut\"\n            size=\"lg\"\n            id=\"registerSubscribeCheck\"\n            v-model=\"registerSubscribeCheck\"\n            wrapperClass=\"d-flex justify-content-center mb-4\"\n        />\n\n        <input required=\"required\" v-model=\"registerEmail\" :error-messages=\"emailErrors\"\n               @input=\"$v.registerEmail.$touch()\" @blur=\"$v.registerEmail.$touch()\" label=\"Email\"\n               />\n\n        <!-- Submit button -->\n        <MDBBtn outline=\"primary\" size=\"lg\" type=\"submit\"  block class=\"mb-4\"> Luo tili </MDBBtn>\n\n        <!-- Register buttons -->\n        <div class=\"text-center\">\n          <p>Tai registeröidy käyttämällä:</p>\n          <MDBBtn color=\"secondary\" floating class=\"mx-1\">\n            <MDBIcon iconStyle=\"fab\" icon=\"facebook-f\" />>\n          </MDBBtn>\n\n          <MDBBtn color=\"secondary\" floating class=\"mx-1\">\n            <MDBIcon iconStyle=\"fab\" icon=\"google\" />\n          </MDBBtn>\n\n          <MDBBtn color=\"secondary\" floating class=\"mx-1\">\n            <MDBIcon iconStyle=\"fab\" icon=\"twitter\" />\n          </MDBBtn>\n        </div>\n      </form>\n    </MDBContainer>\n\n  </div>\n\n</template>\n\n<script>\n/* eslint-disable */\n// import { validationMixin } from 'vuelidate'\n// import { required, email} from 'vuelidate/lib/validators'\nimport {\n  MDBContainer,\n  MDBInput,\n  MDBCheckbox,\n  MDBBtn,\n  MDBIcon\n} from \"mdb-vue-ui-kit\";\nimport { ref } from \"vue\";\nimport userService from \"@/service/users\";\nimport loginService from \"@/service/login\";\nimport registerError from '../components/notifications/errorMessage'\n\nexport default {\n  name: \"app-register\",\n  components: {\n    registerError,\n    MDBContainer,\n    MDBInput,\n    MDBCheckbox,\n    MDBBtn,\n    MDBIcon\n  },\n  // mixins: [validationMixin],\n  // validations: {\n  //\n  //   email: { required, email },\n  //\n  // },\n  data () {\n    return {\n      registerErrorMessage: null,\n      usernameExisting: null\n\n    }\n  },\n\n  setup() {\n    const registerFirstName = ref(\"\");\n    const registerLastName = ref(\"\");\n    const registerUsername = ref(\"\");\n    const registerEmail = ref(\"\");\n    const registerPassword = ref(\"\");\n    const registerPasswordRepeat = ref(\"\");\n    const registerSubscribeCheck = ref(true);\n    return {\n      registerLastName,\n      registerFirstName,\n      registerUsername,\n      registerEmail,\n      registerPassword,\n      registerPasswordRepeat,\n      registerSubscribeCheck\n    };\n  },\n  computed: {\n    isValidEmail() {\n      return /^[^@]+@\\w+(\\.\\w+)+\\w$/.test(this.registerEmail);\n    }\n  },\n  // computed: {\n  //   emailErrors () {\n  //     const errors = []\n  //     if (!this.$v.email.$dirty) return errors\n  //     !this.$v.email.email && errors.push('Must be valid e-mail')\n  //     !this.$v.email.required && errors.push('E-mail is required')\n  //     return errors\n  //   },\n  // },\n  methods: {\n    emailValidation () {\n  //     Vue.createApp({\n  //       data: () => ({ email: '', password: '', errors: null }),\n  //       methods: {\n  //         async submitForm() {\n  //           const errors = {};\n  //           if (!this.email) {\n  //             errors.email = 'Email is required';\n  //           } else if (!/^[^@]+@\\w+(\\.\\w+)+\\w$/.test(this.email)) {\n  //             errors.email = 'Invalid email';\n  //           }\n  //\n  //           if (Object.keys(errors).length > 0) {\n  //             this.errors = errors;\n  //             return;\n  //           } else {\n  //             this.errors = null;\n  //           }\n  //\n  //           // Handle submitting form\n  //         }\n  //       },\n  //       template: `\n  // <div>\n  //   <form @submit.prevent=\"submitForm\">\n  //     <div>\n  //       <input v-model=\"email\" placeholder=\"email\" />\n  //       <div v-if=\"errors && errors.email\">\n  //         {{errors.email}}\n  //       </div>\n  //     </div>\n  //     <div>\n  //       <input type=\"password\" v-model=\"password\" />\n  //     </div>\n  //     <div>\n  //       <button type=\"submit\">Register</button>\n  //     </div>\n  //   </form>\n  // </div>\n  // `\n  //     }).mount('#example2');\n    },\n    validateEmail() {\n      if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(this.email)) {\n        this.msg['email'] = 'Please enter a valid email address';\n      } else {\n        this.msg['email'] = '';\n      }\n    },\n    // New user data to send forward\n    async userData () {\n      const newUser = {\n        firstName: this.registerFirstName,\n        lastName: this.registerLastName,\n        username: this.registerUsername,\n        email: this.registerEmail,\n        password: this.registerPassword\n      }\n      if (this.registerFirstName !== \"\"\n          && this.registerLastName !== \"\"\n          && this.registerUsername !== \"\"\n          && this.registerPassword !== \"\"\n          && this.registerEmail !== \"\"\n      ) {\n\n        if (this.registerUsername.length < 4) {\n          this.registerErrorMessage = \"Username must be longer than 4 characters!\"\n          setTimeout(() => {\n            this.registerErrorMessage = null;\n          }, 2000);\n        } else {\n          console.log(\"Uus kasutaja\")\n          const userExisting = await userService.addUser(newUser);\n          if (userExisting.error === \"username existing\") {\n            this.usernameExisting = \"Käyttäjätunnus on jo olemassa! Vaihda käyttäjätunnus\";\n            setTimeout(() => {\n              this.usernameExisting = null;\n            }, 2000);\n          } else {\n            const loggedInUser = await loginService.login({username: this.registerUsername, password: this.registerPassword});\n            if (loggedInUser.error !== \"login error\") {\n              this.$emit('register:data', loggedInUser)\n            }\n          }\n\n        }\n      } else {\n        this.registerErrorMessage = \"All fields must be filled!\"\n        setTimeout(() => {\n          this.registerErrorMessage = null;\n        }, 2000);\n      }\n      //await userService.addUser(newUser);\n\n      //const loggedInUser = await loginService.login({username: this.registerUsername, password: this.registerPassword});\n\n      //this.$emit('register:data', newUser)\n    }\n  }\n}\n</script>\n\n<style scoped>\n#app {\n  font-family: Roboto, Helvetica, Arial, sans-serif;\n\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n.error {\n  color: white;\n  background: #f5839c;\n  font-size: 20px;\n  border: solid #f75959;\n  border-radius: 5px;\n  padding: 10px;\n  margin-bottom: 10px;\n}\n</style>","import { render } from \"./RegisterForm.vue?vue&type=template&id=460c6c16&scoped=true\"\nimport script from \"./RegisterForm.vue?vue&type=script&lang=js\"\nexport * from \"./RegisterForm.vue?vue&type=script&lang=js\"\n\nimport \"./RegisterForm.vue?vue&type=style&index=0&id=460c6c16&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-460c6c16\"]])\n\nexport default __exports__"],"names":["ErrorMessage","message","_createVNode","_createElementVNode","style","class","_createElementBlock","_hoisted_1","_component_MDBContainer","_component_registerError","$data","registerErrorMessage","usernameExisting","onSubmit","_cache","_withModifiers","args","$options","userData","_component_MDBInput","type","size","label","id","$setup","registerFirstName","$event","wrapperClass","registerLastName","registerUsername","white","registerEmail","_toDisplayString","isValidEmail","registerPassword","registerPasswordRepeat","_component_MDBCheckbox","registerSubscribeCheck","required","_ctx","emailErrors","onInput","$v","$touch","onBlur","_component_MDBBtn","outline","block","_hoisted_3","_hoisted_4","color","floating","_component_MDBIcon","iconStyle","icon","name","components","registerError","MDBContainer","MDBInput","MDBCheckbox","MDBBtn","MDBIcon","data","setup","ref","computed","test","this","methods","emailValidation","validateEmail","email","msg","async","newUser","firstName","lastName","username","password","length","setTimeout","console","log","userExisting","userService","addUser","error","loggedInUser","loginService","login","$emit","__exports__","render"],"sourceRoot":""}