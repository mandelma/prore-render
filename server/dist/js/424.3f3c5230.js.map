{"version":3,"file":"js/424.3f3c5230.js","mappings":"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","sources":["webpack://prore-mongo/./src/components/notifications/errorMessage.js","webpack://prore-mongo/./src/components/RegisterForm.vue","webpack://prore-mongo/./src/service/googleAuth.js","webpack://prore-mongo/./src/components/RegisterForm.vue?33ca"],"sourcesContent":["const ErrorMessage = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n\n        <div className=\"error\">\n            {message}\n            <img className={'errorImg'} alt={'error'} src={require('@/assets/error.png')}/>\n\n        </div>\n\n    )\n}\n\nexport default ErrorMessage","<template>\n  <div>\n    <h2 style=\"margin-top: 50px; text-align: center\">- Rekisteröintilomake -</h2>\n    <MDBContainer style=\"margin-top: 50px;\">\n\n      <registerError\n          :message = registerErrorMessage\n      />\n      <registerError\n          :message = usernameExisting\n      />\n      <registerError\n          :message = registerEmailErrorMessage\n      />\n      <register-error\n        :message = registerPwRepeatErrorMessage\n      />\n      <form  @submit.prevent=\"userData\">\n        <!-- 2 column grid layout with text inputs for the first and last names -->\n        <!-- First name input -->\n\n        <MDBInput\n            type=\"text\"\n            size=\"lg\"\n            label=\"Etunimi\"\n            white\n            id=\"registerFirstName\"\n            v-model=\"registerFirstName\"\n            wrapperClass=\"mb-4\"\n        />\n\n        <!-- Last name input -->\n        <MDBInput\n            type=\"text\"\n            size=\"lg\"\n            label=\"Sukunimi\"\n            white\n            id=\"registerLastName\"\n            v-model=\"registerLastName\"\n            wrapperClass=\"mb-4\"\n        />\n\n        <!-- Username input -->\n        <MDBInput\n            type=\"text\"\n            size=\"lg\"\n            label=\"käyttäjätunnus\"\n            white\n            id=\"registerUsername\"\n            v-model=\"registerUsername\"\n            wrapperClass=\"mb-4\"\n        />\n        <!-- Email input -->\n        <MDBInput\n            type=\"text\"\n            size=\"lg\"\n            label=\"Email\"\n            white\n            id=\"registerEmail\"\n            v-model=\"registerEmail\"\n            wrapperClass=\"mb-4\"\n        />\n<!--        <div>-->\n<!--          Email is {{isValidEmail ? 'valid' : 'invalid'}}-->\n<!--        </div>-->\n        <!-- Password input -->\n        <MDBInput\n            type=\"password\"\n            size=\"lg\"\n            label=\"Salasana\"\n            white\n            id=\"registerPassword\"\n            v-model=\"registerPassword\"\n            wrapperClass=\"mb-4\"\n        />\n\n        <!-- Repeat Password input -->\n        <MDBInput\n            type=\"password\"\n            size=\"lg\"\n            label=\"Toista salasana\"\n            white\n            id=\"registerPasswordRepeat\"\n            v-model=\"registerPasswordRepeat\"\n            wrapperClass=\"mb-4\"\n        />\n\n        <!-- Checkbox -->\n        <MDBCheckbox\n            label=\"Muista minut\"\n            white\n            size=\"lg\"\n            id=\"registerSubscribeCheck\"\n            v-model=\"registerSubscribeCheck\"\n            wrapperClass=\"d-flex justify-content-center mb-4\"\n        />\n\n<!--        <input required=\"required\" v-model=\"registerEmail\" :error-messages=\"emailErrors\"-->\n<!--               @input=\"$v.registerEmail.$touch()\" @blur=\"$v.registerEmail.$touch()\" label=\"Email\"-->\n<!--               />-->\n\n        <!-- Submit button -->\n        <MDBBtn outline=\"primary\" size=\"lg\" type=\"submit\"  block class=\"mb-4\"> Luo tili </MDBBtn>\n\n        <!-- Register buttons -->\n        <div class=\"text-center\">\n          <p>Tai registeröidy käyttämällä:</p>\n          <MDBBtn color=\"secondary\" floating class=\"mx-1\">\n            <MDBIcon iconStyle=\"fab\" icon=\"facebook-f\" />>\n          </MDBBtn>\n\n          <MDBBtn color=\"secondary\" floating class=\"mx-1\" @click=\"handleGoogleAuth\">\n            <MDBIcon iconStyle=\"fab\" icon=\"google\" />\n          </MDBBtn>\n\n          <MDBBtn color=\"secondary\" floating class=\"mx-1\">\n            <MDBIcon iconStyle=\"fab\" icon=\"twitter\" />\n          </MDBBtn>\n\n        </div>\n      </form>\n    </MDBContainer>\n\n  </div>\n\n</template>\n\n<script>\n/* eslint-disable */\n// import { validationMixin } from 'vuelidate'\n// import { required, email} from 'vuelidate/lib/validators'\nimport {\n  MDBContainer,\n  MDBInput,\n  MDBCheckbox,\n  MDBBtn,\n  MDBIcon\n} from \"mdb-vue-ui-kit\";\nimport { ref } from \"vue\";\nimport userService from \"@/service/users\";\nimport googleService from '@/service/googleAuth'\nimport loginService from \"@/service/login\";\nimport registerError from '../components/notifications/errorMessage'\n//import {GoogleLogin} from 'vue3-google-login'\n\n\nexport default {\n  name: \"app-register\",\n  components: {\n    registerError,\n    MDBContainer,\n    MDBInput,\n    MDBCheckbox,\n    MDBBtn,\n    MDBIcon\n  },\n  // mixins: [validationMixin],\n  // validations: {\n  //\n  //   email: { required, email },\n  //\n  // },\n  data () {\n    return {\n      registerErrorMessage: null,\n      registerEmailErrorMessage: null,\n      registerPwRepeatErrorMessage: null,\n      usernameExisting: null\n    }\n  },\n\n  setup() {\n    const registerFirstName = ref(\"\");\n    const registerLastName = ref(\"\");\n    const registerUsername = ref(\"\");\n    const registerEmail = ref(\"\");\n    const registerPassword = ref(\"\");\n    const registerPasswordRepeat = ref(\"\");\n    const registerSubscribeCheck = ref(true);\n    return {\n      registerLastName,\n      registerFirstName,\n      registerUsername,\n      registerEmail,\n      registerPassword,\n      registerPasswordRepeat,\n      registerSubscribeCheck\n    };\n  },\n  computed: {\n    isValidEmail() {\n      return /^[^@]+@\\w+(\\.\\w+)+\\w$/.test(this.registerEmail);\n    }\n  },\n  // computed: {\n  //   emailErrors () {\n  //     const errors = []\n  //     if (!this.$v.email.$dirty) return errors\n  //     !this.$v.email.email && errors.push('Must be valid e-mail')\n  //     !this.$v.email.required && errors.push('E-mail is required')\n  //     return errors\n  //   },\n  // },\n  methods: {\n\n    async handleGoogleAuth () {\n      console.log(\"Google\");\n      //await googleService.getAll()\n    },\n\n    emailValidation () {\n  //     Vue.createApp({\n  //       data: () => ({ email: '', password: '', errors: null }),\n  //       methods: {\n  //         async submitForm() {\n  //           const errors = {};\n  //           if (!this.email) {\n  //             errors.email = 'Email is required';\n  //           } else if (!/^[^@]+@\\w+(\\.\\w+)+\\w$/.test(this.email)) {\n  //             errors.email = 'Invalid email';\n  //           }\n  //\n  //           if (Object.keys(errors).length > 0) {\n  //             this.errors = errors;\n  //             return;\n  //           } else {\n  //             this.errors = null;\n  //           }\n  //\n  //           // Handle submitting form\n  //         }\n  //       },\n  //       template: `\n  // <div>\n  //   <form @submit.prevent=\"submitForm\">\n  //     <div>\n  //       <input v-model=\"email\" placeholder=\"email\" />\n  //       <div v-if=\"errors && errors.email\">\n  //         {{errors.email}}\n  //       </div>\n  //     </div>\n  //     <div>\n  //       <input type=\"password\" v-model=\"password\" />\n  //     </div>\n  //     <div>\n  //       <button type=\"submit\">Register</button>\n  //     </div>\n  //   </form>\n  // </div>\n  // `\n  //     }).mount('#example2');\n    },\n    validateEmail() {\n      if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(this.email)) {\n        this.msg['email'] = 'Please enter a valid email address';\n      } else {\n        this.msg['email'] = '';\n      }\n    },\n    // New user data to send forward\n    async userData () {\n      const newUser = {\n        firstName: this.registerFirstName,\n        lastName: this.registerLastName,\n        username: this.registerUsername,\n        email: this.registerEmail,\n        password: this.registerPassword\n      }\n      if (this.registerFirstName !== \"\"\n          && this.registerLastName !== \"\"\n          && this.registerUsername !== \"\"\n          && this.registerPassword !== \"\"\n          && this.registerEmail !== \"\"\n      ) {\n\n        if (this.registerUsername.length < 4) {\n          this.registerErrorMessage = \"Username must be longer than 4 characters!\"\n          setTimeout(() => {\n            this.registerErrorMessage = null;\n          }, 2000);\n        } else if (!/^[^@]+@\\w+(\\.\\w+)+\\w$/.test(this.registerEmail)) {\n          this.registerEmailErrorMessage = \"Anna kelvollinen sähköpostiosoite!\";\n          setTimeout(() => {\n            this.registerEmailErrorMessage = null;\n          }, 2000);\n        } else if (this.registerPassword !== this.registerPasswordRepeat) {\n          this.registerPwRepeatErrorMessage = \"Salasana on oltava sama!\";\n          setTimeout(() => {\n            this.registerPwRepeatErrorMessage = null;\n          }, 2000);\n        }\n        else {\n          console.log(\"Uus kasutaja\")\n          const userExisting = await userService.addUser(newUser);\n          if (userExisting.error === \"Käyttäjätunnus on jo olemassa!\") {\n            this.usernameExisting = \"Käyttäjätunnus on jo olemassa! Vaihda käyttäjätunnus\";\n            setTimeout(() => {\n              this.usernameExisting = null;\n            }, 2000);\n          } else if (userExisting.error === \"Sähköposti on jo olemassa!\") {\n            this.registerEmailErrorMessage = \"Antamasi sähköpostiosoite on jo olemassa!\";\n            setTimeout(() => {\n              this.registerEmailErrorMessage = null;\n            }, 2000);\n          }\n          else {\n            const loggedInUser = await loginService.login({username: this.registerUsername, password: this.registerPassword});\n            if (loggedInUser.error !== \"login error\") {\n              this.$emit('register:data', loggedInUser)\n            }\n          }\n\n        }\n      } else {\n        this.registerErrorMessage = \"Kaikki kentät on täytettävä!!\"\n        setTimeout(() => {\n          this.registerErrorMessage = null;\n        }, 2000);\n      }\n      //await userService.addUser(newUser);\n\n      //const loggedInUser = await loginService.login({username: this.registerUsername, password: this.registerPassword});\n\n      //this.$emit('register:data', newUser)\n    }\n  }\n}\n</script>\n\n<style scoped>\n#app {\n  font-family: Roboto, Helvetica, Arial, sans-serif;\n\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n.error {\n  color: white;\n  background: #f5839c;\n  font-size: 20px;\n  border: solid #f75959;\n  border-radius: 5px;\n  padding: 10px;\n  margin-bottom: 10px;\n}\n.errorImg {\n  width: 50px;\n  margin-left: 20px;\n}\n</style>","const axios = require('axios')\r\n//import axios from 'axios'\r\nconst baseUrl = \"/auth/google\"\r\n// http://localhost:3001s\r\n\r\nconst getAll = async () => {\r\n    const response = await axios.get(baseUrl)\r\n    return response.data\r\n}\r\n\r\n\r\n\r\nexport default { getAll }","import { render } from \"./RegisterForm.vue?vue&type=template&id=8d985e4e&scoped=true\"\nimport script from \"./RegisterForm.vue?vue&type=script&lang=js\"\nexport * from \"./RegisterForm.vue?vue&type=script&lang=js\"\n\nimport \"./RegisterForm.vue?vue&type=style&index=0&id=8d985e4e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-8d985e4e\"]])\n\nexport default __exports__"],"names":["ErrorMessage","message","_createVNode","require","_createElementVNode","style","class","_createElementBlock","_hoisted_1","_component_MDBContainer","_component_registerError","$data","registerErrorMessage","usernameExisting","registerEmailErrorMessage","_component_register_error","registerPwRepeatErrorMessage","onSubmit","_cache","_withModifiers","args","$options","userData","_component_MDBInput","type","size","label","white","id","$setup","registerFirstName","$event","wrapperClass","registerLastName","registerUsername","registerEmail","registerPassword","registerPasswordRepeat","_component_MDBCheckbox","registerSubscribeCheck","_component_MDBBtn","outline","block","_hoisted_2","_hoisted_3","color","floating","_component_MDBIcon","iconStyle","icon","onClick","handleGoogleAuth","name","components","registerError","MDBContainer","MDBInput","MDBCheckbox","MDBBtn","MDBIcon","data","setup","ref","computed","isValidEmail","test","this","methods","async","console","log","emailValidation","validateEmail","email","msg","newUser","firstName","lastName","username","password","length","setTimeout","userExisting","userService","addUser","error","loggedInUser","loginService","login","$emit","__exports__","render"],"sourceRoot":""}