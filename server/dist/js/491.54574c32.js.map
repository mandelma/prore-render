{"version":3,"file":"js/491.54574c32.js","mappings":"qHAAA,MAAMA,EAAQC,EAAQ,MAEhBC,EAAU,kBAEVC,EAAgBC,UAClB,MAAMC,QAAgBL,EAAMM,IAAIJ,GAChC,OAAOG,EAAQE,IAAI,EAGjBC,EAAeJ,MAAOK,EAAIC,KAC5B,MAAMC,QAAkBX,EAAMY,KAAM,GAAEV,KAAWO,IAAMC,GACvD,OAAOC,EAAUJ,IAAI,EAGzB,QAAiBJ,gBAAeK,e,uHCNrBC,GAAG,OAAOI,MAAA,8B,GAUVC,MAAM,yB,GAEJA,MAAM,S,GAEPC,EAAAA,EAAAA,GAAoD,UAA5CC,SAAA,GAASC,MAAM,IAAG,qBAAiB,G,GAC3CF,EAAAA,EAAAA,GAA4C,UAApCE,MAAM,aAAY,aAAS,G,GACnCF,EAAAA,EAAAA,GAA4C,UAApCE,MAAM,aAAY,aAAS,G,GACnCF,EAAAA,EAAAA,GAA0C,UAAlCE,MAAM,YAAW,YAAQ,G,GAHjCC,EACAC,EACAC,EACAC,G,GAwCRN,EAAAA,EAAAA,GAA4B,WAAnBN,GAAG,OAAK,S,uHAhEnBa,EAAAA,EAAAA,IAiEM,aAhEJC,EAAAA,EAAAA,IA6DeC,EAAA,CA5DXX,MAAA,uEAEkB,C,kBAGpB,IAOM,EAPNE,EAAAA,EAAAA,GAOM,MAPNU,EAOM,EANJF,EAAAA,EAAAA,IAKyBG,EAAA,CAJrBC,MAAM,kB,WACGC,EAAAC,Q,qCAAAD,EAAAC,QAAOC,GAChBrB,GAAG,eACHsB,KAAK,KACLC,aAAa,Q,0BAInBjB,EAAAA,EAAAA,GAsBM,MAtBNkB,EAsBM,EApBJlB,EAAAA,EAAAA,GAOM,MAPNmB,EAOM,WANJnB,EAAAA,EAAAA,GAKS,UALDN,GAAG,oB,qCAA6BmB,EAAAO,KAAIL,I,cAAJF,EAAAO,WAO1CpB,EAAAA,EAAAA,GAIK,MAHAD,OAAKsB,EAAAA,EAAAA,IAAA,CAAAC,eAAmBT,EAAAU,oB,QAEzBV,EAAAW,uBAAyB,IAAMX,EAAAY,QAAQ,yBAC3C,GAEUZ,EAAAO,OAAI,WADdb,EAAAA,EAAAA,IAKK,M,MAHAR,OAAKsB,EAAAA,EAAAA,IAAA,CAAAK,UAAcb,EAAAU,mBACvB,yBAED,uBAMFf,EAAAA,EAAAA,IAOSmB,EAAA,CAPDC,MAAM,OACNZ,KAAK,KACLa,MAAA,GACCC,QAAOC,EAAAC,QACRlC,MAAA,mD,mBACP,IAED,UAFC,6B,qBAKDU,EAAAA,EAAAA,IAOSmB,EAAA,CAPDC,MAAM,SACNZ,KAAK,KACLa,MAAA,GACCC,QAAKG,EAAA,KAAAA,EAAA,GAAAlB,GAAEmB,EAAAC,QAAQC,KAAK,MACrBtC,MAAA,mD,mBACP,IAED,UAFC,e,eAMHuC,G,6CCrDJ,IDqEA,GACEC,KAAM,kBACNC,WAAY,CACVC,aAAY,KACZC,SAAQ,KACRC,OAAMA,EAAAA,IAERlD,OACE,MAAO,CACL4B,KAAM,GACNuB,OAAQ,KACRC,WAAY,KACZ9B,QAAS,KACT+B,MAAO,KACPC,MAAO,KACPtB,uBAAwB,EACxBD,iBAAiB,EACjBE,OAAQ,GAGZ,EACAsB,UACE,MAAMC,EAAiBC,OAAOC,aAAaC,QAAQ,iBACnD,GAAIH,EAAgB,CAClB,MAAMI,EAAOC,KAAKC,MAAMN,GACxBO,KAAKZ,OAASS,EAAK1D,EAErB,CAEA8D,QAAQC,IAAI,wBAA0BF,KAAKZ,QAM1B,IAAIe,OAAOC,KAAKC,OAAO,CACtCC,KAAM,2DAGRN,KAAKO,sBAEL,MAAMC,EAAmBC,SAASC,eAAe,qBAEjDF,EAAiBG,iBAAiB,UAAWC,IAE3CZ,KAAKa,2BAA2BD,EAAME,OAAOnE,MAAM,IAGrD,MAAMoE,EAAQN,SAASC,eAAe,gBAEhCM,EAAS,CAAEC,IAAK,UAAWC,KAAM,YACjCC,EAAgB,CACpBC,MAAOJ,EAAOC,IAAM,GACpBI,MAAOL,EAAOC,IAAM,GACpBK,KAAMN,EAAOE,IAAM,GACnBK,KAAMP,EAAOE,IAAM,IAEfM,EAAU,CACdC,OAAQN,EACRO,sBAAuB,CAAEC,QAAS,MAClCC,OAAQ,CAAC,qBAAsB,WAAY,OAAQ,OAAQ,qBAC3DC,cAAc,GAGVC,EAAe,IAAI3B,OAAOC,KAAK2B,OAAOC,aAAajB,EAAOS,GAEhEM,EAAaG,YAAY,iBAAiB,KACxC,IAAIC,EAAQJ,EAAaK,WACzBnC,KAAKV,MAAQ4C,EAAME,SAASC,SAASpB,MACrCjB,KAAKsC,MAAQJ,EAAME,SAASC,SAASnB,MAErClB,KAAKuC,eAAeL,EAAME,SAASC,SAASpB,MAAOiB,EAAME,SAASC,SAASnB,OAC3ElB,KAAKzC,QAAU2E,EAAMM,kBACrBvC,QAAQC,IAAIgC,EAAM,GActB,EACAO,QAAS,CACPhE,UACEuB,KAAKpB,QAAQC,KAAK,iBAMpB,EACA0B,sBAQMmC,UAAUC,aACZD,UAAUC,YAAYC,oBAAmBC,IACvC,MAAM,SAAEC,EAAQ,UAAEC,GAAcF,EAASG,OAEzChD,KAAKV,MAAQwD,EACb9C,KAAKsC,MAAQS,EAEb/C,KAAKiD,yBAA0BH,EAAUC,EAAU,GAIzD,EAEAG,UAAU7E,GACR,MAAO,CACL8E,KAAM,2EACNC,UAAW/E,EACXgF,YAAa,EACbC,YAAa,OACbC,aAAc,EACdC,MAAO,EAEX,EAEAP,yBAA0BH,EAAUC,GAClC,IAAIU,EAAM,IAAItD,OAAOC,KAAKsD,IAAIjD,SAASC,eAAe,OAAQ,CAC5DiD,KAAM,GACN3C,OAAQ,IAAIb,OAAOC,KAAKwD,OAAOd,EAAUC,GACzCc,UAAW1D,OAAOC,KAAK0D,UAAUC,QACjCC,SAAU,KAUZ,IAAI7D,OAAOC,KAAKC,OAAO,CACrBwC,SAAU,IAAI1C,OAAOC,KAAKwD,OAAOd,EAAUC,GAC3CiB,SAAU,GACVP,IAAKA,EACLnD,KAAMN,KAAKkD,UAAU,UACrB7F,MAAO,CAAEgB,MAAO,UAAW4F,WAAY,OAAQC,SAAU,OAAQC,KAAM,eAI3E,EAEA5B,eAAgBtB,EAAKmD,GACnB1I,EAAAA,EAAAA,IAAU,4DAA8DuF,EACpE,IAAMmD,EADA,gDAGLC,MAAKC,IACJ,GAAIA,EAASrI,KAAKsI,cAChBvE,KAAKwE,MAAQF,EAASrI,KAAKsI,cAE3BtE,QAAQC,IAAIoE,EAASrI,KAAKsI,mBACrB,CACL,MAAMd,EAAM,IAAItD,OAAOC,KAAKsD,IAAIjD,SAASC,eAAe,OAAQ,CAC9DiD,KAAM,GACN3C,OAAQ,IAAIb,OAAOC,KAAKwD,OAAO3C,EAAKmD,GACpCP,UAAW1D,OAAOC,KAAK0D,UAAUC,UAGnC,IAAI5D,OAAOC,KAAKC,OAAO,CACrBwC,SAAU,IAAI1C,OAAOC,KAAKwD,OAAO3C,EAAKmD,GACtCJ,SAAU,GACVP,IAAKA,EACLnD,KAAMN,KAAKkD,UAAU,UACrB7F,MAAO,CAAEgB,MAAO,UAAW4F,WAAY,OAAQC,SAAU,OAAQC,KAAM,gBAIzElE,QAAQC,IAAIoE,EAASrI,KAAKF,QAAQA,QAAQ,GAAGyG,kBAC/C,KAGDiC,OAAMD,IACLxE,KAAKwE,MAAQA,EAAME,QACnBzE,QAAQC,IAAIsE,EAAME,QAAQ,GAElC,EAGAC,mBAAoBC,EAAYC,GAC9B,IAAIpB,EAAM,IAAItD,OAAOC,KAAKsD,IAAIjD,SAASC,eAAe,OAAQ,CAC5DiD,KAAM,EACN3C,OAAQ,IAAIb,OAAOC,KAAKwD,OAAO5D,KAAKV,MAAOU,KAAKsC,OAChDuB,UAAW1D,OAAOC,KAAK0D,UAAUC,UAEnC9D,QAAQC,IAAI,gBAAkB0E,EAAWE,QAEzC,IAAI3E,OAAOC,KAAKC,OAAO,CACrBwC,SAAU,IAAI1C,OAAOC,KAAKwD,OAAO5D,KAAKV,MAAOU,KAAKsC,OAClD0B,SAAU,GACVP,IAAKA,EACLnD,KAAMN,KAAKkD,UAAU,UACrB7F,MAAO,CAAEgB,MAAO,UAAW4F,WAAY,OAAQC,SAAU,OAAQC,KAAM,gBAGzE,IAAIY,EAAQ,EACZ,GAAIH,EAAWE,OAAS,EAAG,CACzB,IAAK,IAAIE,EAAM,EAAGA,EAAMJ,EAAWE,OAAQE,IAKzCJ,EAAWI,GAAKC,aAAaC,SAAQrH,IAC/BA,IAASgH,IAEX7E,KAAKhC,iBAAkB,EACvB+G,IACA,IAAI5E,OAAOC,KAAKC,OAAO,CACrBwC,SAAU,IAAI1C,OAAOC,KAAKwD,OAAOgB,EAAWI,GAAKlC,SAAU8B,EAAWI,GAAKjC,WAC3EU,IAAKA,IAET,IAKFzD,KAAKhC,gBADH+G,EAAQ,EAKZ/E,KAAK/B,uBAAyB8G,EAC9B/E,KAAKmF,oBAGP,CAEF,EAEAC,cAAexE,GACbX,QAAQC,IAAI,eAAiBU,EAAME,OAAOnE,OAGtCiE,EAAME,OAAOnE,OAEfqD,KAAKa,2BAA2BD,EAAME,OAAOnE,OAG/CqD,KAAKnC,KAAO+C,EAAME,OAAOnE,MAEzBiE,EAAME,OAAOnE,MAAQ,EACvB,EAGAb,iCAAkC+I,GAEhC,MAAMD,QAAmBS,EAAAA,EAAAA,gBACrBT,GACF5E,KAAK2E,mBAAmBC,EAAYC,EAIxC,EACAM,qBACElF,QAAQC,IAAI,kBAAoBF,KAAK/B,wBACjC+B,KAAK/B,uBAAyB,EAChC+B,KAAK9B,OAAS,YAEd8B,KAAK9B,OAAS,SAElB,I,QEzVJ,MAAMoH,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://prore-mongo/./src/service/recipients.js","webpack://prore-mongo/./src/pages/ProviderPublic.vue","webpack://prore-mongo/./src/components/location.js","webpack://prore-mongo/./src/pages/ProviderPublic.vue?dc7a"],"sourcesContent":["const axios = require('axios');\r\n\r\nconst baseUrl = '/api/recipients';\r\n\r\nconst getRecipients = async () => {\r\n    const results = await axios.get(baseUrl);\r\n    return results.data;\r\n}\r\n\r\nconst addRecipient = async (id, newRecipient) => {\r\n    const recipient = await axios.post(`${baseUrl}/${id}`, newRecipient);\r\n    return recipient.data;\r\n}\r\n\r\nexport default { getRecipients, addRecipient }","<template>\r\n  <div>\r\n    <MDBContainer\r\n        style=\"position: relative; z-index: 1;\r\n        opacity: 0.8;\r\n        margin-top: 60px;\"\r\n    >\r\n\r\n      <div id=\"test\" style=\"background-color:white;\">\r\n        <MDBInput\r\n            label=\"Anna osoitteesi\"\r\n            v-model=\"address\"\r\n            id=\"autocomplite\"\r\n            size=\"lg\"\r\n            wrapperClass=\"mb-4\"/>\r\n      </div>\r\n\r\n\r\n      <div class=\"ui large segment form\">\r\n\r\n        <div class=\"field\">\r\n          <select id=\"listOfProfessions\" v-model=\"prof\" >\r\n            <option disabled value=\"\">Valitse ammattisi</option>\r\n            <option value=\"Putkimies\">Putkimies</option>\r\n            <option value=\"Sähkömies\">Sähkömies</option>\r\n            <option value=\"Siivooja\">Siivooja</option>\r\n          </select>\r\n        </div>\r\n        <h3\r\n            :class=\"{activeClients: !isActiveClients}\"\r\n        >\r\n          {{countOfSelectedClients + \" \" + client}}  tarvitsee palveluasi\r\n        </h3>\r\n        <h3\r\n            v-if=\"prof\"\r\n            :class=\"{noClients: isActiveClients}\"\r\n        >\r\n          Ei asiakkaita vielä!\r\n        </h3>\r\n\r\n      </div>\r\n\r\n\r\n\r\n      <MDBBtn color=\"dark\"\r\n              size=\"lg\"\r\n              block\r\n              @click=\"provide\"\r\n              style=\"position: relative; z-index:1; opacity: 1.2;\"\r\n      >\r\n        Tarjoa omaa palvelua\r\n      </MDBBtn>\r\n\r\n\r\n      <MDBBtn color=\"danger\"\r\n              size=\"lg\"\r\n              block\r\n              @click=\"$router.push('/')\"\r\n              style=\"position: relative; z-index:1; opacity: 1.0;\"\r\n      >\r\n        Poistu\r\n      </MDBBtn>\r\n\r\n    </MDBContainer>\r\n\r\n    <section id=\"map\"></section>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\n/*global google*/\r\nimport axios from 'axios'\r\nimport recipientService from '../service/recipients'\r\nimport providerService from '../service/providers'\r\nimport {\r\n  MDBContainer,\r\n  MDBInput,\r\n  MDBBtn\r\n} from \"mdb-vue-ui-kit\";\r\nimport gMap from '../components/location'\r\nexport default {\r\n  name: \"provider-public\",\r\n  components: {\r\n    MDBContainer,\r\n    MDBInput,\r\n    MDBBtn\r\n  },\r\n  data () {\r\n    return {\r\n      prof: \"\",\r\n      userId: null,\r\n      providerId: null,\r\n      address: null,\r\n      myLat: null,\r\n      mylng: null,\r\n      countOfSelectedClients: 0,\r\n      isActiveClients: false,\r\n      client: \"\"\r\n\r\n    }\r\n  },\r\n  mounted () {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedAppUser')\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON)\r\n      this.userId = user.id\r\n      //console.log(\"User token: \" + this.loggedUser.token)\r\n    }\r\n\r\n    console.log(\"User id in providers \" + this.userId)\r\n\r\n\r\n\r\n    //this.setProviderId()\r\n\r\n    const myMarker = new google.maps.Marker({\r\n      icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\r\n    })\r\n\r\n    this.userCurrentLocation();\r\n\r\n    const selectProfession = document.getElementById(\"listOfProfessions\")\r\n\r\n    selectProfession.addEventListener(\"change\", (event) => {\r\n      //alert(\"Profession selected: \" + event.target.value)\r\n      this.showClientLocationOnTheMap(event.target.value)\r\n    })\r\n\r\n    const input = document.getElementById(\"autocomplite\");\r\n\r\n    const center = { lat: 50.064192, lng: -130.605469 };\r\n    const defaultBounds = {\r\n      north: center.lat + 0.1,\r\n      south: center.lat - 0.1,\r\n      east: center.lng + 0.1,\r\n      west: center.lng - 0.1,\r\n    };\r\n    const options = {\r\n      bounds: defaultBounds,\r\n      componentRestrictions: { country: \"fi\" },\r\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\", \"formatted_address\"],\r\n      strictBounds: false,\r\n      //types: [\"establishment\"],\r\n    };\r\n    const autocomplete = new google.maps.places.Autocomplete(input, options);\r\n\r\n    autocomplete.addListener(\"place_changed\", () => {\r\n      let place = autocomplete.getPlace()\r\n      this.myLat = place.geometry.location.lat();\r\n      this.myLng = place.geometry.location.lng();\r\n\r\n      this.getAddressFrom(place.geometry.location.lat(), place.geometry.location.lng())\r\n      this.address = place.formatted_address\r\n      console.log(place)\r\n    });\r\n\r\n\r\n\r\n\r\n    // let map = new google.maps.Map(document.getElementById(\"map\"), {\r\n    //   zoom: 13,\r\n    //   center: new google.maps.LatLng(this.myLat, this.myLng),\r\n    //   mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n    //   accuracy: 50,\r\n    //\r\n    // });\r\n\r\n  },\r\n  methods: {\r\n    provide (){\r\n      this.$router.push('/provider-form')\r\n      // if (this.userId === this.providerId) {\r\n      //   this.$router.push('/provider-form')\r\n      // } else {\r\n      //   this.$router.push('/provider-panel')\r\n      // }\r\n    },\r\n    userCurrentLocation () {\r\n      // const watchId = navigator.geolocation.watchPosition(position => {\r\n      //   const { latitude, longitude } = position.coords;\r\n      //   // Show a map centered at latitude / longitude.\r\n      //   console.log(\"Position lat: \" + position.coords.latitude)\r\n      //   console.log(\"Position lng: \" + position.coords.longitude)\r\n      //   this.showUserLocationOnTheMap(position.coords.latitude, position.coords.longitude)\r\n      // });\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n          const { latitude, longitude } = position.coords;\r\n          // Show a map centered at latitude / longitude.\r\n          this.myLat = latitude\r\n          this.myLng = longitude\r\n\r\n          this.showUserLocationOnTheMap (latitude, longitude)\r\n        });\r\n      }\r\n\r\n    },\r\n\r\n    pinSymbol(color) {\r\n      return {\r\n        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',\r\n        fillColor: color,\r\n        fillOpacity: 1,\r\n        strokeColor: '#000',\r\n        strokeWeight: 2,\r\n        scale: 1\r\n      };\r\n    },\r\n\r\n    showUserLocationOnTheMap (latitude, longitude) {\r\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\r\n        zoom: 13,\r\n        center: new google.maps.LatLng(latitude, longitude),\r\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n        accuracy: 50,\r\n\r\n      });\r\n      // new google.maps.Marker({\r\n      //   icon: 'http://maps.google.com/mapfiles/ms/icons/white-dot.png',\r\n      //   position: new google.maps.LatLng(latitude, longitude),\r\n      //   accuracy: 50,\r\n      //   map: map\r\n      // })\r\n\r\n      new google.maps.Marker({\r\n        position: new google.maps.LatLng(latitude, longitude),\r\n        accuracy: 50,\r\n        map: map,\r\n        icon: this.pinSymbol('yellow'),\r\n        label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\r\n      })\r\n\r\n\r\n    },\r\n\r\n    getAddressFrom (lat, long) {\r\n      axios.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat +\r\n          \",\" + long\r\n          + \"&key=\" + 'AIzaSyBDA2EBoGezJx51wQtxoW3Ecq5Ql8CCAiE')\r\n          .then(response => {\r\n            if (response.data.error_message) {\r\n              this.error = response.data.error_message;\r\n\r\n              console.log(response.data.error_message)\r\n            } else {\r\n              const map = new google.maps.Map(document.getElementById(\"map\"), {\r\n                zoom: 13,\r\n                center: new google.maps.LatLng(lat, long),\r\n                mapTypeId: google.maps.MapTypeId.ROADMAP\r\n              });\r\n\r\n              new google.maps.Marker({\r\n                position: new google.maps.LatLng(lat, long),\r\n                accuracy: 50,\r\n                map: map,\r\n                icon: this.pinSymbol('yellow'),\r\n                label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\r\n              })\r\n\r\n              //this.address = response.data.results[0].formatted_address\r\n              console.log(response.data.results.results[0].formatted_address)\r\n            }\r\n\r\n          })\r\n          .catch(error => {\r\n            this.error = error.message\r\n            console.log(error.message)\r\n          })\r\n    },\r\n\r\n\r\n    otherUserLocations (recipients, profession) {\r\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\r\n        zoom: 9,\r\n        center: new google.maps.LatLng(this.myLat, this.myLng),\r\n        mapTypeId: google.maps.MapTypeId.ROADMAP\r\n      });\r\n      console.log(\"Users count: \" + recipients.length)\r\n\r\n      new google.maps.Marker({\r\n        position: new google.maps.LatLng(this.myLat, this.myLng),\r\n        accuracy: 50,\r\n        map: map,\r\n        icon: this.pinSymbol('yellow'),\r\n        label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\r\n      })\r\n\r\n      let count = 0;\r\n      if (recipients.length > 0) {\r\n        for (let pos = 0; pos < recipients.length; pos++) {\r\n\r\n          //console.log(\"Client latitude: \" + recipient[pos].latitude)\r\n          //console.log(\"Client longitude: \" + recipient[pos].longitude)\r\n\r\n          recipients[pos].professional.forEach(prof => {\r\n            if (prof === profession) {\r\n              //this.countOfSelectedClient++;\r\n              this.isActiveClients = true;\r\n              count ++;\r\n              new google.maps.Marker({\r\n                position: new google.maps.LatLng(recipients[pos].latitude, recipients[pos].longitude),\r\n                map: map\r\n              })\r\n            }\r\n          })\r\n\r\n        }\r\n        if (count > 0) {\r\n          this.isActiveClients = true;\r\n        } else {\r\n          this.isActiveClients = false;\r\n        }\r\n        this.countOfSelectedClients = count;\r\n        this.identifyClientText();\r\n        //console.log(\"Count \" + this.countOfSelectedClients)\r\n\r\n      }\r\n\r\n    },\r\n\r\n    renderClients (event) {\r\n      console.log(\"Event value \" + event.target.value)\r\n      //this.countOfSelectedClients = 0;\r\n\r\n      if (event.target.value) {\r\n        // @click=\"renderClients($event)\"\r\n        this.showClientLocationOnTheMap(event.target.value)\r\n\r\n      }\r\n      this.prof = event.target.value\r\n\r\n      event.target.value = \"\"\r\n    },\r\n\r\n\r\n    async showClientLocationOnTheMap (profession) {\r\n\r\n      const recipients = await recipientService.getRecipients()\r\n      if (recipients) {\r\n        this.otherUserLocations(recipients, profession);\r\n      }\r\n      // visibility: hidden;\r\n\r\n    },\r\n    identifyClientText () {\r\n      console.log(\"Klientide arv: \" + this.countOfSelectedClients)\r\n      if (this.countOfSelectedClients > 1) {\r\n        this.client = \"asiakasta\"\r\n      } else {\r\n        this.client = \"asiakas\"\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.ui.button,\r\n.dot.circle {\r\n  background-color: #ff5a5f;\r\n  color: white;\r\n}\r\n\r\n.pac-icon {\r\n  display: none;\r\n}\r\n.pac-item {\r\n  padding: 10px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n}\r\n.pac-item:hover {\r\n  background-color: #ececec;\r\n}\r\n.pac-item-query {\r\n  font-size: 16px;\r\n}#map {\r\n   position: absolute;\r\n   top: 50px;\r\n   right: 0;\r\n   bottom: 0;\r\n   left: 0;\r\n }\r\n\r\n@media only screen and (max-width: 1000px) {\r\n  #test {\r\n    display: none !important;\r\n\r\n  }\r\n}\r\n\r\n.activeClients {\r\n  display: none !important;\r\n}\r\n.noClients {\r\n  display: none !important;\r\n}\r\n\r\n\r\n</style>","/*global google*/\r\n\r\nimport axios from \"axios\";\r\n//import key from \"../../server/config/keys\";\r\n\r\nlet myLat;\r\nlet myLng;\r\n\r\nlet id;\r\n\r\nlet clientCount = 0;\r\n\r\nexport default {\r\n    clientCount,\r\n\r\n    mapData (mId) {\r\n        id = mId\r\n    },\r\n\r\n    getMapId () {\r\n       console.log(\"id is \" + id)\r\n    },\r\n\r\n\r\n\r\n\r\n    geolocationSuccess (pos) {\r\n        console.log(\"Geo latitude- \" + pos.coords.latitude)\r\n        console.log(\"Geo longitude- \" + pos.coords.longitude)\r\n\r\n        myLat = pos.coords.latitude\r\n        myLng = pos.coords.longitude\r\n\r\n        let map = new google.maps.Map(document.getElementById(id), {\r\n            zoom: 13,\r\n            center: new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude),\r\n            mapTypeId: google.maps.MapTypeId.ROADMAP\r\n\r\n        });\r\n        new google.maps.Marker({\r\n            position: new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude),\r\n            map: map\r\n        })\r\n\r\n    },\r\n    geolocationError (err) {\r\n        console.log(\"Error here: \" + err.message)\r\n    },\r\n\r\n    async userCurrentPosition () {\r\n        if (navigator.geolocation) {\r\n            await navigator.geolocation.getCurrentPosition(\r\n                this.geolocationSuccess,\r\n                this.geolocationError, {\r\n                    timeout: 10,\r\n                    enableHighAccuracy: true,\r\n                    maximumAge: Infinity,\r\n                    accuracy: 10\r\n                }\r\n\r\n            );\r\n        } else {\r\n            console.log(\"Not working\")\r\n        }\r\n\r\n    },\r\n\r\n\r\n    getAddressFrom (lat, long) {\r\n        axios.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat +\r\n            \",\" + long\r\n            + \"&key=\" + 'AIzaSyBDA2EBoGezJx51wQtxoW3Ecq5Ql8CCAiE')\r\n            .then(response => {\r\n                if (response.data.error_message) {\r\n                    this.error = response.data.error_message;\r\n\r\n                    console.log(response.data.error_message)\r\n                } else {\r\n                    new google.maps.Map(document.getElementById(id), {\r\n                        zoom: 13,\r\n                        center: new google.maps.LatLng(lat, long),\r\n                        mapTypeId: google.maps.MapTypeId.ROADMAP\r\n\r\n                    });\r\n                    // new google.maps.Marker({\r\n                    //     position: new google.maps.LatLng(lat, long),\r\n                    //     map: map\r\n                    // })\r\n                    //this.address = response.data.results[0].formatted_address\r\n                    console.log(response.data.results.results[0].formatted_address)\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                this.error = error.message\r\n                console.log(error.message)\r\n            })\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    showUserLocationOnTheMap (latitude, longitude, mapId) {\r\n        let map = new google.maps.Map(document.getElementById(mapId), {\r\n            zoom: 13,\r\n            center: new google.maps.LatLng(latitude, longitude),\r\n            mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n            accuracy: 0,\r\n\r\n        });\r\n        new google.maps.Marker({\r\n            position: new google.maps.LatLng(latitude, longitude),\r\n            accuracy: 0,\r\n            map: map\r\n        })\r\n    },\r\n\r\n    userCurrentCoords () {\r\n        //let lat;\r\n        //let lng;\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            const { latitude, longitude } = position.coords;\r\n            // Show a map centered at latitude / longitude.\r\n            myLat = latitude;\r\n            myLng = longitude;\r\n            console.log(\"Lat now \" + latitude)\r\n            console.log(\"Lng now \" + longitude)\r\n        });\r\n\r\n        //return {latitude: lat, longitude: lng}\r\n    },\r\n\r\n    userCurrentLocation (mapId) {\r\n        // const watchId = navigator.geolocation.watchPosition(position => {\r\n        //   const { latitude, longitude } = position.coords;\r\n        //   // Show a map centered at latitude / longitude.\r\n        //   console.log(\"Position lat: \" + position.coords.latitude)\r\n        //   console.log(\"Position lng: \" + position.coords.longitude)\r\n        //   this.showUserLocationOnTheMap(position.coords.latitude, position.coords.longitude)\r\n        // });\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                const { latitude, longitude } = position.coords;\r\n                // Show a map centered at latitude / longitude.\r\n                myLat = latitude;\r\n                myLng = longitude;\r\n                console.log(\"Lat now \" + myLat)\r\n                console.log(\"Lng now \" + myLng)\r\n                this.showUserLocationOnTheMap (latitude, longitude, mapId)\r\n            });\r\n        } else {\r\n            console.log(\"Loading... or error?\")\r\n        }\r\n\r\n    },\r\n    otherUserLocations (recipients, profession, mapId) {\r\n        let map = new google.maps.Map(document.getElementById(mapId), {\r\n            zoom: 10,\r\n            center: new google.maps.LatLng(myLat, myLng),\r\n            mapTypeId: google.maps.MapTypeId.ROADMAP\r\n        });\r\n        console.log(\"Users count: \" + recipients.length)\r\n        clientCount = 0;\r\n        if (recipients.length > 0) {\r\n            for (let pos = 0; pos < recipients.length; pos++) {\r\n\r\n                //console.log(\"Client latitude: \" + recipient[pos].latitude)\r\n                //console.log(\"Client longitude: \" + recipient[pos].longitude)\r\n\r\n                recipients[pos].professional.forEach(prof => {\r\n                    if (prof === profession) {\r\n                        clientCount += 1\r\n                        new google.maps.Marker({\r\n                            position: new google.maps.LatLng(recipients[pos].latitude, recipients[pos].longitude),\r\n                            map: map\r\n                        })\r\n                    }\r\n                })\r\n\r\n            }\r\n            console.log(\"Client count: \" + clientCount)\r\n\r\n        }\r\n\r\n    },\r\n\r\n\r\n\r\n}\r\n\r\n","import { render } from \"./ProviderPublic.vue?vue&type=template&id=5f64fb21\"\nimport script from \"./ProviderPublic.vue?vue&type=script&lang=js\"\nexport * from \"./ProviderPublic.vue?vue&type=script&lang=js\"\n\nimport \"./ProviderPublic.vue?vue&type=style&index=0&id=5f64fb21&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\majaa\\\\WebstormProjects\\\\prore-mongo\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["axios","require","baseUrl","getRecipients","async","results","get","data","addRecipient","id","newRecipient","recipient","post","style","class","_createElementVNode","disabled","value","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_createElementBlock","_createVNode","_component_MDBContainer","_hoisted_1","_component_MDBInput","label","$data","address","$event","size","wrapperClass","_hoisted_2","_hoisted_3","prof","_normalizeClass","activeClients","isActiveClients","countOfSelectedClients","client","noClients","_component_MDBBtn","color","block","onClick","$options","provide","_cache","_ctx","$router","push","_hoisted_9","name","components","MDBContainer","MDBInput","MDBBtn","userId","providerId","myLat","mylng","mounted","loggedUserJSON","window","localStorage","getItem","user","JSON","parse","this","console","log","google","maps","Marker","icon","userCurrentLocation","selectProfession","document","getElementById","addEventListener","event","showClientLocationOnTheMap","target","input","center","lat","lng","defaultBounds","north","south","east","west","options","bounds","componentRestrictions","country","fields","strictBounds","autocomplete","places","Autocomplete","addListener","place","getPlace","geometry","location","myLng","getAddressFrom","formatted_address","methods","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","showUserLocationOnTheMap","pinSymbol","path","fillColor","fillOpacity","strokeColor","strokeWeight","scale","map","Map","zoom","LatLng","mapTypeId","MapTypeId","ROADMAP","accuracy","fontWeight","fontSize","text","long","then","response","error_message","error","catch","message","otherUserLocations","recipients","profession","length","count","pos","professional","forEach","identifyClientText","renderClients","recipientService","__exports__","render"],"sourceRoot":""}