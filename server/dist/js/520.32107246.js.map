{"version":3,"file":"js/520.32107246.js","mappings":"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","sources":["webpack://prore-mongo/./src/pages/UserLocation.vue","webpack://prore-mongo/./src/pages/UserLocation.vue?3192"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>User location page</h1>\r\n    <section class=\"ui two column centered grid\" style=\"position: relative; z-index:1;\">\r\n      <div class=\"column\">\r\n        <form class=\"ui segment large form\">\r\n          <div class=\"ui message red\" v-show=\"error\">{{error}}</div>\r\n          <div class=\"ui segment\">\r\n            <div class=\"field\">\r\n              <div class=\"ui right icon input large\" :class=\"{loading:spinner}\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter your address:\"\r\n                    v-model=\"address\"\r\n                    id=\"autocomplete\"\r\n                />\r\n                <i class=\"dot circle link icon\" @click=\"locatorButtonPressed\"></i>\r\n              </div>\r\n            </div>\r\n            <button class=\"ui button\" @click=\"testPlace\">Go</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n    </section>\r\n    <section id=\"map\"></section>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\n/*global google*/\r\nimport axios from 'axios'\r\n//import key from '@/config/keys'\r\nconst key = require('../../server/config/keys')\r\nexport default {\r\n  name: \"user-location\",\r\n  data () {\r\n    return {\r\n      address: \"\",\r\n      error: \"\",\r\n      spinner: false,\r\n      lat: \"\",\r\n      lng: \"\"\r\n    }\r\n  },\r\n  mounted () {\r\n    // &callback=Function.prototype\r\n    //document.getElementById(\"autocomplete\")\r\n\r\n    const center = { lat: 50.064192, lng: -130.605469 };\r\n// Create a bounding box with sides ~10km away from the center point\r\n    const defaultBounds = {\r\n      north: center.lat + 0.1,\r\n      south: center.lat - 0.1,\r\n      east: center.lng + 0.1,\r\n      west: center.lng - 0.1,\r\n    };\r\n    const input = document.getElementById(\"autocomplete\");\r\n    const options = {\r\n      bounds: defaultBounds,\r\n      componentRestrictions: { country: \"fi\" },\r\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\"],\r\n      strictBounds: false,\r\n      //types: [\"establishment\"],\r\n    };\r\n    const autocomplete = new google.maps.places.Autocomplete(input, options);\r\n\r\n    autocomplete.addListener(\"place_changed\", () => {\r\n      let place = autocomplete.getPlace()\r\n      this.lat = place.geometry.location.lat()\r\n      this.lng = place.geometry.location.lng()\r\n\r\n      console.log(place)\r\n      this.showUserLocationOnTheMap(place.geometry.location.lat(), place.geometry.location.lng())\r\n    })\r\n\r\n\r\n    // let autocomplete =  new google.maps.places.Autocomplete (\r\n    //   document.getElementById(\"autocomplete\"),\r\n    //   {\r\n    //     bounds: new google.maps.LatLngBounds(\r\n    //         new google.maps.LatLng(61.92411, 25.748151)\r\n    //     )})\r\n    // autocomplete.addListener(\"place_changed\", () => {\r\n    //   let place = autocomplete.getPlace();\r\n    //   console.log(place)\r\n    //   this.showUserLocationOnTheMap(place.geometry.location.lat(), place.geometry.location.lng())\r\n    // })\r\n  },\r\n  methods: {\r\n    test () {\r\n      console.log(\"Key is: \" + key.googleMap)\r\n    },\r\n    locatorButtonPressed () {\r\n      this.spinner = true\r\n      console.log(\"Google maps test\")\r\n      if(navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n            position => {\r\n          this.getAddressFrom(position.coords.latitude, position.coords.longitude)\r\n          console.log(\"pos latitude: \" + position.coords.latitude)\r\n          console.log(\"Pos longitude: \" + position.coords.longitude)\r\n              this.showUserLocationOnTheMap (\r\n                  position.coords.latitude,\r\n                  position.coords.longitude\r\n              );\r\n        },\r\n\r\n\r\n            error => {\r\n              this.error = \"Locator is unable to find your address. Please type your address!\"\r\n              console.log(\"Error\" + error)\r\n              this.spinner = false;\r\n          //console.log(\"Error: \" + error.message)\r\n            }\r\n        )\r\n      } else {\r\n        //this.error = error.message\r\n        console.log(\"Your Browser does not support geolocation API\")\r\n      }\r\n    },\r\n    getAddressFrom (lat, long) {\r\n      axios.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat +\r\n          \",\" + long\r\n          + \"&key=\" + key.googleMap)\r\n          .then(response => {\r\n            if (response.data.error_message) {\r\n              this.error = response.data.error_message;\r\n              this.spinner = false;\r\n              console.log(response.data.error_message)\r\n            } else {\r\n              this.address = response.data.results[0].formatted_address\r\n              console.log(response.data.results.results[0].formatted_address)\r\n            }\r\n\r\n      })\r\n      .catch(error => {\r\n        this.error = error.message\r\n        this.spinner = false;\r\n        console.log(error.message)\r\n      })\r\n    },\r\n    showUserLocationOnTheMap (latitude, longitude) {\r\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\r\n        zoom: 15,\r\n        center: new google.maps.LatLng(latitude, longitude),\r\n        mapTypeId: google.maps.MapTypeId.ROADMAP\r\n      });\r\n      new google.maps.Marker({\r\n        position: new google.maps.LatLng(latitude, longitude),\r\n        map: map\r\n      })\r\n    },\r\n    testPlace () {\r\n      console.log(\"Lat: \" + this.lat)\r\n      console.log(\"Lng: \" + this.lng)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.ui.button,\r\n.dot.circle {\r\n  background-color: #ff5a5f;\r\n  color: white;\r\n}\r\n\r\n.pac-icon {\r\n  display: none;\r\n}\r\n.pac-item {\r\n  padding: 10px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n}\r\n.pac-item:hover {\r\n  background-color: #ececec;\r\n}\r\n.pac-item-query {\r\n  font-size: 16px;\r\n}#map {\r\n   position: absolute;\r\n   top: 50px;\r\n   right: 0;\r\n   bottom: 0;\r\n   left: 0;\r\n }\r\n\r\n\r\n</style>","import { render } from \"./UserLocation.vue?vue&type=template&id=690221ec\"\nimport script from \"./UserLocation.vue?vue&type=script&lang=js\"\nexport * from \"./UserLocation.vue?vue&type=script&lang=js\"\n\nimport \"./UserLocation.vue?vue&type=style&index=0&id=690221ec&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\majaa\\\\WebstormProjects\\\\prore-mongo\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createElementVNode","class","style","id","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","$data","error","_hoisted_5","_hoisted_6","_normalizeClass","loading","spinner","type","placeholder","address","$event","onClick","_cache","args","$options","locatorButtonPressed","testPlace","_hoisted_7","key","require","name","data","lat","lng","mounted","center","defaultBounds","north","south","east","west","input","document","getElementById","options","bounds","componentRestrictions","country","fields","strictBounds","autocomplete","google","maps","places","Autocomplete","addListener","place","getPlace","this","geometry","location","console","log","showUserLocationOnTheMap","methods","test","googleMap","navigator","geolocation","getCurrentPosition","position","getAddressFrom","coords","latitude","longitude","long","axios","then","response","error_message","results","formatted_address","catch","message","map","Map","zoom","LatLng","mapTypeId","MapTypeId","ROADMAP","Marker","__exports__","render"],"sourceRoot":""}