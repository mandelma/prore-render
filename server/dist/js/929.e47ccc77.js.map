{"version":3,"file":"js/929.e47ccc77.js","mappings":"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","sources":["webpack://prore-mongo/./src/components/controllers/distance.js","webpack://prore-mongo/./src/pages/RecipientPublic.vue","webpack://prore-mongo/./src/pages/RecipientPublic.vue?a5fc"],"sourcesContent":["/*global google*/\nlet res = \"\";\nconst distance = () => {\n    //let text = \"\";\n    //let value = 0;\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\n    var service = new google.maps.DistanceMatrixService();\n    service.getDistanceMatrix(\n        {\n            origins: [origin],\n            destinations: [destination],\n            travelMode: 'DRIVING',\n            unitSystem: google.maps.UnitSystem.METRIC,\n            durationInTraffic: true,\n            avoidHighways: false,\n            avoidTolls: false\n        }, response_data);\n    //return response_data;\n}\n\nconst response_data = (responseDis, status) => {\n    //let result = \"\";\n    if (status !== google.maps.DistanceMatrixStatus.OK || status !== \"OK\"){\n        console.log('Error:', status);\n        // OR\n        alert(status);\n    }else{\n        //alert(responseDis.rows[0].elements[0].distance.text);\n        console.log(\"Distance \" + responseDis.rows[0].elements[0].distance.text)\n\n        res = responseDis.rows[0].elements[0].distance.text;\n        return \"aaaaaaaaaaaaa\"\n        //result = responseDis.rows[0].elements[0].distance.text;\n    }\n    //return  \"Hallo\"        //result.toString();\n}\n\nconst test = () => {\n    console.log(\"Is it working??\" + res)\n\n    return  <div>Hiiii</div>;\n}\n\nconst theDist = () => {\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\n    return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n}\n\n// function calcDistance() {\n//     // var origin = new google.maps.LatLng(60.233093,24.7531362);\n//     // var destination = new google.maps.LatLng(60.2767265,24.8575089);\n//     // return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n//\n//     var directionsService = new google.maps.DirectionsService();\n//\n//     var request = {\n//         origin      : 'Melbourne VIC', // a city, full address, landmark etc\n//         destination : 'Sydney NSW',\n//         travelMode  : google.maps.DirectionsTravelMode.DRIVING\n//     };\n//\n//     directionsService.route(request, function(response, status) {\n//         if ( status === google.maps.DirectionsStatus.OK ) {\n//             alert( response.routes[0].legs[0].distance.value ) ; // the distance in metres\n//         }\n//         else {\n//             // oops, there's no route between these two locations\n//             // every time this happens, a kitten dies\n//             // so please, ensure your address is formatted properly\n//         }\n//     });\n// }\n\nexport default { distance, test, theDist }","<template>\n  <div>\n\n\n\n    <MDBContainer\n\n        style=\"position: relative; z-index: 1;\n        /*width: 80%;*/\n        margin-top: 80px;\n        opacity: 0.8;\n        \"\n    >\n\n\n\n\n\n      <div :class=\"{hideMainPanel: !isMainPanel}\" style=\"background-color: #2b2a2a; padding: 10px;\">\n        <div style=\"display: flex; justify-content: right;\">\n          <MDBIcon size=\"lg\" style=\"padding: 10px;\" @click=\"closeMainPanel\">\n            <i class=\"fas fa-compress-arrows-alt\"></i>\n          </MDBIcon>\n          <div>\n            <MDBBtnClose\n                white\n                style=\" padding: 10px;\"\n                size=\"lg\"\n                @click=\"$router.go(-1)\"\n            />\n          </div>\n\n\n\n        </div>\n\n        <MDBBtn color=\"info\"\n                v-if=\"isMainPanel\"\n                size=\"lg\"\n                block\n                @click=\"receive\"\n                style=\"position: relative; z-index:1; opacity: 1.2; margin-bottom: 10px;\"\n        >\n          Tee uusi tilaus\n        </MDBBtn>\n\n        <div id=\"panel\">\n          <MDBInput\n              white\n              label=\"Anna toinen osoitteesi kun ei täsmää\"\n              v-model=\"address\"\n              id=\"autocomplite\"\n              size=\"lg\"\n              wrapperClass=\"mb-4\"\n          />\n        </div>\n<!--        <span id=\"listOfProfessionals\">Options</span>-->\n<!--        <Dropdown aria-labelledby=\"listOfProfessionals\" />-->\n\n\n        <div style=\" margin-bottom: 20px;\" >\n          <Dropdown  @change=\"changedProfession\"   v-model=\"prof\" :options=\"prodata\"   filter optionLabel=\"label\" optionGroupLabel=\"label\" optionGroupChildren=\"items\" placeholder=\"Valitse ammattilainen\" class=\"w-full md:w-100rem\">\n\n            <template value=\"slotProps\" >\n              <div v-if=\"slotProps.value\" >\n                <!--              <img :alt=\"slotProps.value.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`mr-2 flag flag-${slotProps.value.code.toLowerCase()}`\" style=\"width: 18px\" />-->\n                <div >{{ slotProps.value.label }}</div>\n              </div>\n              <span v-else>\n              {{ slotProps.placeholder }}\n            </span>\n            </template>\n            <template  #optiongroup=\"slotProps\"  >\n              <div style=\"\" class=\"flex align-items-center\">\n                <!--              <img :alt=\"slotProps.option.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`mr-2 flag flag-${slotProps.option.code.toLowerCase()}`\" style=\"width: 18px\" />-->\n                <div >{{ slotProps.option.label }}</div>\n              </div>\n            </template>\n          </Dropdown>\n        </div>\n\n\n\n<!--        <select style=\"padding: 12px; width: 100%;\"  id=\"listOfProfessionals\" v-model=\"prof\">-->\n<!--          <option value=\"\">Valitse ammattilainen</option>-->\n<!--          <template v-for=\"option in prodata\">-->\n\n<!--            &lt;!&ndash; if the `group` property is truthy &ndash;&gt;-->\n<!--            <optgroup v-if=\"option.group\" :label=\"option.group\" :key=\"option.group\">-->\n<!--              <option v-for=\"opt in option.options\" :value=\"opt.label\" :key=\"opt.label\">-->\n<!--                {{ opt.label }}-->\n<!--              </option>-->\n<!--            </optgroup>-->\n<!--            &lt;!&ndash; otherwise &ndash;&gt;-->\n<!--            <option v-else :value=\"option\" :key=\"option.value\">-->\n<!--              {{ option.label }}-->\n<!--            </option>-->\n<!--          </template>-->\n\n<!--        </select>-->\n\n        <div  :class=\"{hideDistSelectPanel: !isDistSelection}\" style=\"padding-top: 10px;\">\n          <select style=\"padding: 12px; width: 100%; background-color: dimgrey; color: white;\" id=\"distance\" v-model=\"distBtw\" @click=\"filterByDistance\">\n            <option disabled value=\"1\">1 kilometriä ympärilläsi</option>\n            <option value=\"2\">2 km ympärilläsi</option>\n            <option value=\"3\">3 km ympärilläsi</option>\n            <option value=\"4\">4 km ympärilläsi</option>\n            <option value=\"5\">5 km ympärilläsi</option>\n            <option value=\"6\">6 km ympärilläsi</option>\n            <option value=\"7\">7 km ympärilläsi</option>\n            <option value=\"8\">8 km ympärilläsi</option>\n            <option value=\"9\">9 km ympärilläsi</option>\n            <option value=\"10\">10 km ympärilläsi</option>\n            <option value=\"20\">20 km ympärilläsi</option>\n            <option value=\"30\">30 km ympärilläsi</option>\n            <option value=\"40\">40 km ympärilläsi</option>\n            <option value=\"50\">50 km ympärilläsi</option>\n            <option value=\"60\">60 km ympärilläsi</option>\n            <option value=\"70\">70 km ympärilläsi</option>\n            <option value=\"80\">80 km ympärilläsi</option>\n            <option value=\"90\">90 km ympärilläsi</option>\n            <option value=\"100\">100 km ympärilläsi</option>\n            <option value=\"200\">200 km ympärilläsi</option>\n            <option value=\"300\">300 km ympärilläsi</option>\n          </select>\n\n        </div>\n\n\n<!--        <h3-->\n<!--            :class=\"{activeClients: !isActiveProffs}\"-->\n<!--        >-->\n<!--          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua-->\n<!--        </h3>-->\n        <h3\n            v-if=\"prof\"\n            :class=\"{noClients: isActiveProffs}\"\n        >\n          Ei ammattilaisia vielä!\n        </h3>\n\n\n      </div>\n\n\n\n      <div v-if=\"isMapChat\" style=\"background-color: white; margin: auto; padding: 10px; width: 350px;  border: solid darkgrey\">\n        <p style=\"float: right; color: limegreen;\" @click=\"closeMapChat\">Valmis</p>\n        <chat-panel\n\n            :chatusers = chatusers\n            :messages =messages\n            :selecteduser = selecteduser\n            @select:user = selectUser\n            @noSelected = noSelectUser\n            @on:message = onMessage\n        />\n      </div>\n\n      <div class=\"map-info-table\" v-else-if=\"isTargetSelected && !isMapChat\" style=\"background-color: white; padding: 10px; width: 90%; margin: auto;  border: solid darkgrey\">\n        <div style=\"display: flex; justify-content: right;\">\n          <p style=\" font-size: 15px; padding: 10px; color: orangered;\" @click=\"outFromMarkerPanel\">Valmis</p>\n        </div>\n\n        <table style=\"font-size: 14px; width: 100%; text-align: left;\">\n          <tbody>\n          <tr>\n            <td>\n              Yritys:\n            </td>\n            <td>\n              {{ this.target.yritys }}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Y - tunnus:\n            </td>\n            <td>\n              {{this.target.ytunnus}}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Työalue:\n            </td>\n            <td>\n              {{this.target.range ? this.target.range : \"Palvelun tarjous vain paikalla!\"}}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Tuntihinta:\n            </td>\n            <td>\n              {{ this.target.priceByHour }} Euroa\n            </td>\n          </tr>\n          <tr>\n            <td>\n              palaute:\n            </td>\n            <td>\n              <MDBIcon  style=\"padding: 10px; cursor: pointer;\" class=\"far fa-smile\" size=\"lg\"\n                        @click=\"negative\"></MDBIcon>\n\n\n              <MDBBadge color=\"success\" class=\"translate-middle p-1\"\n                        pill\n                        notification>\n                <p>{{this.target.rating.positive}}</p>\n              </MDBBadge>\n\n\n              <MDBIcon  style=\"padding: 10px; cursor: pointer;\" class=\"far fa-frown\" size=\"lg\"\n                        @click=\"negative\"></MDBIcon>\n\n\n\n              <MDBBadge color=\"danger\" class=\"translate-middle p-1\"\n                        pill\n                        notification>\n                <p>{{this.target.rating.negative}}</p>\n              </MDBBadge>\n            </td>\n          </tr>\n          <tr v-if=\"target.user.id !== userId\">\n<!--            v-if=\"isCreatingChatPanel\"-->\n            <td colspan=\"2\">\n              <MDBBtn  block color=\"secondary\" size=\"lg\" @click=\"createChatPanel\">Chattailemaan</MDBBtn>\n            </td>\n          </tr>\n          <tr v-if=\"target.user.id !== userId && !isOrder\">\n            <td colspan=\"2\">\n              <MDBBtn  block color=\"success\" size=\"lg\" @click=\"createBooking\">Tee tilaus</MDBBtn>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n\n\n\n      </div>\n\n      <div v-if=\"isOrder\" class=\"order\">\n<!--        <p style=\"color: green; display: flex; justify-content: right; padding: 20px;\" @click=\"isOrder = false\">Valmis</p>-->\n        <div style=\"display: flex; justify-content: right; padding: 20px;\">\n          <MDBBtnClose\n            white\n            size=\"lg\"\n            @click=\"isOrder = false\"\n          />\n        </div>\n\n        <form @submit.prevent=\"confirmOrder\">\n          <p style=\"color: #00a6ff; text-align: left;\">Address: {{address}}</p>\n\n          <MDBInput\n              white\n              label=\"Anna otsiko\"\n              v-model=\"orderHeader\"\n              wrapperClass=\"mb-4\"\n          />\n\n          <p style=\"text-align: left;\">Missä ajalla haluaisit ammattilaista?</p>\n\n          <div style=\"color: #fff;\">\n            <VueDatePicker\n                style=\"margin-bottom: 20px;\"\n                v-model=\"orderDate\"\n                dark\n                :min-date=\"new Date()\"\n                teleport-center\n                @internal-model-change=\"handleInternalDate\"\n                :state=\"isNoDate ? false : null\"\n            >\n\n            </VueDatePicker>\n            <MDBTextarea\n                maxlength=\"70\"\n                label=\"Tehtävän kuvaus...\"\n                white\n                rows=\"2\"\n\n                v-model=\"orderDescription\"\n                invalidFeedback=\"Ole hyvä ja kirjoita tehtävän kuvaus.\"\n                validFeedback=\"Ok!\"\n                wrapperClass=\"mb-4\"\n            />\n            <span class=\"message-counter\">{{ orderDescription.length }} / 70</span>\n          </div>\n          <MDBBtn block type=\"submit\" color=\"success\">Tilaa</MDBBtn>\n        </form>\n\n      </div>\n\n\n\n<!--      <p style=\"color: red;\">selecteduser {{selecteduser}}</p>-->\n\n      <div v-if=\"!isTargetSelected\">\n        <div v-if=!isMainPanel >\n          <MDBIcon size=\"2x\" style=\"float: right; padding: 10px;\" @click=\"returnToMainPanel\">\n            <i class=\"fas fa-expand-arrows-alt\"></i>\n          </MDBIcon>\n        </div>\n      </div>\n\n\n\n<!--      style=\"background-color:white; width: 40%; float: right;\"-->\n      <div v-if=\"!isMainPanel && countOfSelectedProfessional > 0 && !isTargetSelected\" style=\"background-color:white;\">\n\n\n        <p style=\"color: red; font-size: 14px; text-align: left; padding: 15px; \">\n          Napsauta merkkiä nähdäksesi palveluntarjoajan!\n        </p>\n\n<!--        <p style=\"color: blue;\">-->\n<!--          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua-->\n<!--        </p>-->\n\n      </div>\n\n\n\n<!--      <MDBBtn color=\"dark\"-->\n<!--              v-if=\"isMainPanel\"-->\n<!--              size=\"lg\"-->\n<!--              block-->\n<!--              @click=\"receive\"-->\n<!--              style=\"position: relative; z-index:1; opacity: 1.2;\"-->\n<!--      >-->\n<!--        Tee uusi tilaus-->\n<!--      </MDBBtn>-->\n\n\n<!--      <MDBBtn color=\"danger\"-->\n<!--              v-if=\"isMainPanel\"-->\n<!--              size=\"lg\"-->\n<!--              block-->\n<!--              @click=\"$router.go(-1)\"-->\n<!--              style=\"position: relative; z-index:1; opacity: 1.0;\"-->\n<!--      >-->\n<!--        Poistu-->\n<!--      </MDBBtn>-->\n\n    </MDBContainer>\n<!--    <h3 style=\"margin-top: 50px;\">Kartta ladataan...</h3>-->\n<!--    <div class=\"spinner-border\" role=\"status\">-->\n<!--      <span class=\"visually-hidden\">Loading...</span>-->\n<!--    </div>-->\n<!--    <section id=\"map\"></section>-->\n\n    <div id=\"map\"></div>\n\n\n  </div>\n\n</template>\n\n<script>\n/* eslint-disable */\n/*global google*/\nimport axios from 'axios'\nimport recipientService from '../service/recipients'\nimport providerService from '../service/providers'\nimport {\n  MDBContainer,\n  MDBInput,\n  MDBBtn,\n  MDBBtnClose,\n  MDBRow,\n  MDBCol,\n  MDBIcon,\n  MDBBadge,\n  MDBTextarea\n} from \"mdb-vue-ui-kit\";\nimport distance from '../components/controllers/distance'\nimport gMap from '../components/location'\nimport proData from '@/components/profession/proList'\nimport chatPanel from '@/pages/LiveChat'\nimport VueDatePicker from '@vuepic/vue-datepicker';\nimport Dropdown from 'primevue/dropdown';\nimport '@/css/pro.css'\nimport socket from \"@/socket\";\nexport default {\n  name: \"recipient-public\",\n  props: {\n    userIsProvider: Object,\n    selecteduser: null,\n    chatusers: Array,\n    messages: Array,\n    isProviderLoggedIn: Boolean\n  },\n  components: {\n    chatPanel,\n    MDBContainer,\n    MDBInput,\n    MDBBtn,\n    MDBBtnClose,\n    MDBRow,\n    MDBCol,\n    MDBIcon,\n    MDBBadge,\n    MDBTextarea,\n    Dropdown,\n    VueDatePicker\n  },\n  data () {\n    return {\n      obj: null,\n      isOrder: false,\n      target: {}, // Selected provider from map\n      isTargetSelected: false,\n      isMainPanel: true,\n      isCreatingChatPanel: false,\n      prof: null,\n      username: null,\n      userId: null,\n      providerId: null,\n      address: null,\n      myLat: null,\n      mylng: null,\n      countOfSelectedProfessional: 0,\n      isActiveProffs: false,\n      isDistSelection: false,\n      professional: \"Automaalari\",\n      currentProfession: \"\",\n      distBtw: 1,\n      prodata: proData,\n      room: null,\n      isChatPanel: true,\n      isMapChat: false,\n      providers: [],\n\n      selectedProPosition: null,\n      orderDate: null,\n      orderHeader: \"\",\n      orderDescription: \"\"\n    }\n  },\n  mounted () {\n    const loggedUserJSON = window.localStorage.getItem('loggedAppUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      this.username = user.username;\n      this.userId = user.id\n      //console.log(\"User token: \" + this.loggedUser.token)\n    }\n\n\n  // @media screen and (max-width: 480px) {\n  //     select{\n  //       /* Add your mobile only CSS here */\n  //     }\n  //   }\n  //\n  //   select {\n  //     /* Add your non-mobile CSS here */\n  //   }\n  //\n\n\n    this.resizeMap();\n\n    //console.log(\"Is provider in \" + this.isProviderLoggedIn)\n\n    //console.log(\"User id in providers \" + this.userId)\n\n    const myMarker = new google.maps.Marker({\n      icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\n    })\n\n    this.userCurrentLocation();\n\n    const mapSearch = window.localStorage.getItem('mapSearchData')\n    if (mapSearch) {\n      const data = JSON.parse(mapSearch)\n      console.log(\"Data+++ \" + data.profession);\n      this.currentProfession = data.profession;\n      this.distBtw = data.distance;\n      this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\n    }\n\n    const mapSearchPro = window.localStorage.getItem('mapSearchProData');\n    if (mapSearchPro) {\n      const currentPro = JSON.parse(mapSearchPro);\n      console.log(\"Pro pos in map ---- \" + currentPro);\n      // console.log(\"User id --------- \" + currentPro.user.id)\n      this.isMainPanel = false;\n      this.openMarker(currentPro);\n\n      //this.isTargetSelected = true;\n\n\n      //this.target = currentPro;\n      //console.log(\"User id in target --------- \" + this.target.user.id)\n\n      // isTargetSelected && !isMapChat\n    }\n\n    //this.setProviderId()\n\n\n\n\n\n    // const selectProfession = document.getElementById(\"listOfProfessionals\")\n    //\n    // selectProfession.addEventListener(\"change\", (event) => {\n    //   this.isDistSelection = true;\n    //\n    //   console.log(\"Selected \" + event.target.value);\n    //\n    //   this.currentProfession = event.target.value;\n    //   this.showClientLocationOnTheMap(event.target.value, this.distBtw);\n    // })\n\n    // this.currentProfession = \"Automaalari\";\n    // this.distBtw = 20;\n    //\n    // this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\n\n    const selectDistance = document.getElementById\n    (\"distance\");\n\n    selectDistance.addEventListener(\"change\", (event) => {\n      this.distBtw = parseFloat(event.target.value);\n\n      const data = {\n        profession: this.currentProfession,\n        distance: parseFloat(event.target.value)\n      }\n\n      window.localStorage.setItem('mapSearchData', JSON.stringify(data));\n\n      //console.log(\"+++++++++++ \" + this.countOfSelectedProfessional > 0)\n      this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\n\n    })\n\n\n\n    const input = document.getElementById(\"autocomplite\");\n\n    const center = { lat: 50.064192, lng: -130.605469 };\n    const defaultBounds = {\n      north: center.lat + 0.1,\n      south: center.lat - 0.1,\n      east: center.lng + 0.1,\n      west: center.lng - 0.1,\n    };\n    const options = {\n      bounds: defaultBounds,\n      componentRestrictions: { country: \"fi\" },\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\", \"formatted_address\"],\n      strictBounds: false,\n      //types: [\"establishment\"],\n    };\n    const autocomplete = new google.maps.places.Autocomplete(input, options);\n\n    autocomplete.addListener(\"place_changed\", () => {\n      let place = autocomplete.getPlace()\n      this.myLat = place.geometry.location.lat();\n      this.myLng = place.geometry.location.lng();\n\n      this.getAddressFrom(place.geometry.location.lat(), place.geometry.location.lng())\n      this.address = place.formatted_address;\n      console.log(\"Address xxxx \" + place.formatted_address)\n      console.log(\"place-----------\" + this.myLat)\n    });\n\n  },\n  methods: {\n    changedProfession () {\n      console.log(\"Changed \" + this.prof.label);\n      this.showClientLocationOnTheMap(this.prof.label, this.distBtw);\n      this.currentProfession = this.prof.label;\n      this.isDistSelection = true;\n    },\n    selectUser(user) {\n      this.$emit('select:user', user);\n      //if (!user.self)\n      //this.selectedUser = user;\n    },\n\n    noSelectUser () {\n      this.$emit(\"noSelected\");\n    },\n    onMessage(content, date) {\n\n      this.$emit(\"on:message\", content, date);\n\n    },\n    resizeMap() {\n      var myMap = document.getElementById('map');\n      myMap.style.height = \"100%\";\n      myMap.style.width = \"100%\";\n    },\n    receive (){\n      this.$router.push('/rf')\n      //this.$router.push('recipient-form');\n\n    },\n    userCurrentLocation () {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const { latitude, longitude } = position.coords;\n          // Show a map centered at latitude / longitude.\n          this.myLat = latitude\n          this.myLng = longitude\n          this.showUserLocationOnTheMap (latitude, longitude)\n        });\n      }\n\n    },\n\n    pinSymbol(color) {\n      return {\n        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',\n        fillColor: color,\n        fillOpacity: 1,\n        strokeColor: '#000',\n        strokeWeight: 2,\n        scale: 1\n      };\n    },\n    // Kasutaja sihtkoht, otsitakse automaatselt\n    showUserLocationOnTheMap (latitude, longitude) {\n\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 13,\n        center: new google.maps.LatLng(latitude, longitude),\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        accuracy: 50,\n\n      });\n\n      // new google.maps.Marker({\n      //   position: new google.maps.LatLng(latitude, longitude),\n      //   accuracy: 50,\n      //   map: map,\n      //   icon: this.pinSymbol('yellow'),\n      //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n      // })\n      this.getAddressFrom (latitude, longitude)\n    },\n    // Siis kui sisestada käsitsi aadress\n    getAddressFrom (lat, long) {\n\n      axios.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat +\n          \",\" + long\n          + \"&key=\" + 'AIzaSyDt2YXE5tk0J72JgqnH3DTD7MeoqbbWBmU')\n          .then(response => {\n            if (response.data.error_message) {\n              this.error = response.data.error_message;\n\n              console.log(response.data.error_message)\n            } else {\n              const map = new google.maps.Map(document.getElementById(\"map\"), {\n                zoom: 13,\n                center: new google.maps.LatLng(lat, long),\n                mapTypeId: google.maps.MapTypeId.ROADMAP\n              });\n\n              // AIzaSyBDA2EBoGezJx51wQtxoW3Ecq5Ql8CCAiE\n\n              this.address = response.data.results[1].formatted_address\n            }\n\n          })\n          .catch(error => {\n            this.error = error.message\n            console.log(error.message)\n          })\n    },\n\n    distanceBtw (originLat, originLng, destLat, destLng) {\n      var origin = new google.maps.LatLng(originLat, originLng);\n      var destination = new google.maps.LatLng(destLat, destLng);\n      return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n    },\n\n\n    otherUserLocations (providers, profession, dist) {\n      let prev_infowindow = false;\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 9,\n        center: new google.maps.LatLng(this.myLat, this.myLng),\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n      });\n      console.log(\"Users count: \" + providers.length)\n      console.log(\"Current distance \" + dist)\n\n       // new google.maps.Marker({\n       //   position: new google.maps.LatLng(this.myLat, this.myLng),\n       //   accuracy: 50,\n       //   map: map,\n       //   icon: this.pinSymbol('yellow'),\n       //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n       // })\n      let count = 0;\n\n      if (providers.length > 0) {\n        this.target = {};\n\n        for (let pos = 0; pos < providers.length; pos++) {\n          console.log(\"------------ \" + providers[pos].yritys);\n          //console.log(\"Client latitude: \" + recipient[pos].latitude)\n          //console.log(\"Client longitude: \" + recipient[pos].longitude)\n          let myLatLong = [this.myLat, this.myLng];\n          providers[pos].profession.forEach(prof => {\n            if (prof === profession) {\n              //his.providers.push(providers[pos])\n              console.log(\"Pro \" + prof.yritys)\n              let providerLatLng = [providers[pos].latitude, providers[pos].longitude];\n              console.log(\"Distance btw \" + this.distanceBtw(this.myLat, this.myLng, providers[pos].latitude, providers[pos].longitude));\n\n              //distance.theDist()\n\n              //this.countOfSelectedClient++;\n              this.isActiveProffs = true;\n\n              if (this.distanceBtw(this.myLat, this.myLng, providers[pos].latitude, providers[pos].longitude) <= dist) {\n                count ++;\n\n                let marker;\n                if (this.isTargetSelected) {\n\n                  marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                    accuracy: 50,\n                    map: map,\n                    icon: this.pinSymbol('orange'),\n                    label: { color: '#f75959',  fontWeight: 'bold', fontSize: '14px', text: 'TMI ' + providers[pos].yritys }\n                  })\n                } else {\n\n                  marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                    accuracy: 50,\n                    map: map\n                  })\n\n                }\n\n\n\n                // this.target = providers[pos];\n                // this.room = providers[pos].yritys + this.username;\n\n                window.myGlobalFunction = this.openMarker;\n\n\n                const content = \"class='map-info-window'\"\n\n\n\n                const infowindow = new google.maps.InfoWindow({\n                  //content: \"Hei hei!\"\n                  //content:'<p id=\"map-info-window\">Hello World!</p>'\n                  //content: \"TMI: \" + providers[pos].yritys\n                });\n\n                google.maps.event.addListener(marker, 'click', function() {\n                  //infowindow.setContent(content);\n\n\n                  console.log(\"POOOOS \" + pos)\n                  let p = pos\n\n                  if( prev_infowindow ) {\n                    prev_infowindow.close();\n                  }\n\n                  prev_infowindow = infowindow;\n\n\n                  infowindow.open(map,marker);\n\n                  infowindow.setContent(\"<div  class='map-info-window'>\" + '<p style=\"color: green; \">'+providers[pos].yritys+'</p>' + '<p style=\"color: red; \" onclick=\"myGlobalFunction('+ p +' )\">Tiedot</p>' + \"</div>\")\n\n                });\n\n                console.log(\"Prev infowondow \" + prev_infowindow)\n\n              }\n\n            }\n          })\n\n        }\n\n\n        if (count > 0) {\n          this.isActiveProffs = true;\n          this.isMainPanel = false;\n\n        } else {\n          this.isActiveProffs = false;\n        }\n        this.countOfSelectedProfessional = count;\n        console.log(\"countxx \" + count)\n        this.identifyProfText();\n        //console.log(\"Count \" + this.countOfSelectedClients)\n\n      }\n\n    },\n\n    handleInitChat () {\n      if (this.target.user.username !== this.username) {\n        const room = this.target.yritys + this.username;\n        console.log(\"Username in map: \" + this.target.user.username);\n        console.log(\"Room in map \" + this.room);\n        // Room users in server will be created\n        // socket.emit(\"create room users\", {\n        //   room: this.room,\n        //   pro: this.target.yritys,\n        //   status: \"map\",\n        //   username: this.username,\n        //   providerUsername: this.target.user.username,\n        //   providerID: this.target.user.id\n        // })\n        const createChatRoom = {\n          room: this.room,\n          pro: this.target.yritys,\n          status: \"map\",\n          username: this.username,\n          providerUsername: this.target.user.username,\n          providerID: this.target.user.id\n        }\n        const chatCredentials = {\n          room: this.room,\n          proID: this.target.user.id,\n          pro: this.target.yritys,\n          userID: this.target.user.id,\n          username: this.target.user.username\n        }\n        //this.$emit(\"chatCredentials\", chatCredentials);\n\n        this.$emit(\"initializeChat\", {\n          initChatRoom: createChatRoom,\n          chatData: chatCredentials\n        });\n\n      }\n    },\n\n    createChatPanel () {\n      // if (this.target.user.username !== this.username) {\n      //   const room = this.target.yritys + this.username;\n      //   console.log(\"Username in map: \" + this.target.user.username);\n      //   console.log(\"Room in map \" + this.room);\n      //   // Room users in server will be created\n      //   socket.emit(\"create room users\", {\n      //     room: this.room,\n      //     pro: this.target.yritys,\n      //     status: \"map\",\n      //     username: this.username,\n      //     providerUsername: this.target.user.username,\n      //     providerID: this.target.user.id\n      //   })\n      //   const chatCredentials = {\n      //     room: this.room,\n      //     userID: this.target.user.id,\n      //     username: this.target.user.username\n      //   }\n      //   this.$emit(\"chatCredentials\", chatCredentials);\n      // }\n      this.handleInitChat();\n      this.isMapChat = true\n    },\n\n    async openMarker (p) {\n      //this.noSelectUser();\n      //console.log(\"Profession \" + this.currentProfession);\n      const pro = [this.currentProfession]\n      // if (this.target.user.username !== this.username) {\n      //   this.room = this.target.yritys + this.username;\n      // }\n\n\n      const providersMatchingProSearch = await providerService.getProvidersMatchingByProfession({result: pro});\n      let dataForward = [];\n      console.log(\"Matching pro length \" + providersMatchingProSearch.length)\n\n      providersMatchingProSearch.forEach(pms => {\n        console.log(\"Results: \" + pms.user.id);\n        let distance = parseInt(this.distanceBtw(this.myLat, this.myLng, pms.latitude, pms.longitude)).toFixed(0)\n\n        dataForward = dataForward.concat({\n          id: pms.user.id,\n          dist: distance,\n          pro: this.currentProfession\n        })\n      })\n\n\n\n      socket.emit(\"map search report\", dataForward);\n\n      const providers = await providerService.getProviders()\n      if (providers) {\n        //console.log(\"watcher position \" + this.myLat + \" / \" + this.myLng);\n        if (providers[p].user.username !== this.username) {\n          this.isCreatingChatPanel = true\n        }\n\n        console.log(\"Room in client map: \" + this.room);\n\n        this.target = providers[p];\n        window.localStorage.setItem('mapSearchProData', JSON.stringify(p));\n        if (this.username) {\n          this.room = this.target.yritys + this.username;\n        } else {\n          this.room = \"nipitiri\";\n        }\n        this.isTargetSelected = true;\n        //console.log(\"Pooooos ---- \" + p);\n        //this.otherUserLocations(providers, this.currentProfession, this.distBtw)\n      }\n\n    },\n    createBooking () {\n      console.log(\"Here you can make an order! \" + this.address)\n      this.isOrder = true;\n    },\n\n    async confirmOrder () {\n      console.log(\"Order\")\n      let recipient;\n      if (this.orderDate) {\n        let year = this.orderDate.getFullYear();\n        let month = this.orderDate.getMonth();\n        let day = this.orderDate.getDate();\n        let hour = this.orderDate.getHours();\n        let minute = this.orderDate.getMinutes();\n        const dateForMs = new Date(year, month, day, hour, minute).getTime();\n\n        recipient = {\n          created: this.orderDate,\n          created_ms: dateForMs,\n          header: this.orderHeader,\n          address: this.address,\n          latitude: this.myLat,\n          longitude: this.myLng,\n          professional: this.currentProfession,\n          year: this.orderDate.getFullYear(),\n          month: this.orderDate.getMonth(),\n          day: this.orderDate.getDate(),\n          hours: this.orderDate.getHours(),\n          minutes: this.orderDate.getMinutes(),\n          description: this.orderDescription,\n          status: \"notSeen\",\n          ordered: this.target.id\n        }\n\n\n      }\n      console.log(\"Address: \" + this.address);\n      const booking = await recipientService.addRecipient(this.userId, recipient)\n      //const room = this.target.yritys + this.username;\n      await recipientService.addProviderData(booking.id, this.target.id);\n      const bookingToProvider = await providerService.addProviderBooking(this.target.id, booking.id);\n      if (bookingToProvider === \"Recipient is added!\") {\n        console.log(\"Iiiiisss \" + (this.target.yritys + this.username))\n        const room = this.target.yritys + this.username;\n        const chatUserDataNavbar = {\n          status: \"\",\n          userID: this.target.user.id,\n          name: this.target.user.username,\n          room: room\n        };\n        this.handleInitChat();\n        // const chatCredentials = {\n        //   room: this.room,\n        //   pro: this.target.yritys,\n        //   userID: this.target.user.id,\n        //   username: this.target.user.username\n        // }\n        // this.$emit(\"chatCredentials\", chatCredentials);\n\n        this.$emit('client:confirmed_provider', this.target.id, booking, chatUserDataNavbar);\n      }\n\n\n\n      const id = this.target.user.id;\n      this.$emit('booking:update', booking)\n      socket.emit(\"accept provider\", {\n        id,\n        booking: booking,\n      })\n      this.$router.push('/received')\n    },\n\n    async outFromMarkerPanel () {\n      this.isTargetSelected = false\n      //this.isMainPanel = true;\n      this.noSelectUser();\n      window.localStorage.removeItem('mapSearchProData');\n      const providers = await providerService.getProviders()\n      if (providers !== null) {\n        this.otherUserLocations(providers, this.currentProfession, this.distBtw);\n      }\n    },\n\n    closeMapChat () {\n      this.isMapChat = false\n    },\n\n    async returnToMainPanel () {\n      this.isMainPanel = true;\n      window.localStorage.removeItem('mapSearchData')\n      this.noSelectUser();\n\n      // const providers = await providerService.getProviders()\n      // if (providers !== null) {\n      //   this.otherUserLocations(providers, \"\", \"\");\n      // }\n      //this.currentProfession = \"\"\n      // this.prof = \"\";\n      // this.distBtw = 0\n    },\n\n    closeMainPanel () {\n      this.isMainPanel = false;\n      this.noSelectUser();\n      console.log(\"Close main panel\")\n    },\n\n    // renderClients (event) {\n    //   console.log(\"Event value \" + event.target.value)\n    //   //this.countOfSelectedClients = 0;\n    //\n    //   if (event.target.value) {\n    //     // @click=\"renderClients($event)\"\n    //     this.showClientLocationOnTheMap(event.target.value)\n    //\n    //   }\n    //   this.prof = event.target.value\n    //\n    //   event.target.value = \"\"\n    //\n    // },\n\n\n    async showClientLocationOnTheMap (profession, dist) {\n\n      console.log(\"Current distance herexx  \" + dist)\n      const providers = await providerService.getProviders()\n      if (providers !== null) {\n        this.otherUserLocations(providers, profession, dist);\n      }\n\n    },\n    identifyProfText () {\n      if (this.countOfSelectedProfessional > 1) {\n        this.professional = \"ammattilaista\"\n      } else {\n        this.professional = \"ammattilainen\"\n      }\n    }\n\n  }\n}\n</script>\n\n<style>\n.ui.button,\n.dot.circle {\n  background-color: #ff5a5f;\n  color: white;\n}\n\n\n\n.pac-icon {\n  display: none;\n}\n.pac-item {\n  padding: 10px;\n  font-size: 16px;\n  cursor: pointer;\n}\n.pac-item:hover {\n  background-color: #ececec;\n}\n.pac-item-query {\n  font-size: 16px;\n}\n.spinner-border {\n\n}\n\n\n#map {\n  background:  url(/src/assets/map.gif)  no-repeat center center;\n\n}\n\n#map {\n   position: absolute;\n\n  /*height: 500px; !* The height is 400 pixels *!*/\n  /*width: 100%; !* The width is the width of the web page *!*/\n\n   top: 120px;\n   right: 0;\n   bottom: 0;\n   left: 0;\n }\n\n.map-info-window {\n  /*width: 200px;*/\n\n}\n\n#panel {\n  margin-top: 10px;\n}\n\n@media only screen and (max-width: 1000px) {\n  #panel {\n    display: none !important;\n\n  }\n}\n\n.activeClients {\n  display: none !important;\n}\n.noClients {\n  display: none !important;\n}\n.hideDistSelectPanel {\n  display: none !important;\n}\n.hideMainPanel {\n  display: none !important;\n}\nh3 {\n  padding: 10px;\n  color: #0095ff;\n}\n.minmax-icon {\n  padding: 12px;\n}\n\n.map-info-table  td {\n  border: 1px solid blue;\n  padding: 5px;\n}\n\n.order{\n  color:yellow;\n\n  /*background-color:rgba(255, 0, 0, 0.5);*/\n  /*background-color:#221a16;*/\n  background-color: #434240;\n  /*opacity: 0.2  ;*/\n  /*height:300px;*/\n  width:90%;\n  margin: auto;\n  padding: 14px;\n  /*display:flex;*/\n  /*align-items:center;*/\n  /*justify-content:center;*/\n\n\n  /*top: 50vh; left: 50vw; transform: translate(-50%, -50%);*/\n  /*top: 50vh; left: 50vw; transform: translate(-50%, -50%);*/\n  position:relative;\n  /*bottom:5px;*/\n  /*right:5px;*/\n}\n\n</style>","import { render } from \"./RecipientPublic.vue?vue&type=template&id=7b946d6f\"\nimport script from \"./RecipientPublic.vue?vue&type=script&lang=js\"\nexport * from \"./RecipientPublic.vue?vue&type=script&lang=js\"\n\nimport \"./RecipientPublic.vue?vue&type=style&index=0&id=7b946d6f&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["res","distance","origin","google","maps","LatLng","destination","service","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","unitSystem","UnitSystem","METRIC","durationInTraffic","avoidHighways","avoidTolls","response_data","responseDis","status","DistanceMatrixStatus","OK","console","log","rows","elements","text","alert","test","_createVNode","_createTextVNode","theDist","geometry","spherical","computeDistanceBetween","toFixed","style","_createElementVNode","class","id","value","disabled","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","colspan","_hoisted_54","_createElementBlock","_component_MDBContainer","_normalizeClass","hideMainPanel","$data","isMainPanel","_hoisted_1","_component_MDBIcon","size","onClick","$options","closeMainPanel","_hoisted_2","_component_MDBBtnClose","white","_cache","$event","_ctx","$router","go","_createBlock","_component_MDBBtn","color","block","receive","_hoisted_3","_component_MDBInput","label","address","wrapperClass","_hoisted_4","_component_Dropdown","onChange","changedProfession","prof","options","prodata","filter","optionLabel","optionGroupLabel","optionGroupChildren","placeholder","optiongroup","_withCtx","slotProps","_hoisted_8","_toDisplayString","option","_hoisted_5","_hoisted_6","_hoisted_7","hideDistSelectPanel","isDistSelection","distBtw","args","filterByDistance","noClients","isActiveProffs","isMapChat","_hoisted_31","closeMapChat","_component_chat_panel","chatusers","$props","messages","selecteduser","selectUser","onNoSelected","noSelectUser","onMessage","isTargetSelected","_hoisted_32","_hoisted_33","outFromMarkerPanel","_hoisted_34","_hoisted_35","target","yritys","_hoisted_36","ytunnus","_hoisted_37","range","this","_hoisted_38","priceByHour","_hoisted_39","negative","_component_MDBBadge","pill","notification","rating","positive","user","userId","_hoisted_40","_hoisted_41","createChatPanel","isOrder","_hoisted_42","_hoisted_43","createBooking","_hoisted_44","_hoisted_45","onSubmit","_withModifiers","confirmOrder","_hoisted_46","orderHeader","_hoisted_47","_hoisted_48","_component_VueDatePicker","orderDate","dark","Date","onInternalModelChange","handleInternalDate","state","isNoDate","_component_MDBTextarea","maxlength","orderDescription","invalidFeedback","validFeedback","_hoisted_49","length","type","_hoisted_50","_hoisted_51","returnToMainPanel","_hoisted_52","countOfSelectedProfessional","_hoisted_53","_hoisted_55","_hoisted_56","name","props","userIsProvider","Object","Array","isProviderLoggedIn","Boolean","components","chatPanel","MDBContainer","MDBInput","MDBBtn","MDBBtnClose","MDBRow","MDBCol","MDBIcon","MDBBadge","MDBTextarea","Dropdown","VueDatePicker","data","obj","isCreatingChatPanel","username","providerId","myLat","mylng","professional","currentProfession","proData","room","isChatPanel","providers","selectedProPosition","mounted","loggedUserJSON","window","localStorage","getItem","JSON","parse","resizeMap","Marker","icon","userCurrentLocation","mapSearch","profession","showClientLocationOnTheMap","mapSearchPro","currentPro","openMarker","selectDistance","document","getElementById","addEventListener","event","parseFloat","setItem","stringify","input","center","lat","lng","defaultBounds","north","south","east","west","bounds","componentRestrictions","country","fields","strictBounds","autocomplete","places","Autocomplete","addListener","place","getPlace","location","myLng","getAddressFrom","formatted_address","methods","$emit","content","date","myMap","height","width","push","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","showUserLocationOnTheMap","pinSymbol","path","fillColor","fillOpacity","strokeColor","strokeWeight","scale","Map","zoom","mapTypeId","MapTypeId","ROADMAP","accuracy","long","axios","get","then","response","error_message","error","results","catch","message","distanceBtw","originLat","originLng","destLat","destLng","otherUserLocations","dist","prev_infowindow","map","count","pos","forEach","marker","fontWeight","fontSize","myGlobalFunction","infowindow","InfoWindow","p","close","open","setContent","identifyProfText","handleInitChat","createChatRoom","pro","providerUsername","providerID","chatCredentials","proID","userID","initChatRoom","chatData","async","providersMatchingProSearch","providerService","getProvidersMatchingByProfession","result","dataForward","pms","parseInt","concat","socket","emit","getProviders","recipient","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","dateForMs","getTime","created","created_ms","header","hours","minutes","description","ordered","booking","recipientService","addRecipient","addProviderData","bookingToProvider","addProviderBooking","chatUserDataNavbar","removeItem","__exports__","render"],"sourceRoot":""}