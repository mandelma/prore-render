{"version":3,"file":"js/532.0458e5aa.js","mappings":"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","sources":["webpack://prore-mongo/./src/components/controllers/distance.js","webpack://prore-mongo/./src/pages/RecipientPublic.vue","webpack://prore-mongo/./src/pages/RecipientPublic.vue?a5fc"],"sourcesContent":["/*global google*/\r\nlet res = \"\";\r\nconst distance = () => {\r\n    //let text = \"\";\r\n    //let value = 0;\r\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\r\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\r\n    var service = new google.maps.DistanceMatrixService();\r\n    service.getDistanceMatrix(\r\n        {\r\n            origins: [origin],\r\n            destinations: [destination],\r\n            travelMode: 'DRIVING',\r\n            unitSystem: google.maps.UnitSystem.METRIC,\r\n            durationInTraffic: true,\r\n            avoidHighways: false,\r\n            avoidTolls: false\r\n        }, response_data);\r\n    //return response_data;\r\n}\r\n\r\nconst response_data = (responseDis, status) => {\r\n    //let result = \"\";\r\n    if (status !== google.maps.DistanceMatrixStatus.OK || status !== \"OK\"){\r\n        console.log('Error:', status);\r\n        // OR\r\n        alert(status);\r\n    }else{\r\n        //alert(responseDis.rows[0].elements[0].distance.text);\r\n        console.log(\"Distance \" + responseDis.rows[0].elements[0].distance.text)\r\n\r\n        res = responseDis.rows[0].elements[0].distance.text;\r\n        return \"aaaaaaaaaaaaa\"\r\n        //result = responseDis.rows[0].elements[0].distance.text;\r\n    }\r\n    //return  \"Hallo\"        //result.toString();\r\n}\r\n\r\nconst test = () => {\r\n    console.log(\"Is it working??\" + res)\r\n\r\n    return  <div>Hiiii</div>;\r\n}\r\n\r\nconst theDist = () => {\r\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\r\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\r\n    return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\r\n}\r\n\r\n// function calcDistance() {\r\n//     // var origin = new google.maps.LatLng(60.233093,24.7531362);\r\n//     // var destination = new google.maps.LatLng(60.2767265,24.8575089);\r\n//     // return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\r\n//\r\n//     var directionsService = new google.maps.DirectionsService();\r\n//\r\n//     var request = {\r\n//         origin      : 'Melbourne VIC', // a city, full address, landmark etc\r\n//         destination : 'Sydney NSW',\r\n//         travelMode  : google.maps.DirectionsTravelMode.DRIVING\r\n//     };\r\n//\r\n//     directionsService.route(request, function(response, status) {\r\n//         if ( status === google.maps.DirectionsStatus.OK ) {\r\n//             alert( response.routes[0].legs[0].distance.value ) ; // the distance in metres\r\n//         }\r\n//         else {\r\n//             // oops, there's no route between these two locations\r\n//             // every time this happens, a kitten dies\r\n//             // so please, ensure your address is formatted properly\r\n//         }\r\n//     });\r\n// }\r\n\r\nexport default { distance, test, theDist }","<template>\r\n  <div>\r\n\r\n\r\n\r\n    <MDBContainer\r\n\r\n        style=\"position: relative; z-index: 1;\r\n\r\n        opacity: 0.8;\r\n        padding-top: 150px;\"\r\n    >\r\n\r\n      <div id=\"test\" style=\"background-color:white;\">\r\n        <MDBInput\r\n            label=\"Anna osoitteesi\"\r\n            v-model=\"address\"\r\n            id=\"autocomplite\"\r\n            size=\"lg\"\r\n            wrapperClass=\"mb-4\"/>\r\n      </div>\r\n\r\n\r\n      <div class=\"ui large segment form\">\r\n\r\n        <div class=\"field\">\r\n          <select id=\"listOfProfessions\" v-model=\"prof\" >\r\n            <option disabled value=\"\">Valitse ammattilainen</option>\r\n            <option value=\"Putkimies\">Putkimies</option>\r\n            <option value=\"Sähkömies\">Sähkömies</option>\r\n            <option value=\"Siivooja\">Siivooja</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div :class=\"{hideDistSelectPanel: !isDistSelection}\">\r\n          <select id=\"distance\" v-model=\"distBtw\" @click=\"filterByDistance\">\r\n            <option disabled value=\"1\">1 kilometriä ympärilläsi</option>\r\n            <option value=\"10\">10 kilometriä ympärilläsi</option>\r\n            <option value=\"20\">20 kilometriä ympärilläsi</option>\r\n            <option value=\"30\">30 kilometriä ympärilläsi</option>\r\n            <option value=\"40\">40 kilometriä ympärilläsi</option>\r\n            <option value=\"50\">50 kilometriä ympärilläsi</option>\r\n            <option value=\"60\">60 kilometriä ympärilläsi</option>\r\n            <option value=\"70\">70 kilometriä ympärilläsi</option>\r\n            <option value=\"80\">80 kilometriä ympärilläsi</option>\r\n            <option value=\"90\">90 kilometriä ympärilläsi</option>\r\n            <option value=\"100\">100 kilometriä ympärilläsi</option>\r\n          </select>\r\n        </div>\r\n\r\n        {{ isSelection }}\r\n\r\n\r\n        <h3\r\n            :class=\"{activeClients: !isActiveProffs}\"\r\n        >\r\n          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua\r\n        </h3>\r\n        <h3\r\n            v-if=\"prof\"\r\n            :class=\"{noClients: isActiveProffs}\"\r\n        >\r\n          Ei ammattilaisia vielä!\r\n        </h3>\r\n\r\n      </div>\r\n\r\n\r\n\r\n      <MDBBtn color=\"dark\"\r\n              size=\"lg\"\r\n              block\r\n              @click=\"receive\"\r\n              style=\"position: relative; z-index:1; opacity: 1.2;\"\r\n      >\r\n        Tee uusi tilaus\r\n      </MDBBtn>\r\n\r\n\r\n      <MDBBtn color=\"danger\"\r\n              size=\"lg\"\r\n              block\r\n              @click=\"$router.push('/received')\"\r\n              style=\"position: relative; z-index:1; opacity: 1.0;\"\r\n      >\r\n        Poistu\r\n      </MDBBtn>\r\n\r\n\r\n    </MDBContainer>\r\n    <h3 style=\"margin-top: 50px;\">Kartta ladataan...</h3>\r\n    <div class=\"spinner-border\" role=\"status\">\r\n      <span class=\"visually-hidden\">Loading...</span>\r\n    </div>\r\n    <section id=\"map\"></section>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\n/*global google*/\r\nimport axios from 'axios'\r\nimport recipientService from '../service/recipients'\r\nimport providerService from '../service/providers'\r\nimport {\r\n  MDBContainer,\r\n  MDBInput,\r\n  MDBBtn\r\n} from \"mdb-vue-ui-kit\";\r\nimport distance from '../components/controllers/distance'\r\nimport gMap from '../components/location'\r\nexport default {\r\n  name: \"recipient-public\",\r\n  props: {\r\n    userIsProvider: Object,\r\n    isProviderLoggedIn: Boolean\r\n  },\r\n  components: {\r\n    MDBContainer,\r\n    MDBInput,\r\n    MDBBtn\r\n  },\r\n  data () {\r\n    return {\r\n      prof: \"\",\r\n      userId: null,\r\n      providerId: null,\r\n      address: null,\r\n      myLat: null,\r\n      mylng: null,\r\n      countOfSelectedProfessional: 0,\r\n      isActiveProffs: false,\r\n      isDistSelection: false,\r\n      professional: \"\",\r\n      currentProfession: \"\",\r\n      distBtw: 1\r\n\r\n    }\r\n  },\r\n  mounted () {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedAppUser')\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON)\r\n      this.userId = user.id\r\n      //console.log(\"User token: \" + this.loggedUser.token)\r\n    }\r\n\r\n    //console.log(\"Is provider in \" + this.isProviderLoggedIn)\r\n\r\n    //console.log(\"User id in providers \" + this.userId)\r\n\r\n\r\n\r\n    //this.setProviderId()\r\n\r\n    const myMarker = new google.maps.Marker({\r\n      icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\r\n    })\r\n\r\n    this.userCurrentLocation();\r\n\r\n    const selectProfession = document.getElementById(\"listOfProfessions\")\r\n\r\n    selectProfession.addEventListener(\"change\", (event) => {\r\n      //alert(\"Profession selected: \" + event.target.value)\r\n      this.isDistSelection = true;\r\n      this.currentProfession = event.target.value;\r\n      this.showClientLocationOnTheMap(event.target.value, this.distBtw);\r\n    })\r\n\r\n    const selectDistance = document.getElementById(\"distance\");\r\n\r\n    selectDistance.addEventListener(\"change\", (event) => {\r\n      this.distBtw = parseFloat(event.target.value);\r\n      //alert(\"Profession selected: \" + event.target.value)\r\n\r\n      this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\r\n      //this.showClient\r\n    })\r\n\r\n\r\n\r\n    const input = document.getElementById(\"autocomplite\");\r\n\r\n    const center = { lat: 50.064192, lng: -130.605469 };\r\n    const defaultBounds = {\r\n      north: center.lat + 0.1,\r\n      south: center.lat - 0.1,\r\n      east: center.lng + 0.1,\r\n      west: center.lng - 0.1,\r\n    };\r\n    const options = {\r\n      bounds: defaultBounds,\r\n      componentRestrictions: { country: \"fi\" },\r\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\", \"formatted_address\"],\r\n      strictBounds: false,\r\n      //types: [\"establishment\"],\r\n    };\r\n    const autocomplete = new google.maps.places.Autocomplete(input, options);\r\n\r\n    autocomplete.addListener(\"place_changed\", () => {\r\n      let place = autocomplete.getPlace()\r\n      this.myLat = place.geometry.location.lat();\r\n      this.myLng = place.geometry.location.lng();\r\n\r\n      this.getAddressFrom(place.geometry.location.lat(), place.geometry.location.lng())\r\n      this.address = place.formatted_address\r\n      console.log(place)\r\n    });\r\n\r\n  },\r\n  methods: {\r\n    receive (){\r\n      this.$router.push('/rf')\r\n\r\n    },\r\n    userCurrentLocation () {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n          const { latitude, longitude } = position.coords;\r\n          // Show a map centered at latitude / longitude.\r\n          this.myLat = latitude\r\n          this.myLng = longitude\r\n\r\n          this.showUserLocationOnTheMap (latitude, longitude)\r\n        });\r\n      }\r\n\r\n    },\r\n\r\n    pinSymbol(color) {\r\n      return {\r\n        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',\r\n        fillColor: color,\r\n        fillOpacity: 1,\r\n        strokeColor: '#000',\r\n        strokeWeight: 2,\r\n        scale: 1\r\n      };\r\n    },\r\n\r\n    showUserLocationOnTheMap (latitude, longitude) {\r\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\r\n        zoom: 13,\r\n        center: new google.maps.LatLng(latitude, longitude),\r\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n        accuracy: 50,\r\n\r\n      });\r\n\r\n    },\r\n\r\n    getAddressFrom (lat, long) {\r\n      axios.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat +\r\n          \",\" + long\r\n          + \"&key=\" + 'AIzaSyAQPLmTMlmSTp4spxPwvaJLnzYnkLmZ9zc')\r\n          .then(response => {\r\n            if (response.data.error_message) {\r\n              this.error = response.data.error_message;\r\n\r\n              console.log(response.data.error_message)\r\n            } else {\r\n              const map = new google.maps.Map(document.getElementById(\"map\"), {\r\n                zoom: 13,\r\n                center: new google.maps.LatLng(lat, long),\r\n                mapTypeId: google.maps.MapTypeId.ROADMAP\r\n              });\r\n\r\n              // AIzaSyBDA2EBoGezJx51wQtxoW3Ecq5Ql8CCAiE\r\n\r\n               /*new google.maps.Marker({\r\n                 position: new google.maps.LatLng(lat, long),\r\n                 accuracy: 50,\r\n                 map: map,\r\n                 icon: this.pinSymbol('yellow'),\r\n                 label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\r\n               })*/\r\n\r\n              //this.address = response.data.results[0].formatted_address\r\n              console.log(response.data.results.results[0].formatted_address)\r\n            }\r\n\r\n          })\r\n          .catch(error => {\r\n            this.error = error.message\r\n            console.log(error.message)\r\n          })\r\n    },\r\n\r\n    distanceBtw (originLat, originLng, destLat, destLng) {\r\n      var origin = new google.maps.LatLng(originLat, originLng);\r\n      var destination = new google.maps.LatLng(destLat, destLng);\r\n      return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\r\n    },\r\n\r\n\r\n    otherUserLocations (recipients, profession, dist) {\r\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\r\n        zoom: 9,\r\n        center: new google.maps.LatLng(this.myLat, this.myLng),\r\n        mapTypeId: google.maps.MapTypeId.ROADMAP\r\n      });\r\n      console.log(\"Users count: \" + recipients.length)\r\n      console.log(\"Current distance \" + dist)\r\n\r\n       /*new google.maps.Marker({\r\n         position: new google.maps.LatLng(this.myLat, this.myLng),\r\n         accuracy: 50,\r\n         map: map,\r\n         icon: this.pinSymbol('yellow'),\r\n         label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\r\n       })\r\n*/\r\n      let count = 0;\r\n      if (recipients.length > 0) {\r\n        for (let pos = 0; pos < recipients.length; pos++) {\r\n\r\n          //console.log(\"Client latitude: \" + recipient[pos].latitude)\r\n          //console.log(\"Client longitude: \" + recipient[pos].longitude)\r\n          let myLatLong = [this.myLat, this.myLng];\r\n          recipients[pos].profession.forEach(prof => {\r\n            if (prof === profession) {\r\n              console.log(\"Pro \" + prof.yritys)\r\n              let providerLatLng = [recipients[pos].latitude, recipients[pos].longitude];\r\n              console.log(\"Distance btw \" + this.distanceBtw(this.myLat, this.myLng, recipients[pos].latitude, recipients[pos].longitude));\r\n\r\n              //distance.theDist()\r\n\r\n              //this.countOfSelectedClient++;\r\n              this.isActiveProffs = true;\r\n\r\n              if (this.distanceBtw(this.myLat, this.myLng, recipients[pos].latitude, recipients[pos].longitude) <= dist) {\r\n                count ++;\r\n                new google.maps.Marker({\r\n                  position: new google.maps.LatLng(recipients[pos].latitude, recipients[pos].longitude),\r\n                  map: map\r\n                })\r\n              }\r\n\r\n            }\r\n          })\r\n\r\n        }\r\n        if (count > 0) {\r\n          this.isActiveProffs = true;\r\n        } else {\r\n          this.isActiveProffs = false;\r\n        }\r\n        this.countOfSelectedProfessional = count;\r\n        console.log(\"countxx \" + count)\r\n        this.identifyProfText();\r\n        //console.log(\"Count \" + this.countOfSelectedClients)\r\n\r\n      }\r\n\r\n    },\r\n\r\n    renderClients (event) {\r\n      console.log(\"Event value \" + event.target.value)\r\n      //this.countOfSelectedClients = 0;\r\n\r\n      if (event.target.value) {\r\n        // @click=\"renderClients($event)\"\r\n        this.showClientLocationOnTheMap(event.target.value)\r\n\r\n      }\r\n      this.prof = event.target.value\r\n\r\n      event.target.value = \"\"\r\n\r\n    },\r\n\r\n\r\n    async showClientLocationOnTheMap (profession, dist) {\r\n\r\n      console.log(\"Current distance herexx  \" + dist)\r\n      const providers = await providerService.getProviders()\r\n      if (providers !== null) {\r\n        this.otherUserLocations(providers, profession, dist);\r\n      }\r\n      // visibility: hidden;\r\n\r\n    },\r\n    identifyProfText () {\r\n      if (this.countOfSelectedProfessional > 1) {\r\n        this.professional = \"ammattilaista\"\r\n      } else {\r\n        this.professional = \"ammattilainen\"\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.ui.button,\r\n.dot.circle {\r\n  background-color: #ff5a5f;\r\n  color: white;\r\n}\r\n\r\n.pac-icon {\r\n  display: none;\r\n}\r\n.pac-item {\r\n  padding: 10px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n}\r\n.pac-item:hover {\r\n  background-color: #ececec;\r\n}\r\n.pac-item-query {\r\n  font-size: 16px;\r\n}\r\n.spinner-border {\r\n  margin-top: 100px;\r\n}\r\n\r\n#map {\r\n   position: absolute;\r\n   top: 120px;\r\n   right: 0;\r\n   bottom: 0;\r\n   left: 0;\r\n }\r\n\r\n@media only screen and (max-width: 1000px) {\r\n  #test {\r\n    display: none !important;\r\n\r\n  }\r\n}\r\n\r\n.activeClients {\r\n  display: none !important;\r\n}\r\n.noClients {\r\n  display: none !important;\r\n}\r\n.hideDistSelectPanel {\r\n  display: none !important;\r\n}\r\n\r\n</style>","import { render } from \"./RecipientPublic.vue?vue&type=template&id=001be555\"\nimport script from \"./RecipientPublic.vue?vue&type=script&lang=js\"\nexport * from \"./RecipientPublic.vue?vue&type=script&lang=js\"\n\nimport \"./RecipientPublic.vue?vue&type=style&index=0&id=001be555&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["res","distance","origin","google","maps","LatLng","destination","service","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","unitSystem","UnitSystem","METRIC","durationInTraffic","avoidHighways","avoidTolls","response_data","responseDis","status","DistanceMatrixStatus","OK","console","log","rows","elements","text","alert","test","_createVNode","_createTextVNode","theDist","geometry","spherical","computeDistanceBetween","toFixed","id","style","class","_createElementVNode","disabled","value","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","role","_createElementBlock","_component_MDBContainer","_hoisted_1","_component_MDBInput","label","$data","address","$event","size","wrapperClass","_hoisted_2","_hoisted_3","prof","_normalizeClass","hideDistSelectPanel","isDistSelection","distBtw","onClick","_cache","args","_ctx","filterByDistance","_toDisplayString","isSelection","activeClients","isActiveProffs","countOfSelectedProfessional","professional","noClients","_component_MDBBtn","color","block","$options","receive","$router","push","_hoisted_21","_hoisted_22","_hoisted_23","name","props","userIsProvider","Object","isProviderLoggedIn","Boolean","components","MDBContainer","MDBInput","MDBBtn","data","userId","providerId","myLat","mylng","currentProfession","mounted","loggedUserJSON","window","localStorage","getItem","user","JSON","parse","this","Marker","icon","userCurrentLocation","selectProfession","document","getElementById","addEventListener","event","target","showClientLocationOnTheMap","selectDistance","parseFloat","input","center","lat","lng","defaultBounds","north","south","east","west","options","bounds","componentRestrictions","country","fields","strictBounds","autocomplete","places","Autocomplete","addListener","place","getPlace","location","myLng","getAddressFrom","formatted_address","methods","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","showUserLocationOnTheMap","pinSymbol","path","fillColor","fillOpacity","strokeColor","strokeWeight","scale","Map","zoom","mapTypeId","MapTypeId","ROADMAP","accuracy","long","axios","get","then","response","error_message","error","results","catch","message","distanceBtw","originLat","originLng","destLat","destLng","otherUserLocations","recipients","profession","dist","map","length","count","pos","forEach","yritys","identifyProfText","renderClients","async","providers","providerService","getProviders","__exports__","render"],"sourceRoot":""}