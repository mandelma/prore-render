{"version":3,"file":"js/320.15f5d49a.js","mappings":"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","sources":["webpack://prore-mongo/./src/components/controllers/datetime.js","webpack://prore-mongo/./src/pages/RecipientPublic.vue","webpack://prore-mongo/./src/pages/RecipientPublic.vue?a5fc"],"sourcesContent":["\nconst compare = (rec, prov) => {\n    const receiverDate = new Date(rec.y, rec.m, rec.d, rec.hour, rec.min);\n    const providerDate = new Date(prov.y, prov.m, prov.d, prov.hour, prov.min)\n    return providerDate >= receiverDate;\n}\n\nconst providerMatchingForClient = (re, pFrom, pTo) => {\n    //const rDate = new Date(re.y, re.m, re.d, re.hour, re.min);\n    const pFromDate = new Date(pFrom.y, pFrom.m, pFrom.d, pFrom.hour, pFrom.min);\n    const pToDate = new Date(pTo.y, pTo.m, pTo.d, pTo.hour, pTo.min);\n    return re >= pFromDate && re < pToDate;\n}\nexport default { compare, providerMatchingForClient }","<template>\r\n  <div>\r\n\r\n\r\n\r\n    <MDBContainer\r\n\r\n        style=\"position: relative; z-index: 1;\r\n        /*width: 80%;*/\r\n        margin-top: 80px;\r\n        opacity: 0.8;\r\n        \"\r\n    >\r\n\r\n\r\n\r\n<!--      <MDBBtn color=\"danger\" @click=\"puhasta\">Puhasta kaardi andmed</MDBBtn>-->\r\n\r\n      <div :class=\"{hideMainPanel: !isMainPanel}\" style=\"background-color: #2b2a2a; padding: 10px;\">\r\n        <div style=\"display: flex; justify-content: right;\">\r\n          <MDBIcon size=\"lg\" style=\"padding: 10px;\" @click=\"closeMainPanel\">\r\n            <i class=\"fas fa-expand-arrows-alt\"></i>\r\n          </MDBIcon>\r\n          <div>\r\n            <MDBBtnClose\r\n                white\r\n                style=\" padding: 10px;\"\r\n                size=\"lg\"\r\n                @click=\"$router.go(-1)\"\r\n            />\r\n          </div>\r\n\r\n\r\n\r\n        </div>\r\n\r\n<!--        <MDBBtn color=\"info\"-->\r\n<!--                v-if=\"isMainPanel\"-->\r\n<!--                size=\"lg\"-->\r\n<!--                block-->\r\n<!--                @click=\"receive\"-->\r\n<!--                style=\"position: relative; z-index:1; opacity: 1.2; margin-bottom: 10px;\"-->\r\n<!--        >-->\r\n<!--          Tee uusi tilaus-->\r\n<!--        </MDBBtn>-->\r\n\r\n        <div id=\"panel\">\r\n          <MDBInput\r\n              white\r\n              label=\"Anna toinen osoitteesi kun ei täsmää\"\r\n              v-model=\"address\"\r\n              id=\"autocomplite\"\r\n              size=\"lg\"\r\n              wrapperClass=\"mb-4\"\r\n          />\r\n        </div>\r\n<!--        <span id=\"listOfProfessionals\">Options</span>-->\r\n<!--        <Dropdown aria-labelledby=\"listOfProfessionals\" />-->\r\n\r\n\r\n        <div style=\" margin-bottom: 20px;\" >\r\n          <Dropdown  @change=\"changedProfession\"   v-model=\"prof\" :options=\"prodata\"   filter optionLabel=\"label\" optionGroupLabel=\"label\" optionGroupChildren=\"items\" placeholder=\"Valitse ammattilainen\" class=\"w-full md:w-100rem\">\r\n\r\n            <template value=\"slotProps\" >\r\n              <div v-if=\"slotProps.value\" >\r\n                <!--              <img :alt=\"slotProps.value.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`mr-2 flag flag-${slotProps.value.code.toLowerCase()}`\" style=\"width: 18px\" />-->\r\n                <div >{{ slotProps.value.label }}</div>\r\n              </div>\r\n              <span v-else>\r\n              {{ slotProps.placeholder }}\r\n            </span>\r\n            </template>\r\n            <template  #optiongroup=\"slotProps\"  >\r\n              <div style=\"\" class=\"flex align-items-center\">\r\n                <!--              <img :alt=\"slotProps.option.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`mr-2 flag flag-${slotProps.option.code.toLowerCase()}`\" style=\"width: 18px\" />-->\r\n                <div >{{ slotProps.option.label }}</div>\r\n              </div>\r\n            </template>\r\n          </Dropdown>\r\n        </div>\r\n\r\n\r\n\r\n<!--        <select style=\"padding: 12px; width: 100%;\"  id=\"listOfProfessionals\" v-model=\"prof\">-->\r\n<!--          <option value=\"\">Valitse ammattilainen</option>-->\r\n<!--          <template v-for=\"option in prodata\">-->\r\n\r\n<!--            &lt;!&ndash; if the `group` property is truthy &ndash;&gt;-->\r\n<!--            <optgroup v-if=\"option.group\" :label=\"option.group\" :key=\"option.group\">-->\r\n<!--              <option v-for=\"opt in option.options\" :value=\"opt.label\" :key=\"opt.label\">-->\r\n<!--                {{ opt.label }}-->\r\n<!--              </option>-->\r\n<!--            </optgroup>-->\r\n<!--            &lt;!&ndash; otherwise &ndash;&gt;-->\r\n<!--            <option v-else :value=\"option\" :key=\"option.value\">-->\r\n<!--              {{ option.label }}-->\r\n<!--            </option>-->\r\n<!--          </template>-->\r\n\r\n<!--        </select>-->\r\n        <div :class=\"{hideDistSelectPanel: !isDistSelection}\">\r\n          <p style=\"text-align: left;\">Mikä aika kiinnoistaisi?</p>\r\n\r\n          <VueDatePicker\r\n              style=\"margin-bottom: 20px;\"\r\n              v-model=\"bookingDate\"\r\n              dark\r\n              :min-date=\"new Date()\"\r\n              teleport-center\r\n              @internal-model-change=\"handleInternalDate\"\r\n              @update:model-value=\"handleDate\"\r\n              :state=\"isNoDate ? false : null\"\r\n          >\r\n\r\n          </VueDatePicker>\r\n        </div>\r\n\r\n\r\n\r\n        <div  :class=\"{hideDistSelectPanel: !isDistSelection}\" style=\"padding-top: 10px;\">\r\n          <select style=\"padding: 12px; width: 100%; background-color: dimgrey; color: white;\" id=\"distance\" v-model=\"distBtw\" @click=\"filterByDistance\">\r\n            <option disabled value=\"0\">0 km ympärilläsi</option>\r\n            <option value=\"1\">1 km ympärilläsi</option>\r\n            <option value=\"2\">2 km ympärilläsi</option>\r\n            <option value=\"3\">3 km ympärilläsi</option>\r\n            <option value=\"4\">4 km ympärilläsi</option>\r\n            <option value=\"5\">5 km ympärilläsi</option>\r\n            <option value=\"6\">6 km ympärilläsi</option>\r\n            <option value=\"7\">7 km ympärilläsi</option>\r\n            <option value=\"8\">8 km ympärilläsi</option>\r\n            <option value=\"9\">9 km ympärilläsi</option>\r\n            <option value=\"10\">10 km ympärilläsi</option>\r\n            <option value=\"20\">20 km ympärilläsi</option>\r\n            <option value=\"30\">30 km ympärilläsi</option>\r\n            <option value=\"40\">40 km ympärilläsi</option>\r\n            <option value=\"50\">50 km ympärilläsi</option>\r\n            <option value=\"60\">60 km ympärilläsi</option>\r\n            <option value=\"70\">70 km ympärilläsi</option>\r\n            <option value=\"80\">80 km ympärilläsi</option>\r\n            <option value=\"90\">90 km ympärilläsi</option>\r\n            <option value=\"100\">100 km ympärilläsi</option>\r\n            <option value=\"200\">200 km ympärilläsi</option>\r\n            <option value=\"300\">300 km ympärilläsi</option>\r\n          </select>\r\n\r\n        </div>\r\n\r\n\r\n<!--        <h3-->\r\n<!--            :class=\"{activeClients: !isActiveProffs}\"-->\r\n<!--        >-->\r\n<!--          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua-->\r\n<!--        </h3>-->\r\n        <h3\r\n            v-if=\"prof\"\r\n            :class=\"{noClients: isActiveProffs}\"\r\n        >\r\n          Ei ammattilaisia vielä!\r\n        </h3>\r\n\r\n\r\n      </div>\r\n\r\n\r\n\r\n      <div v-if=\"isMapChat\" style=\"background-color: white; margin: auto; padding: 10px; width: 350px;  border: solid darkgrey\">\r\n        <p style=\"float: right; color: limegreen;\" @click=\"closeMapChat\">Valmis</p>\r\n        <chat-panel\r\n\r\n            :chatusers = chatusers\r\n            :messages =messages\r\n            :selecteduser = selecteduser\r\n            @select:user = selectUser\r\n            @noSelected = noSelectUser\r\n            @on:message = onMessage\r\n        />\r\n      </div>\r\n\r\n      <div class=\"map-info-table\" v-else-if=\"isTargetSelected && !isMapChat\" style=\"background-color: white; color: darkslategrey; padding: 10px; width: 90%; margin: auto;  border: solid darkgrey\">\r\n        <div style=\"display: flex; justify-content: right;\">\r\n          <p style=\" font-size: 15px; padding: 10px; color: green;\" @click=\"outFromMarkerPanel\">Valmis</p>\r\n        </div>\r\n\r\n        <table style=\"font-size: 14px; width: 100%; text-align: left;\">\r\n          <tbody>\r\n          <tr>\r\n            <td>\r\n              Yritys:\r\n            </td>\r\n            <td>\r\n              {{ this.target.yritys }}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              Y - tunnus:\r\n            </td>\r\n            <td>\r\n              {{this.target.ytunnus}}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              Työalue:\r\n            </td>\r\n            <td>\r\n              {{this.target.range ? this.target.range + \" km\" : \"Palvelun tarjous vain paikalla!\"}}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              Palvelun hinta:\r\n            </td>\r\n            <td>\r\n              {{this.target.priceByHour ? this.target.priceByHour + \" Euroa / tunti\": \"Urakkahinta sovittaessa!\"}}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              Saatu palaute:\r\n            </td>\r\n            <td>\r\n              <MDBIcon  style=\"padding: 10px; cursor: pointer;\" class=\"far fa-smile\" size=\"lg\"\r\n                        @click=\"negative\"></MDBIcon>\r\n\r\n\r\n              <MDBBadge color=\"success\" class=\"translate-middle p-1\"\r\n                        pill\r\n                        notification>\r\n                <p>{{this.target.rating.positive}}</p>\r\n              </MDBBadge>\r\n\r\n\r\n              <MDBIcon  style=\"padding: 10px; cursor: pointer;\" class=\"far fa-frown\" size=\"lg\"\r\n                        @click=\"negative\"></MDBIcon>\r\n\r\n\r\n\r\n              <MDBBadge color=\"danger\" class=\"translate-middle p-1\"\r\n                        pill\r\n                        notification>\r\n                <p>{{this.target.rating.negative}}</p>\r\n              </MDBBadge>\r\n            </td>\r\n          </tr>\r\n          <tr v-if=\"this.target.pro_link\">\r\n            <td>\r\n              Kotisivu\r\n            </td>\r\n            <td>\r\n              <a :href=\"'//' + this.target.pro_link\" target=\"_blank\">\r\n                Palveluntarjoajan kotisivu\r\n              </a>\r\n            </td>\r\n          </tr>\r\n          <tr v-if=\"target.user.id !== userId\">\r\n<!--            v-if=\"isCreatingChatPanel\"-->\r\n            <td colspan=\"2\">\r\n              <MDBBtn  block color=\"secondary\" size=\"lg\" @click=\"createChatPanel\">Chattailemaan</MDBBtn>\r\n            </td>\r\n          </tr>\r\n          <tr v-if=\"target.user.id !== userId && !isOrder\">\r\n            <td colspan=\"2\">\r\n              <MDBBtn  block color=\"success\" size=\"lg\" @click=\"createBooking\">Tee tilaus</MDBBtn>\r\n            </td>\r\n          </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n      </div>\r\n\r\n      <div v-if=\"isOrder\" class=\"order\">\r\n<!--        <p style=\"color: green; display: flex; justify-content: right; padding: 20px;\" @click=\"isOrder = false\">Valmis</p>-->\r\n        <div style=\"display: flex; justify-content: right; padding: 20px;\">\r\n          <MDBBtnClose\r\n            white\r\n            size=\"lg\"\r\n            @click=\"isOrder = false\"\r\n          />\r\n        </div>\r\n\r\n        <form @submit.prevent=\"confirmOrder\">\r\n          <p style=\"color: #00a6ff; text-align: left;\">Address: {{address}}</p>\r\n\r\n          <MDBInput\r\n              white\r\n              label=\"Anna otsiko\"\r\n              v-model=\"orderHeader\"\r\n              wrapperClass=\"mb-4\"\r\n          />\r\n\r\n          <p style=\"text-align: left;\">Missä ajalla haluaisit ammattilaista?</p>\r\n\r\n          <div style=\"color: #fff;\">\r\n            <VueDatePicker\r\n                style=\"margin-bottom: 20px;\"\r\n                v-model=\"orderDate\"\r\n                dark\r\n                :min-date=\"new Date()\"\r\n                teleport-center\r\n                @internal-model-change=\"handleInternalDate\"\r\n                :state=\"isNoDate ? false : null\"\r\n            >\r\n\r\n            </VueDatePicker>\r\n            <MDBTextarea\r\n                maxlength=\"70\"\r\n                label=\"Tehtävän kuvaus...\"\r\n                white\r\n                rows=\"2\"\r\n\r\n                v-model=\"orderDescription\"\r\n                invalidFeedback=\"Ole hyvä ja kirjoita tehtävän kuvaus.\"\r\n                validFeedback=\"Ok!\"\r\n                wrapperClass=\"mb-4\"\r\n            />\r\n            <span class=\"message-counter\">{{ orderDescription.length }} / 70</span>\r\n          </div>\r\n          <MDBBtn block type=\"submit\" color=\"success\">Tilaa</MDBBtn>\r\n        </form>\r\n\r\n      </div>\r\n\r\n\r\n\r\n<!--      <p style=\"color: red;\">selecteduser {{selecteduser}}</p>-->\r\n\r\n      <div v-if=\"!isTargetSelected\">\r\n        <div v-if=!isMainPanel >\r\n          <img :src=\"require(`@/assets/left_back.png`)\" alt=\"back\" style=\"float: right; padding: 10px;\" @click=\"returnToMainPanel\"/>\r\n\r\n<!--          <MDBIcon size=\"2x\" style=\"float: right; padding: 10px;\" @click=\"returnToMainPanel\">-->\r\n<!--            <i class=\"fas fa-expand-arrows-alt\"></i>-->\r\n<!--          </MDBIcon>-->\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n<!--      style=\"background-color:white; width: 40%; float: right;\"-->\r\n      <div v-if=\"!isMainPanel && countOfSelectedProfessional > 0 && !isTargetSelected\" style=\"background-color:white; width: 300px; margin: auto;\">\r\n        <div v-if=\"bookingDate\">\r\n          <p  style=\"color: blue; font-size: 14px; text-align: left; padding: 15px\">\r\n            Valittu aika: {{bookingDate.getDate() + \" / \" + (bookingDate.getMonth() + 1) + \" klo \" +  bookingDate.getHours() + \":\" + (bookingDate.getMinutes().length < 2 ? \"0\" + bookingDate.getMinutes() : bookingDate.getMinutes())}}\r\n          </p>\r\n          <p style=\"color: darkgreen; font-size: 17px; font-weight: bold; text-align: left; padding-left: 15px;\">Vihreä merkki - saatavilla </p>\r\n          <p style=\"color: darkorange; font-size: 17px ; font-weight: bold; text-align: left; padding-left: 15px;\">Oranssi merkki - sovitaessa </p>\r\n        </div>\r\n\r\n        <p style=\"color: #9fa6b2; font-size: 14px; text-align: left; padding: 15px; \">\r\n          Napsauta merkkiä nähdäksesi palveluntarjoajan!\r\n        </p>\r\n\r\n<!--        <p style=\"color: blue;\">-->\r\n<!--          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua-->\r\n<!--        </p>-->\r\n\r\n      </div>\r\n\r\n\r\n\r\n<!--      <MDBBtn color=\"dark\"-->\r\n<!--              v-if=\"isMainPanel\"-->\r\n<!--              size=\"lg\"-->\r\n<!--              block-->\r\n<!--              @click=\"receive\"-->\r\n<!--              style=\"position: relative; z-index:1; opacity: 1.2;\"-->\r\n<!--      >-->\r\n<!--        Tee uusi tilaus-->\r\n<!--      </MDBBtn>-->\r\n\r\n\r\n<!--      <MDBBtn color=\"danger\"-->\r\n<!--              v-if=\"isMainPanel\"-->\r\n<!--              size=\"lg\"-->\r\n<!--              block-->\r\n<!--              @click=\"$router.go(-1)\"-->\r\n<!--              style=\"position: relative; z-index:1; opacity: 1.0;\"-->\r\n<!--      >-->\r\n<!--        Poistu-->\r\n<!--      </MDBBtn>-->\r\n\r\n    </MDBContainer>\r\n<!--    <h3 style=\"margin-top: 50px;\">Kartta ladataan...</h3>-->\r\n<!--    <div class=\"spinner-border\" role=\"status\">-->\r\n<!--      <span class=\"visually-hidden\">Loading...</span>-->\r\n<!--    </div>-->\r\n<!--    <section id=\"map\"></section>-->\r\n\r\n    <div id=\"map\"></div>\r\n\r\n\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\n/*global google*/\r\nimport axios from 'axios'\r\nimport recipientService from '../service/recipients'\r\nimport providerService from '../service/providers'\r\nimport dt from '../components/controllers/datetime'\r\nimport {\r\n  MDBContainer,\r\n  MDBInput,\r\n  MDBBtn,\r\n  MDBBtnClose,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBIcon,\r\n  MDBBadge,\r\n  MDBTextarea\r\n} from \"mdb-vue-ui-kit\";\r\nimport distance from '../components/controllers/distance'\r\nimport gMap from '../components/location'\r\nimport proData from '@/components/profession/proList'\r\nimport chatPanel from '@/pages/LiveChat'\r\nimport VueDatePicker from '@vuepic/vue-datepicker';\r\nimport Dropdown from 'primevue/dropdown';\r\nimport '@/css/pro.css'\r\nimport socket from \"@/socket\";\r\nexport default {\r\n  name: \"recipient-public\",\r\n  props: {\r\n    userIsProvider: Object,\r\n    selecteduser: null,\r\n    chatusers: Array,\r\n    messages: Array,\r\n    isProviderLoggedIn: Boolean\r\n  },\r\n  components: {\r\n    chatPanel,\r\n    MDBContainer,\r\n    MDBInput,\r\n    MDBBtn,\r\n    MDBBtnClose,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBIcon,\r\n    MDBBadge,\r\n    MDBTextarea,\r\n    Dropdown,\r\n    VueDatePicker\r\n  },\r\n  data () {\r\n    return {\r\n      obj: null,\r\n      stateActive: false,\r\n      datetime: dt,\r\n      isOrder: false,\r\n      target: {}, // Selected provider from map\r\n      isTargetSelected: false,\r\n      isMainPanel: true,\r\n      isCreatingChatPanel: false,\r\n      prof: null,\r\n      username: null,\r\n      userId: null,\r\n      providerId: null,\r\n      address: null,\r\n      myLat: null,\r\n      mylng: null,\r\n      countOfSelectedProfessional: 0,\r\n      isActiveProffs: false,\r\n      isDistSelection: false,\r\n      professional: \"Automaalari\",\r\n      currentProfession: \"\",\r\n      distBtw: 1,\r\n      prodata: proData,\r\n      room: null,\r\n      isChatPanel: true,\r\n      isMapChat: false,\r\n      providers: [],\r\n\r\n      selectedProPosition: null,\r\n      bookingDate: null,\r\n      orderDate: null,\r\n      orderHeader: \"\",\r\n      orderDescription: \"\"\r\n    }\r\n  },\r\n  mounted () {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedAppUser')\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON)\r\n      this.username = user.username;\r\n      this.userId = user.id\r\n      //console.log(\"User token: \" + this.loggedUser.token)\r\n    }\r\n\r\n  // @media screen and (max-width: 480px) {\r\n  //     select{\r\n  //       /* Add your mobile only CSS here */\r\n  //     }\r\n  //   }\r\n  //\r\n  //   select {\r\n  //     /* Add your non-mobile CSS here */\r\n  //   }\r\n  //\r\n\r\n\r\n    this.resizeMap();\r\n\r\n    //console.log(\"Is provider in \" + this.isProviderLoggedIn)\r\n\r\n    //console.log(\"User id in providers \" + this.userId)\r\n\r\n    const myMarker = new google.maps.Marker({\r\n      icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\r\n    })\r\n\r\n    this.userCurrentLocation();\r\n\r\n    //const mapSearch = window.localStorage.getItem('mapSearchData')\r\n    // if (mapSearch) {\r\n    //   const data = JSON.parse(mapSearch)\r\n    //   console.log(\"Data+++ \" + data.profession);\r\n    //   this.currentProfession = data.profession;\r\n    //   this.distBtw = data.distance;\r\n    //   this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\r\n    // }\r\n\r\n    // const mapSearchPro = window.localStorage.getItem('mapSearchProData');\r\n    // if (mapSearchPro) {\r\n    //   const currentPro = JSON.parse(mapSearchPro);\r\n    //   console.log(\"Pro pos in map ---- \" + currentPro);\r\n    //   // console.log(\"User id --------- \" + currentPro.user.id)\r\n    //   this.isMainPanel = false;\r\n    //   this.openMarker(currentPro);\r\n    //\r\n    // }\r\n\r\n    //this.setProviderId()\r\n\r\n\r\n\r\n\r\n\r\n    // const selectProfession = document.getElementById(\"listOfProfessionals\")\r\n    //\r\n    // selectProfession.addEventListener(\"change\", (event) => {\r\n    //   this.isDistSelection = true;\r\n    //\r\n    //   console.log(\"Selected \" + event.target.value);\r\n    //\r\n    //   this.currentProfession = event.target.value;\r\n    //   this.showClientLocationOnTheMap(event.target.value, this.distBtw);\r\n    // })\r\n\r\n    // this.currentProfession = \"Automaalari\";\r\n    // this.distBtw = 20;\r\n    //\r\n    // this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\r\n\r\n    const selectDistance = document.getElementById\r\n    (\"distance\");\r\n\r\n    selectDistance.addEventListener(\"change\", (event) => {\r\n      this.distBtw = parseFloat(event.target.value);\r\n      this.stateActive = true;\r\n      const data = {\r\n        profession: this.currentProfession,\r\n        distance: parseFloat(event.target.value)\r\n      }\r\n\r\n      //window.localStorage.setItem('mapSearchData', JSON.stringify(data));\r\n\r\n      //console.log(\"+++++++++++ \" + this.countOfSelectedProfessional > 0)\r\n      this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\r\n\r\n    })\r\n\r\n\r\n\r\n    const input = document.getElementById(\"autocomplite\");\r\n\r\n    const center = { lat: 50.064192, lng: -130.605469 };\r\n    const defaultBounds = {\r\n      north: center.lat + 0.1,\r\n      south: center.lat - 0.1,\r\n      east: center.lng + 0.1,\r\n      west: center.lng - 0.1,\r\n    };\r\n    const options = {\r\n      bounds: defaultBounds,\r\n      componentRestrictions: { country: \"fi\" },\r\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\", \"formatted_address\"],\r\n      strictBounds: false,\r\n      //types: [\"establishment\"],\r\n    };\r\n    const autocomplete = new google.maps.places.Autocomplete(input, options);\r\n\r\n    autocomplete.addListener(\"place_changed\", () => {\r\n      let place = autocomplete.getPlace()\r\n      this.myLat = place.geometry.location.lat();\r\n      this.myLng = place.geometry.location.lng();\r\n\r\n      this.getAddressFrom(place.geometry.location.lat(), place.geometry.location.lng())\r\n      this.address = place.formatted_address;\r\n      console.log(\"Address xxxx \" + place.formatted_address)\r\n      console.log(\"place-----------\" + this.myLat)\r\n    });\r\n\r\n  },\r\n  methods: {\r\n    puhasta () {\r\n      console.log(\"Puhastatud\")\r\n      //window.localStorage.removeItem('mapSearchProData');\r\n    },\r\n    async handleDate () {\r\n      console.log(\"Date handled!\");\r\n      if (this.stateActive) {\r\n        const providers = await providerService.getProviders()\r\n        if (providers !== null) {\r\n          this.otherUserLocations(providers, this.currentProfession, this.distBtw);\r\n        }\r\n      }\r\n    },\r\n    // handleInternalDate () {\r\n    //   console.log(\"InternalDate!!!\")\r\n    // },\r\n    /*isNoDate () {\r\n      console.log(\"No date\")\r\n    },*/\r\n    changedProfession () {\r\n      console.log(\"Changed \" + this.prof.label);\r\n      this.showClientLocationOnTheMap(this.prof.label, this.distBtw);\r\n      this.currentProfession = this.prof.label;\r\n      this.isDistSelection = true;\r\n    },\r\n    selectUser(user) {\r\n      this.$emit('select:user', user);\r\n      //if (!user.self)\r\n      //this.selectedUser = user;\r\n    },\r\n\r\n    noSelectUser () {\r\n      this.$emit(\"noSelected\");\r\n    },\r\n    onMessage(content, blob, date) {\r\n\r\n      this.$emit(\"on:message\", content, blob, date);\r\n\r\n    },\r\n    resizeMap() {\r\n      var myMap = document.getElementById('map');\r\n      myMap.style.height = \"100%\";\r\n      myMap.style.width = \"100%\";\r\n    },\r\n    receive (){\r\n      this.$router.push('/rf')\r\n      //this.$router.push('recipient-form');\r\n\r\n    },\r\n    userCurrentLocation () {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n          const { latitude, longitude } = position.coords;\r\n          // Show a map centered at latitude / longitude.\r\n          this.myLat = latitude\r\n          this.myLng = longitude\r\n          this.showUserLocationOnTheMap (latitude, longitude)\r\n        });\r\n      }\r\n\r\n    },\r\n\r\n    pinSymbol(color) {\r\n      return {\r\n        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',\r\n        fillColor: color,\r\n        fillOpacity: 1,\r\n        strokeColor: '#000',\r\n        strokeWeight: 2,\r\n        scale: 1,\r\n        labelOrigin: {\r\n          x: 60,\r\n          y: -25\r\n        }\r\n      };\r\n    },\r\n    // Kasutaja sihtkoht, otsitakse automaatselt\r\n    showUserLocationOnTheMap (latitude, longitude) {\r\n\r\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\r\n        zoom: 13,\r\n        center: new google.maps.LatLng(latitude, longitude),\r\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n        accuracy: 50,\r\n\r\n      });\r\n\r\n      // new google.maps.Marker({\r\n      //   position: new google.maps.LatLng(latitude, longitude),\r\n      //   accuracy: 50,\r\n      //   map: map,\r\n      //   icon: this.pinSymbol('yellow'),\r\n      //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\r\n      // })\r\n      this.getAddressFrom (latitude, longitude)\r\n    },\r\n    // Siis kui sisestada käsitsi aadress\r\n    getAddressFrom (lat, long) {\r\n\r\n      axios.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat +\r\n          \",\" + long\r\n          + \"&key=\" + 'AIzaSyDt2YXE5tk0J72JgqnH3DTD7MeoqbbWBmU')\r\n          .then(response => {\r\n            if (response.data.error_message) {\r\n              this.error = response.data.error_message;\r\n\r\n              console.log(response.data.error_message)\r\n            } else {\r\n              const map = new google.maps.Map(document.getElementById(\"map\"), {\r\n                zoom: 13,\r\n                center: new google.maps.LatLng(lat, long),\r\n                mapTypeId: google.maps.MapTypeId.ROADMAP\r\n              });\r\n\r\n              // AIzaSyBDA2EBoGezJx51wQtxoW3Ecq5Ql8CCAiE\r\n\r\n              this.address = response.data.results[1].formatted_address\r\n            }\r\n\r\n          })\r\n          .catch(error => {\r\n            this.error = error.message\r\n            console.log(error.message)\r\n          })\r\n    },\r\n\r\n    distanceBtw (originLat, originLng, destLat, destLng) {\r\n      var origin = new google.maps.LatLng(originLat, originLng);\r\n      var destination = new google.maps.LatLng(destLat, destLng);\r\n      return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\r\n    },\r\n\r\n    datetimeFitting (to) {\r\n      let date;\r\n\r\n      if (this.bookingDate) {\r\n        let year = this.bookingDate.getFullYear();\r\n        let month = this.bookingDate.getMonth();\r\n        let day = this.bookingDate.getDate();\r\n        let hour = this.bookingDate.getHours();\r\n        let minute = this.bookingDate.getMinutes();\r\n\r\n        console.log(\"Booking date 2 \" + new Date(year, month, day, hour, minute));\r\n        date = new Date(year, month, day, hour, minute);\r\n      }\r\n\r\n      return this.datetime.providerMatchingForClient(\r\n          date,\r\n          {y: to.yearFrom, m: to.monthFrom, d: to.dayFrom, hour: to.hoursFrom, min: to.minutesFrom},\r\n          {y: to.yearTo, m: to.monthTo, d: to.dayTo, hour: to.hoursTo, min: to.minutesTo}\r\n      )\r\n    },\r\n\r\n    otherUserLocations (providers, profession, dist) {\r\n      let prev_infowindow = false;\r\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\r\n        zoom: 9,\r\n        center: new google.maps.LatLng(this.myLat, this.myLng),\r\n        mapTypeId: google.maps.MapTypeId.ROADMAP\r\n      });\r\n      console.log(\"Users count: \" + providers.length)\r\n      console.log(\"Current distance \" + dist)\r\n      let date;\r\n      if (this.bookingDate) {\r\n        let year = this.bookingDate.getFullYear();\r\n        let month = this.bookingDate.getMonth();\r\n        let day = this.bookingDate.getDate();\r\n        let hour = this.bookingDate.getHours();\r\n        let minute = this.bookingDate.getMinutes();\r\n\r\n        console.log(\"Booking date 2 \" + new Date(year, month, day, hour, minute));\r\n        date = new Date(year, month, day, hour, minute);\r\n      }\r\n\r\n       // new google.maps.Marker({\r\n       //   position: new google.maps.LatLng(this.myLat, this.myLng),\r\n       //   accuracy: 50,\r\n       //   map: map,\r\n       //   icon: this.pinSymbol('yellow'),\r\n       //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\r\n       // })\r\n      let count = 0;\r\n\r\n      if (providers.length > 0) {\r\n        this.target = {};\r\n\r\n        for (let pos = 0; pos < providers.length; pos++) {\r\n          console.log(\"------------ \" + providers[pos].yritys);\r\n          //console.log(\"Client latitude: \" + recipient[pos].latitude)\r\n          //console.log(\"Client longitude: \" + recipient[pos].longitude)\r\n          let myLatLong = [this.myLat, this.myLng];\r\n\r\n          providers[pos].profession.forEach(prof => {\r\n            if (prof === profession) {\r\n\r\n\r\n\r\n              //his.providers.push(providers[pos])\r\n              console.log(\"Pro \" + prof.yritys)\r\n              let providerLatLng = [providers[pos].latitude, providers[pos].longitude];\r\n              console.log(\"Distance btw \" + this.distanceBtw(this.myLat, this.myLng, providers[pos].latitude, providers[pos].longitude));\r\n\r\n              //distance.theDist()\r\n\r\n              //this.countOfSelectedClient++;\r\n              this.isActiveProffs = true;\r\n\r\n              if (this.distanceBtw(this.myLat, this.myLng, providers[pos].latitude, providers[pos].longitude) <= dist) {\r\n                count ++;\r\n\r\n                let marker;\r\n\r\n                if (providers[pos].timeoffer.length > 0) {\r\n                  providers[pos].timeoffer.map(time => {\r\n                    console.log(\"Year: \" + time.yearFrom)\r\n                    console.log(\"Fitting datetime: \" +\r\n                        this.datetime.providerMatchingForClient(\r\n                            date,\r\n                            {y: time.yearFrom, m: time.monthFrom, d: time.dayFrom, hour: time.hoursFrom, min: time.minutesFrom},\r\n                            {y: time.yearTo, m: time.monthTo, d: time.dayTo, hour: time.hoursTo, min: time.minutesTo}\r\n                        )\r\n\r\n                    )\r\n\r\n                    if (this.datetime.providerMatchingForClient(\r\n                        date,\r\n                        {y: time.yearFrom, m: time.monthFrom, d: time.dayFrom, hour: time.hoursFrom, min: time.minutesFrom},\r\n                        {y: time.yearTo, m: time.monthTo, d: time.dayTo, hour: time.hoursTo, min: time.minutesTo}\r\n                    )) {\r\n\r\n                      marker = new google.maps.Marker({\r\n                        position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\r\n                        accuracy: 50,\r\n                        map: map,\r\n                        icon: this.pinSymbol('green'),\r\n                        label: { color: '#79f759',  fontWeight: 'bold', fontSize: '14px', text: \"Saatavilla!\"}\r\n                      })\r\n                    } else {\r\n\r\n                      marker = new google.maps.Marker({\r\n                        position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\r\n                        accuracy: 50,\r\n                        map: map,\r\n                        icon: this.pinSymbol('orange'),\r\n                        label: { color: '#f79859',  fontWeight: 'bold', fontSize: '14px', text: \"Sovitaessa!\"}\r\n                      })\r\n\r\n                    }\r\n                  })\r\n                } else {\r\n                  marker = new google.maps.Marker({\r\n                    position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\r\n                    accuracy: 50,\r\n                    map: map,\r\n                    icon: this.pinSymbol('orange'),\r\n                    label: { color: '#f79859',  fontWeight: 'bold', fontSize: '14px', text: \"Sovitaessa!\"}\r\n                  })\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n                // if (this.isTargetSelected) {\r\n                //\r\n                //   marker = new google.maps.Marker({\r\n                //     position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\r\n                //     accuracy: 50,\r\n                //     map: map,\r\n                //     icon: this.pinSymbol('orange'),\r\n                //     label: { color: '#f75959',  fontWeight: 'bold', fontSize: '14px', text: 'TMI ' + providers[pos].yritys + \" Test\"}\r\n                //   })\r\n                // } else {\r\n                //\r\n                //   marker = new google.maps.Marker({\r\n                //     position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\r\n                //     accuracy: 50,\r\n                //     map: map\r\n                //   })\r\n                //\r\n                // }\r\n\r\n\r\n\r\n                // marker = new google.maps.Marker({\r\n                //   position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\r\n                //   accuracy: 50,\r\n                //   map: map,\r\n                //   icon: this.pinSymbol('orange'),\r\n                //   label: { color: '#f75959',  fontWeight: 'bold', fontSize: '14px', text: 'TMI ' + providers[pos].yritys + \" Test\"}\r\n                // })\r\n\r\n                // this.target = providers[pos];\r\n                // this.room = providers[pos].yritys + this.username;\r\n\r\n                window.myGlobalFunction = this.openMarker;\r\n\r\n\r\n                const content = \"class='map-info-window'\"\r\n\r\n\r\n\r\n                const infowindow = new google.maps.InfoWindow({\r\n                  //content: \"Hei hei!\"\r\n                  //content:'<p id=\"map-info-window\">Hello World!</p>'\r\n                  //content: \"TMI: \" + providers[pos].yritys\r\n                });\r\n\r\n                google.maps.event.addListener(marker, 'click', function() {\r\n                  //infowindow.setContent(content);\r\n\r\n\r\n                  console.log(\"POOOOS \" + pos)\r\n                  let p = pos\r\n\r\n                  if( prev_infowindow ) {\r\n                    prev_infowindow.close();\r\n                  }\r\n\r\n                  prev_infowindow = infowindow;\r\n\r\n\r\n                  infowindow.open(map,marker);\r\n\r\n                  infowindow.setContent(\"<div  class='map-info-window'>\" + '<p style=\"color: green; \">'+providers[pos].yritys+'</p>' + '<p style=\"color: red; \" onclick=\"myGlobalFunction('+ p +' )\">Tiedot</p>' + \"</div>\")\r\n\r\n                });\r\n\r\n                console.log(\"Prev infowondow \" + prev_infowindow)\r\n\r\n              }\r\n\r\n            }\r\n          })\r\n\r\n        }\r\n\r\n\r\n        if (count > 0) {\r\n          this.isActiveProffs = true;\r\n          this.isMainPanel = false;\r\n\r\n        } else {\r\n          this.isActiveProffs = false;\r\n        }\r\n        this.countOfSelectedProfessional = count;\r\n        console.log(\"countxx \" + count)\r\n        this.identifyProfText();\r\n        //console.log(\"Count \" + this.countOfSelectedClients)\r\n\r\n      }\r\n\r\n    },\r\n\r\n    handleInitChat (isActive, bookingId, counter, isCounter) {\r\n      if (this.target.user.username !== this.username) {\r\n        const room = this.target.yritys + this.username;\r\n        //console.log(\"Username in map: \" + this.target.user.username);\r\n        //console.log(\"Room in map \" + this.room);\r\n\r\n        const createChatRoom = {\r\n          status: \"map\",\r\n          useCounter: isCounter,\r\n          isActive: isActive,\r\n          bookingID: bookingId,\r\n          same_room_counter: counter,\r\n          isOnline: true,\r\n          room: this.room,\r\n          pro: this.target.yritys,\r\n          username: this.username,\r\n          bookerUsername: this.username,\r\n          bookerID: this.userId,\r\n          providerUsername: this.target.user.username,\r\n          providerID: this.target.user.id\r\n        }\r\n        const chatCredentials = {\r\n          useCounter: isCounter,\r\n          isActive: isActive,\r\n          bookingID: bookingId,\r\n          same_room_counter: counter,\r\n          room: this.room,\r\n          proID: this.target.user.id,\r\n          pro: this.target.yritys,\r\n          // userID: this.target.user.id,\r\n          // username: this.target.user.username\r\n          userID: this.userId,\r\n          username:this.username\r\n        }\r\n        //this.$emit(\"chatCredentials\", chatCredentials);\r\n\r\n        this.$emit(\"initializeChat\", {\r\n          initChatRoom: createChatRoom,\r\n          chatData: chatCredentials\r\n        });\r\n\r\n      }\r\n    },\r\n\r\n    createChatPanel () {\r\n      // if (this.target.user.username !== this.username) {\r\n      //   const room = this.target.yritys + this.username;\r\n      //   console.log(\"Username in map: \" + this.target.user.username);\r\n      //   console.log(\"Room in map \" + this.room);\r\n      //   // Room users in server will be created\r\n      //   socket.emit(\"create room users\", {\r\n      //     room: this.room,\r\n      //     pro: this.target.yritys,\r\n      //     status: \"map\",\r\n      //     username: this.username,\r\n      //     providerUsername: this.target.user.username,\r\n      //     providerID: this.target.user.id\r\n      //   })\r\n      //   const chatCredentials = {\r\n      //     room: this.room,\r\n      //     userID: this.target.user.id,\r\n      //     username: this.target.user.username\r\n      //   }\r\n      //   this.$emit(\"chatCredentials\", chatCredentials);\r\n      // }\r\n      this.handleInitChat(false, \"0\", 0, true);\r\n      this.isMapChat = true\r\n    },\r\n\r\n    async openMarker (p) {\r\n      console.log(\"Booking date \" + new Date(this.bookingDate));\r\n      const d = this.bookingDate;\r\n\r\n\r\n      //this.noSelectUser();\r\n      //console.log(\"Profession \" + this.currentProfession);\r\n      console.log(\"Pro profession \" )\r\n      const pro = [this.currentProfession]\r\n      // if (this.target.user.username !== this.username) {\r\n      //   this.room = this.target.yritys + this.username;\r\n      // }\r\n\r\n\r\n      const providersMatchingProSearch = await providerService.getProvidersMatchingByProfession({result: pro});\r\n\r\n      let dataForward = [];\r\n\r\n      providersMatchingProSearch.forEach(pms => {\r\n\r\n        console.log(\"Results: \" + pms.user.id);\r\n        let distance = parseInt(this.distanceBtw(this.myLat, this.myLng, pms.latitude, pms.longitude)).toFixed(0)\r\n        console.log(\"Distance to display \" + distance);\r\n        dataForward = dataForward.concat({\r\n          id: pms.user.id,\r\n          dist: distance,\r\n          pro: this.currentProfession\r\n        })\r\n      })\r\n\r\n      socket.emit(\"map search report\", dataForward);\r\n\r\n      const providers = await providerService.getProviders()\r\n      if (providers) {\r\n        //console.log(\"watcher position \" + this.myLat + \" / \" + this.myLng);\r\n        if (providers[p].user.username !== this.username) {\r\n          this.isCreatingChatPanel = true\r\n        }\r\n\r\n        console.log(\"Room in client map: \" + this.room);\r\n\r\n        this.target = providers[p];\r\n        //window.localStorage.setItem('mapSearchProData', JSON.stringify(p));\r\n        if (this.username) {\r\n          this.room = this.target.yritys + this.username;\r\n        } else {\r\n          this.room = \"nipitiri\";\r\n        }\r\n        this.isTargetSelected = true;\r\n        //console.log(\"Pooooos ---- \" + p);\r\n        //this.otherUserLocations(providers, this.currentProfession, this.distBtw)\r\n      }\r\n\r\n    },\r\n    createBooking () {\r\n      console.log(\"Here you can make an order! \" + this.address)\r\n      this.isOrder = true;\r\n    },\r\n\r\n\r\n    async confirmOrder () {\r\n      //console.log(\"Order, target id \" + this.target.id);\r\n      let recipient;\r\n      if (this.orderDate) {\r\n        let year = this.orderDate.getFullYear();\r\n        let month = this.orderDate.getMonth();\r\n        let day = this.orderDate.getDate();\r\n        let hour = this.orderDate.getHours();\r\n        let minute = this.orderDate.getMinutes();\r\n        const dateForMs = new Date(year, month, day, hour, minute).getTime();\r\n\r\n        recipient = {\r\n          created: this.orderDate,\r\n          created_ms: dateForMs,\r\n          header: this.orderHeader,\r\n          address: this.address,\r\n          latitude: this.myLat,\r\n          longitude: this.myLng,\r\n          professional: this.currentProfession,\r\n          isIncludeOffers: false,\r\n          year: this.orderDate.getFullYear(),\r\n          month: this.orderDate.getMonth(),\r\n          day: this.orderDate.getDate(),\r\n          hours: this.orderDate.getHours(),\r\n          minutes: this.orderDate.getMinutes(),\r\n          description: this.orderDescription,\r\n          status: \"notSeen\",\r\n          ordered: this.target.id\r\n        }\r\n\r\n\r\n      }\r\n      console.log(\"Address: \" + this.address);\r\n      const booking = await recipientService.addRecipient(this.userId, recipient)\r\n\r\n\r\n\r\n      //const room = this.target.yritys + this.username;\r\n      const proBooking = await recipientService.getBookingById(booking.id);\r\n      await recipientService.addProviderData(booking.id, this.target.id);\r\n      const bookingToProvider = await providerService.addProviderBooking(this.target.id, booking.id);\r\n      if (bookingToProvider === \"Recipient is added!\") {\r\n        console.log(\"Iiiiisss \" + (this.target.yritys + this.username))\r\n        const room = this.target.yritys + this.username;\r\n        const chatUserDataNavbar = {\r\n          status: \"\",\r\n          userID: this.target.user.id,\r\n          name: this.target.user.username,\r\n          room: room\r\n        };\r\n\r\n\r\n        //this.handleInitChat(false, booking.id, true);\r\n\r\n\r\n        // const chatCredentials = {\r\n        //   room: this.room,\r\n        //   pro: this.target.yritys,\r\n        //   userID: this.target.user.id,\r\n        //   username: this.target.user.username\r\n        // }\r\n        // this.$emit(\"chatCredentials\", chatCredentials);\r\n\r\n        //this.$emit('client:confirmed_provider', this.target.id, booking, chatUserDataNavbar);\r\n      }\r\n\r\n\r\n\r\n      const id = this.target.user.id;\r\n      this.$emit('booking_map:update', booking)\r\n      socket.emit(\"accept provider\", {\r\n        id,\r\n        booking: proBooking,\r\n      })\r\n      this.$router.push('/received')\r\n    },\r\n\r\n    async outFromMarkerPanel () {\r\n      this.isTargetSelected = false\r\n      //this.isMainPanel = true;\r\n      this.noSelectUser();\r\n      //window.localStorage.removeItem('mapSearchProData');\r\n      const providers = await providerService.getProviders()\r\n      if (providers !== null) {\r\n        this.otherUserLocations(providers, this.currentProfession, this.distBtw);\r\n      }\r\n    },\r\n\r\n    closeMapChat () {\r\n      this.isMapChat = false\r\n    },\r\n\r\n    async returnToMainPanel () {\r\n      this.isMainPanel = true;\r\n      //window.localStorage.removeItem('mapSearchData')\r\n      this.noSelectUser();\r\n\r\n      // const providers = await providerService.getProviders()\r\n      // if (providers !== null) {\r\n      //   this.otherUserLocations(providers, \"\", \"\");\r\n      // }\r\n      //this.currentProfession = \"\"\r\n      // this.prof = \"\";\r\n      // this.distBtw = 0\r\n    },\r\n\r\n    closeMainPanel () {\r\n      this.isMainPanel = false;\r\n      this.noSelectUser();\r\n      console.log(\"Close main panel\")\r\n    },\r\n\r\n    // renderClients (event) {\r\n    //   console.log(\"Event value \" + event.target.value)\r\n    //   //this.countOfSelectedClients = 0;\r\n    //\r\n    //   if (event.target.value) {\r\n    //     // @click=\"renderClients($event)\"\r\n    //     this.showClientLocationOnTheMap(event.target.value)\r\n    //\r\n    //   }\r\n    //   this.prof = event.target.value\r\n    //\r\n    //   event.target.value = \"\"\r\n    //\r\n    // },\r\n\r\n\r\n    async showClientLocationOnTheMap (profession, dist) {\r\n\r\n      console.log(\"Current distance herexx  \" + dist)\r\n      const providers = await providerService.getProviders()\r\n      if (providers !== null) {\r\n        this.otherUserLocations(providers, profession, dist);\r\n      }\r\n\r\n    },\r\n    identifyProfText () {\r\n      if (this.countOfSelectedProfessional > 1) {\r\n        this.professional = \"ammattilaista\"\r\n      } else {\r\n        this.professional = \"ammattilainen\"\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.ui.button,\r\n.dot.circle {\r\n  background-color: #ff5a5f;\r\n  color: white;\r\n}\r\n\r\n\r\n\r\n.pac-icon {\r\n  display: none;\r\n}\r\n.pac-item {\r\n  padding: 10px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n}\r\n.pac-item:hover {\r\n  background-color: #ececec;\r\n}\r\n.pac-item-query {\r\n  font-size: 16px;\r\n}\r\n.spinner-border {\r\n\r\n}\r\n\r\n\r\n#map {\r\n  background:  url(/src/assets/map.gif)  no-repeat center center;\r\n\r\n}\r\n\r\n#map {\r\n   position: absolute;\r\n\r\n  /*height: 500px; !* The height is 400 pixels *!*/\r\n  /*width: 100%; !* The width is the width of the web page *!*/\r\n\r\n   top: 120px;\r\n   right: 0;\r\n   bottom: 0;\r\n   left: 0;\r\n }\r\n\r\n.map-info-window {\r\n  /*width: 200px;*/\r\n\r\n}\r\n\r\n#panel {\r\n  margin-top: 10px;\r\n}\r\n\r\n@media only screen and (max-width: 1000px) {\r\n  #panel {\r\n    display: none !important;\r\n\r\n  }\r\n}\r\n\r\n.activeClients {\r\n  display: none !important;\r\n}\r\n.noClients {\r\n  display: none !important;\r\n}\r\n.hideDistSelectPanel {\r\n  display: none !important;\r\n}\r\n.hideMainPanel {\r\n  display: none !important;\r\n}\r\nh3 {\r\n  padding: 10px;\r\n  color: #0095ff;\r\n}\r\n.minmax-icon {\r\n  padding: 12px;\r\n}\r\n\r\n.map-info-table  td {\r\n  border: 1px solid blue;\r\n  padding: 5px;\r\n}\r\n\r\n.order{\r\n  color:yellow;\r\n\r\n  /*background-color:rgba(255, 0, 0, 0.5);*/\r\n  /*background-color:#221a16;*/\r\n  background-color: #434240;\r\n  /*opacity: 0.2  ;*/\r\n  /*height:300px;*/\r\n  width:90%;\r\n  margin: auto;\r\n  padding: 14px;\r\n  /*display:flex;*/\r\n  /*align-items:center;*/\r\n  /*justify-content:center;*/\r\n\r\n\r\n  /*top: 50vh; left: 50vw; transform: translate(-50%, -50%);*/\r\n  /*top: 50vh; left: 50vw; transform: translate(-50%, -50%);*/\r\n  position:relative;\r\n  /*bottom:5px;*/\r\n  /*right:5px;*/\r\n}\r\n\r\n</style>","import { render } from \"./RecipientPublic.vue?vue&type=template&id=4ae38283\"\nimport script from \"./RecipientPublic.vue?vue&type=script&lang=js\"\nexport * from \"./RecipientPublic.vue?vue&type=script&lang=js\"\n\nimport \"./RecipientPublic.vue?vue&type=style&index=0&id=4ae38283&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["compare","rec","prov","receiverDate","Date","y","m","d","hour","min","providerDate","providerMatchingForClient","re","pFrom","pTo","pFromDate","pToDate","style","id","value","key","class","colspan","_createElementBlock","_createVNode","_component_MDBContainer","default","_withCtx","_createElementVNode","_normalizeClass","hideMainPanel","$data","isMainPanel","_hoisted_1","_component_MDBIcon","size","onClick","$options","closeMainPanel","_cache","_","_component_MDBBtnClose","white","$event","_ctx","$router","go","_hoisted_2","_component_MDBInput","label","modelValue","address","wrapperClass","_hoisted_3","_component_Dropdown","onChange","changedProfession","prof","options","prodata","filter","optionLabel","optionGroupLabel","optionGroupChildren","placeholder","optiongroup","slotProps","_hoisted_7","_toDisplayString","option","_hoisted_4","_hoisted_5","_hoisted_6","hideDistSelectPanel","isDistSelection","_component_VueDatePicker","bookingDate","handleDate","dark","onInternalModelChange","handleInternalDate","state","isNoDate","distBtw","args","filterByDistance","disabled","noClients","isActiveProffs","_createCommentVNode","isMapChat","_hoisted_8","closeMapChat","_component_chat_panel","chatusers","$props","messages","selecteduser","selectUser","onNoSelected","noSelectUser","onMessage","isTargetSelected","_hoisted_9","_hoisted_10","outFromMarkerPanel","_hoisted_11","target","yritys","ytunnus","range","this","priceByHour","negative","_component_MDBBadge","color","pill","notification","rating","positive","pro_link","_hoisted_12","href","_hoisted_13","user","userId","_hoisted_14","_hoisted_15","_component_MDBBtn","block","createChatPanel","_createTextVNode","isOrder","_hoisted_16","_hoisted_17","createBooking","_hoisted_18","_hoisted_19","onSubmit","_withModifiers","confirmOrder","_hoisted_20","orderHeader","_hoisted_21","orderDate","_component_MDBTextarea","maxlength","rows","orderDescription","invalidFeedback","validFeedback","_hoisted_22","length","type","_hoisted_23","_hoisted_24","src","require","alt","returnToMainPanel","_hoisted_25","countOfSelectedProfessional","_hoisted_26","_hoisted_27","_hoisted_28","getDate","getMonth","getHours","getMinutes","name","props","userIsProvider","Object","Array","isProviderLoggedIn","Boolean","components","chatPanel","MDBContainer","MDBInput","MDBBtn","MDBBtnClose","MDBRow","MDBCol","MDBIcon","MDBBadge","MDBTextarea","Dropdown","VueDatePicker","data","obj","stateActive","datetime","dt","isCreatingChatPanel","username","providerId","myLat","mylng","professional","currentProfession","proData","room","isChatPanel","providers","selectedProPosition","mounted","loggedUserJSON","window","localStorage","getItem","JSON","parse","resizeMap","google","maps","Marker","icon","userCurrentLocation","selectDistance","document","getElementById","addEventListener","event","parseFloat","showClientLocationOnTheMap","input","center","lat","lng","defaultBounds","north","south","east","west","bounds","componentRestrictions","country","fields","strictBounds","autocomplete","places","Autocomplete","addListener","place","getPlace","geometry","location","myLng","getAddressFrom","formatted_address","console","log","methods","puhasta","providerService","getProviders","otherUserLocations","$emit","content","blob","date","myMap","height","width","receive","push","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","showUserLocationOnTheMap","pinSymbol","path","fillColor","fillOpacity","strokeColor","strokeWeight","scale","labelOrigin","x","Map","zoom","LatLng","mapTypeId","MapTypeId","ROADMAP","accuracy","long","axios","get","then","response","error_message","error","results","catch","message","distanceBtw","originLat","originLng","destLat","destLng","origin","destination","spherical","computeDistanceBetween","toFixed","datetimeFitting","to","year","getFullYear","month","day","minute","yearFrom","monthFrom","dayFrom","hoursFrom","minutesFrom","yearTo","monthTo","dayTo","hoursTo","minutesTo","profession","dist","prev_infowindow","map","count","pos","forEach","marker","timeoffer","time","fontWeight","fontSize","text","myGlobalFunction","openMarker","infowindow","InfoWindow","p","close","open","setContent","identifyProfText","handleInitChat","isActive","bookingId","counter","isCounter","createChatRoom","status","useCounter","bookingID","same_room_counter","isOnline","pro","bookerUsername","bookerID","providerUsername","providerID","chatCredentials","proID","userID","initChatRoom","chatData","providersMatchingProSearch","getProvidersMatchingByProfession","result","dataForward","pms","distance","parseInt","concat","socket","emit","recipient","dateForMs","getTime","created","created_ms","header","isIncludeOffers","hours","minutes","description","ordered","booking","recipientService","addRecipient","proBooking","getBookingById","addProviderData","bookingToProvider","addProviderBooking","__exports__","render"],"sourceRoot":""}