{"version":3,"file":"js/246.2da54992.js","mappings":"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","sources":["webpack://prore-mongo/./src/components/controllers/distance.js","webpack://prore-mongo/./src/components/profession/proList.js","webpack://prore-mongo/./src/pages/RecipientPublic.vue","webpack://prore-mongo/./src/pages/RecipientPublic.vue?a5fc"],"sourcesContent":["/*global google*/\nlet res = \"\";\nconst distance = () => {\n    //let text = \"\";\n    //let value = 0;\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\n    var service = new google.maps.DistanceMatrixService();\n    service.getDistanceMatrix(\n        {\n            origins: [origin],\n            destinations: [destination],\n            travelMode: 'DRIVING',\n            unitSystem: google.maps.UnitSystem.METRIC,\n            durationInTraffic: true,\n            avoidHighways: false,\n            avoidTolls: false\n        }, response_data);\n    //return response_data;\n}\n\nconst response_data = (responseDis, status) => {\n    //let result = \"\";\n    if (status !== google.maps.DistanceMatrixStatus.OK || status !== \"OK\"){\n        console.log('Error:', status);\n        // OR\n        alert(status);\n    }else{\n        //alert(responseDis.rows[0].elements[0].distance.text);\n        console.log(\"Distance \" + responseDis.rows[0].elements[0].distance.text)\n\n        res = responseDis.rows[0].elements[0].distance.text;\n        return \"aaaaaaaaaaaaa\"\n        //result = responseDis.rows[0].elements[0].distance.text;\n    }\n    //return  \"Hallo\"        //result.toString();\n}\n\nconst test = () => {\n    console.log(\"Is it working??\" + res)\n\n    return  <div>Hiiii</div>;\n}\n\nconst theDist = () => {\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\n    return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n}\n\n// function calcDistance() {\n//     // var origin = new google.maps.LatLng(60.233093,24.7531362);\n//     // var destination = new google.maps.LatLng(60.2767265,24.8575089);\n//     // return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n//\n//     var directionsService = new google.maps.DirectionsService();\n//\n//     var request = {\n//         origin      : 'Melbourne VIC', // a city, full address, landmark etc\n//         destination : 'Sydney NSW',\n//         travelMode  : google.maps.DirectionsTravelMode.DRIVING\n//     };\n//\n//     directionsService.route(request, function(response, status) {\n//         if ( status === google.maps.DirectionsStatus.OK ) {\n//             alert( response.routes[0].legs[0].distance.value ) ; // the distance in metres\n//         }\n//         else {\n//             // oops, there's no route between these two locations\n//             // every time this happens, a kitten dies\n//             // so please, ensure your address is formatted properly\n//         }\n//     });\n// }\n\nexport default { distance, test, theDist }","// const list = [\r\n//     \"Siivooja\",\r\n//     \"Hitsaaja\",\r\n//     \"Bussikuski\"\r\n// ]\r\n\r\nconst construction = [\r\n    {\"label\": \"Hitsaaja\", \"value\": \"1\"},\r\n    {\"label\": \"Putkimies\", \"value\": \"2\"},\r\n    {\"label\": \"Sähkömies\", \"value\": \"3\"}\r\n]\r\nconst realEstate = [\r\n    {\"label\": \"Siivooja\", \"value\": \"4\"}\r\n]\r\n\r\n// const options = [\r\n//     {\"group\":\"Fruits\",\"options\":[{\"label\":\"Apple\",\"value\":\"f-1\"},{\"label\":\"Banana\",\"value\":\"f-2\"},{\"label\":\"Orange\",\"value\":\"f-3\"}]},\r\n//     {\"label\":\"Chocolate\",\"value\":\"m-1\"},\r\n//     {\"label\":\"Cake\",\"value\":\"m-2\"},\r\n//     {\"group\": \"Construction\", \"options\": construction},\r\n//     {\"group\":\"Vegetables\",\"options\":[{\"label\":\"Cabbage\",\"value\":\"v-1\"},{\"label\":\"Tomato\",\"value\":\"v-2\"}]},\r\n//     {\"label\":\"Puddin\",\"value\":\"m-3\"}\r\n// ]\r\n\r\nconst options = [\r\n    {\"group\": \"Rakennus\", \"options\": construction},\r\n    {\"group\": \"Kiinteistöala\", \"options\": realEstate}\r\n]\r\n\r\n\r\n\r\nexport default options;","<template>\n  <div>\n\n\n\n    <MDBContainer\n\n        style=\"position: relative; z-index: 1;\n        width: 70%;\n        padding-top: 80px;\n        opacity: 0.8;\n        \"\n    >\n\n\n\n\n\n      <div :class=\"{hideMainPanel: !isMainPanel}\" style=\"background-color: white; padding: 10px;\">\n        <div style=\"display: flex; justify-content: right;\">\n          <MDBIcon size=\"lg\" style=\"padding: 10px;\" @click=\"closeMainPanel\">\n            <i class=\"fas fa-compress-arrows-alt\"></i>\n          </MDBIcon>\n          <div>\n            <MDBBtnClose\n                style=\" padding: 10px;\"\n                size=\"lg\"\n                @click=\"$router.go(-1)\"\n            />\n          </div>\n\n\n\n        </div>\n\n        <MDBBtn color=\"secondary\"\n                v-if=\"isMainPanel\"\n                size=\"lg\"\n                block\n                @click=\"receive\"\n                style=\"position: relative; z-index:1; opacity: 1.2; margin-bottom: 10px;\"\n        >\n          Tee uusi tilaus\n        </MDBBtn>\n\n        <div id=\"test\">\n          <MDBInput\n              label=\"Anna osoitteesi kun ei täsmää\"\n              v-model=\"address\"\n              id=\"autocomplite\"\n              size=\"lg\"\n              wrapperClass=\"mb-4\"\n          />\n        </div>\n\n\n        <select style=\"padding: 12px; width: 100%;\"  id=\"listOfProfessionals\" v-model=\"prof\">\n          <option value=\"\">Valitse ammattilainen</option>\n          <template v-for=\"option in prodata\">\n\n            <!-- if the `group` property is truthy -->\n            <optgroup v-if=\"option.group\" :label=\"option.group\" :key=\"option.group\">\n              <option v-for=\"opt in option.options\" :value=\"opt.label\" :key=\"opt.label\">\n                {{ opt.label }}\n              </option>\n            </optgroup>\n            <!-- otherwise -->\n            <option v-else :value=\"option\" :key=\"option.value\">\n              {{ option.label }}\n            </option>\n          </template>\n\n        </select>\n\n        <div  :class=\"{hideDistSelectPanel: !isDistSelection}\" style=\"padding-top: 10px;\">\n          <select style=\"padding: 12px; width: 100%;\" id=\"distance\" v-model=\"distBtw\" @click=\"filterByDistance\">\n            <option disabled value=\"1\">1 kilometriä ympärilläsi</option>\n            <option value=\"2\">2 km ympärilläsi</option>\n            <option value=\"3\">3 km ympärilläsi</option>\n            <option value=\"4\">4 km ympärilläsi</option>\n            <option value=\"5\">5 km ympärilläsi</option>\n            <option value=\"6\">6 km ympärilläsi</option>\n            <option value=\"7\">7 km ympärilläsi</option>\n            <option value=\"8\">8 km ympärilläsi</option>\n            <option value=\"9\">9 km ympärilläsi</option>\n            <option value=\"10\">10 km ympärilläsi</option>\n            <option value=\"20\">20 km ympärilläsi</option>\n            <option value=\"30\">30 km ympärilläsi</option>\n            <option value=\"40\">40 km ympärilläsi</option>\n            <option value=\"50\">50 km ympärilläsi</option>\n            <option value=\"60\">60 km ympärilläsi</option>\n            <option value=\"70\">70 km ympärilläsi</option>\n            <option value=\"80\">80 km ympärilläsi</option>\n            <option value=\"90\">90 km ympärilläsi</option>\n            <option value=\"100\">100 km ympärilläsi</option>\n            <option value=\"200\">200 km ympärilläsi</option>\n            <option value=\"300\">300 km ympärilläsi</option>\n          </select>\n\n        </div>\n\n\n<!--        <h3-->\n<!--            :class=\"{activeClients: !isActiveProffs}\"-->\n<!--        >-->\n<!--          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua-->\n<!--        </h3>-->\n        <h3\n            v-if=\"prof\"\n            :class=\"{noClients: isActiveProffs}\"\n        >\n          Ei ammattilaisia vielä!\n        </h3>\n\n\n      </div>\n\n\n\n\n\n\n\n\n      <div class=\"map-info-table\" v-if=\"isTargetSelected\" style=\"background-color: white; padding: 10px; width: 95%;  border: solid darkgrey\">\n        <div style=\"display: flex; justify-content: right;\">\n          <p style=\"margin-right: 10px; margin-left: auto; font-size: 15px; padding: 10px; color: orangered;\" @click=\"outFromMarkerPanel\">Valmis</p>\n        </div>\n\n        <table style=\"font-size: 14px; width: 100%; text-align: left;\">\n          <tbody>\n          <tr>\n            <td>\n              Yritys:\n            </td>\n            <td>\n              {{ this.target.yritys }}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Y - tunnus:\n            </td>\n            <td>\n              {{this.target.ytunnus}}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Työalue:\n            </td>\n            <td>\n              {{this.target.range ? this.target.range : \"Palvelun tarjous vain paikalla!\"}}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Tuntihinta:\n            </td>\n            <td>\n              {{ this.target.priceByHour }} Euroa\n            </td>\n          </tr>\n          <tr>\n            <td>\n              palaute:\n            </td>\n            <td>\n              <MDBIcon  style=\"padding: 10px; cursor: pointer;\" class=\"far fa-smile\" size=\"lg\"\n                        @click=\"negative\"></MDBIcon>\n\n\n              <MDBBadge color=\"success\" class=\"translate-middle p-1\"\n                        pill\n                        notification>\n                <p>{{this.target.rating.positive}}</p>\n              </MDBBadge>\n\n\n              <MDBIcon  style=\"padding: 10px; cursor: pointer;\" class=\"far fa-frown\" size=\"lg\"\n                        @click=\"negative\"></MDBIcon>\n\n\n\n              <MDBBadge color=\"danger\" class=\"translate-middle p-1\"\n                        pill\n                        notification>\n                <p>{{this.target.rating.negative}}</p>\n              </MDBBadge>\n            </td>\n          </tr>\n          <tr>\n            <td colspan=\"2\">\n              <MDBBtn block color=\"secondary\" size=\"lg\" @click=\"isMapChat = true\">Chattailemaan</MDBBtn>\n              <chat-panel\n                  v-if=\"isMapChat\"\n                  :chatusers = chatusers\n                  :messages =messages\n                  :selecteduser = selecteduser\n                  @select:user = selectUser\n                  @noSelected = noSelectUser\n                  @on:message = onMessage\n              />\n              <p style=\"color: red; text-align: center;\">Arendamine pooleli...</p>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n\n\n      </div>\n\n      <div v-if=\"!isTargetSelected\">\n        <div v-if=!isMainPanel >\n          <MDBIcon size=\"2x\" style=\"float: right; padding: 10px;\" @click=\"returnToMainPanel\">\n            <i class=\"fas fa-expand-arrows-alt\"></i>\n          </MDBIcon>\n        </div>\n      </div>\n\n\n\n<!--      style=\"background-color:white; width: 40%; float: right;\"-->\n      <div v-if=\"!isMainPanel && countOfSelectedProfessional > 0 && !isTargetSelected\" style=\"background-color:white;\">\n\n\n        <p style=\"color: red; font-size: 14px; text-align: left; padding: 15px; \">\n          Napsauta merkkiä nähdäksesi palveluntarjoajan!\n        </p>\n\n        <p style=\"color: blue;\">\n          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua\n        </p>\n\n      </div>\n\n\n\n<!--      <MDBBtn color=\"dark\"-->\n<!--              v-if=\"isMainPanel\"-->\n<!--              size=\"lg\"-->\n<!--              block-->\n<!--              @click=\"receive\"-->\n<!--              style=\"position: relative; z-index:1; opacity: 1.2;\"-->\n<!--      >-->\n<!--        Tee uusi tilaus-->\n<!--      </MDBBtn>-->\n\n\n<!--      <MDBBtn color=\"danger\"-->\n<!--              v-if=\"isMainPanel\"-->\n<!--              size=\"lg\"-->\n<!--              block-->\n<!--              @click=\"$router.go(-1)\"-->\n<!--              style=\"position: relative; z-index:1; opacity: 1.0;\"-->\n<!--      >-->\n<!--        Poistu-->\n<!--      </MDBBtn>-->\n\n    </MDBContainer>\n<!--    <h3 style=\"margin-top: 50px;\">Kartta ladataan...</h3>-->\n<!--    <div class=\"spinner-border\" role=\"status\">-->\n<!--      <span class=\"visually-hidden\">Loading...</span>-->\n<!--    </div>-->\n<!--    <section id=\"map\"></section>-->\n\n    <div id=\"map\"></div>\n\n\n  </div>\n\n</template>\n\n<script>\n/* eslint-disable */\n/*global google*/\nimport axios from 'axios'\nimport recipientService from '../service/recipients'\nimport providerService from '../service/providers'\nimport {\n  MDBContainer,\n  MDBInput,\n  MDBBtn,\n  MDBBtnClose,\n  MDBRow,\n  MDBCol,\n  MDBIcon,\n  MDBBadge\n} from \"mdb-vue-ui-kit\";\nimport distance from '../components/controllers/distance'\nimport gMap from '../components/location'\nimport proData from '@/components/profession/proList'\nimport chatPanel from '@/pages/LiveChat'\nexport default {\n  name: \"recipient-public\",\n  props: {\n    userIsProvider: Object,\n    selecteduser: null,\n    chatusers: Array,\n    isProviderLoggedIn: Boolean\n  },\n  components: {\n    chatPanel,\n    MDBContainer,\n    MDBInput,\n    MDBBtn,\n    MDBBtnClose,\n    MDBRow,\n    MDBCol,\n    MDBIcon,\n    MDBBadge\n  },\n  data () {\n    return {\n      target: {}, // Selected provider from map\n      isTargetSelected: false,\n      isMainPanel: true,\n      prof: \"\",\n      username: null,\n      userId: null,\n      providerId: null,\n      address: null,\n      myLat: null,\n      mylng: null,\n      countOfSelectedProfessional: 0,\n      isActiveProffs: false,\n      isDistSelection: false,\n      professional: \"\",\n      currentProfession: \"\",\n      distBtw: 1,\n      prodata: proData,\n      room: null,\n      isMapChat: false,\n      providers: [],\n\n      selectedProPosition: null\n    }\n  },\n  mounted () {\n    const loggedUserJSON = window.localStorage.getItem('loggedAppUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      this.username = user.username;\n      this.userId = user.id\n      //console.log(\"User token: \" + this.loggedUser.token)\n    }\n\n    this.resizeMap();\n\n    //console.log(\"Is provider in \" + this.isProviderLoggedIn)\n\n    //console.log(\"User id in providers \" + this.userId)\n\n\n\n    //this.setProviderId()\n\n    const myMarker = new google.maps.Marker({\n      icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\n    })\n\n    this.userCurrentLocation();\n\n    const selectProfession = document.getElementById(\"listOfProfessionals\")\n\n    selectProfession.addEventListener(\"change\", (event) => {\n      this.isDistSelection = true;\n\n      this.currentProfession = event.target.value;\n      this.showClientLocationOnTheMap(event.target.value, this.distBtw);\n    })\n\n    const selectDistance = document.getElementById\n    (\"distance\");\n\n    selectDistance.addEventListener(\"change\", (event) => {\n      this.distBtw = parseFloat(event.target.value);\n\n      console.log(\"+++++++++++ \" + this.countOfSelectedProfessional > 0)\n      this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\n\n    })\n\n\n\n    const input = document.getElementById(\"autocomplite\");\n\n    const center = { lat: 50.064192, lng: -130.605469 };\n    const defaultBounds = {\n      north: center.lat + 0.1,\n      south: center.lat - 0.1,\n      east: center.lng + 0.1,\n      west: center.lng - 0.1,\n    };\n    const options = {\n      bounds: defaultBounds,\n      componentRestrictions: { country: \"fi\" },\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\", \"formatted_address\"],\n      strictBounds: false,\n      //types: [\"establishment\"],\n    };\n    const autocomplete = new google.maps.places.Autocomplete(input, options);\n\n    autocomplete.addListener(\"place_changed\", () => {\n      let place = autocomplete.getPlace()\n      this.myLat = place.geometry.location.lat();\n      this.myLng = place.geometry.location.lng();\n\n      this.getAddressFrom(place.geometry.location.lat(), place.geometry.location.lng())\n      this.address = place.formatted_address\n      console.log(place)\n    });\n\n  },\n  methods: {\n    selectUser(user) {\n      this.$emit('select:user', user);\n      //if (!user.self)\n      //this.selectedUser = user;\n    },\n    noSelectUser () {\n      this.$emit(\"noSelected\");\n    },\n    onMessage(content, date) {\n\n      this.$emit(\"on:message\", content, date);\n\n    },\n    resizeMap() {\n      var myMap = document.getElementById('map');\n      myMap.style.height = \"100%\";\n      myMap.style.width = \"100%\";\n    },\n    receive (){\n      this.$router.push('/rf')\n\n    },\n    userCurrentLocation () {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const { latitude, longitude } = position.coords;\n          // Show a map centered at latitude / longitude.\n          this.myLat = latitude\n          this.myLng = longitude\n\n          this.showUserLocationOnTheMap (latitude, longitude)\n        });\n      }\n\n    },\n\n    pinSymbol(color) {\n      return {\n        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',\n        fillColor: color,\n        fillOpacity: 1,\n        strokeColor: '#000',\n        strokeWeight: 2,\n        scale: 1\n      };\n    },\n\n    showUserLocationOnTheMap (latitude, longitude) {\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 13,\n        center: new google.maps.LatLng(latitude, longitude),\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        accuracy: 50,\n\n      });\n\n    },\n\n    getAddressFrom (lat, long) {\n      axios.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat +\n          \",\" + long\n          + \"&key=\" + 'AIzaSyAQPLmTMlmSTp4spxPwvaJLnzYnkLmZ9zc')\n          .then(response => {\n            if (response.data.error_message) {\n              this.error = response.data.error_message;\n\n              console.log(response.data.error_message)\n            } else {\n              const map = new google.maps.Map(document.getElementById(\"map\"), {\n                zoom: 13,\n                center: new google.maps.LatLng(lat, long),\n                mapTypeId: google.maps.MapTypeId.ROADMAP\n              });\n\n              // AIzaSyBDA2EBoGezJx51wQtxoW3Ecq5Ql8CCAiE\n\n               /*new google.maps.Marker({\n                 position: new google.maps.LatLng(lat, long),\n                 accuracy: 50,\n                 map: map,\n                 icon: this.pinSymbol('yellow'),\n                 label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n               })*/\n\n              //this.address = response.data.results[0].formatted_address\n              console.log(response.data.results.results[0].formatted_address)\n            }\n\n          })\n          .catch(error => {\n            this.error = error.message\n            console.log(error.message)\n          })\n    },\n\n    distanceBtw (originLat, originLng, destLat, destLng) {\n      var origin = new google.maps.LatLng(originLat, originLng);\n      var destination = new google.maps.LatLng(destLat, destLng);\n      return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n    },\n\n\n    otherUserLocations (providers, profession, dist) {\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 9,\n        center: new google.maps.LatLng(this.myLat, this.myLng),\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n      });\n      console.log(\"Users count: \" + providers.length)\n      console.log(\"Current distance \" + dist)\n\n       /*new google.maps.Marker({\n         position: new google.maps.LatLng(this.myLat, this.myLng),\n         accuracy: 50,\n         map: map,\n         icon: this.pinSymbol('yellow'),\n         label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n       })\n*/\n      let count = 0;\n\n      if (providers.length > 0) {\n        this.target = {};\n\n        for (let pos = 0; pos < providers.length; pos++) {\n          console.log(\"------------ \" + providers[pos].yritys);\n          //console.log(\"Client latitude: \" + recipient[pos].latitude)\n          //console.log(\"Client longitude: \" + recipient[pos].longitude)\n          let myLatLong = [this.myLat, this.myLng];\n          providers[pos].profession.forEach(prof => {\n            if (prof === profession) {\n              //his.providers.push(providers[pos])\n              console.log(\"Pro \" + prof.yritys)\n              let providerLatLng = [providers[pos].latitude, providers[pos].longitude];\n              console.log(\"Distance btw \" + this.distanceBtw(this.myLat, this.myLng, providers[pos].latitude, providers[pos].longitude));\n\n              //distance.theDist()\n\n              //this.countOfSelectedClient++;\n              this.isActiveProffs = true;\n\n              if (this.distanceBtw(this.myLat, this.myLng, providers[pos].latitude, providers[pos].longitude) <= dist) {\n                count ++;\n\n                //this.isMainPanel = false;\n\n                // let marker = new google.maps.Marker({\n                //   position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                //   accuracy: 50,\n                //   map: map\n                // })\n                let marker;\n                if (this.isTargetSelected) {\n\n\n\n                  // marker = new google.maps.Marker({\n                  //   position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                  //   map: map\n                  // })\n                  //marker.setMap(null);\n\n                  marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                    accuracy: 50,\n                    map: map,\n                    icon: this.pinSymbol('orange'),\n                    label: { color: '#f75959', fontWeight: 'bold', fontSize: '14px', text: 'TMI ' + providers[pos].yritys }\n                  })\n                } else {\n\n                  marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                    accuracy: 50,\n                    map: map\n                  })\n\n                }\n\n\n                // this.target = providers[pos];\n                // this.room = providers[pos].yritys + this.username;\n\n                window.myGlobalFunction = this.openMarker;\n\n                const content = \"class='map-info-window'\"\n\n                const infowindow = new google.maps.InfoWindow({\n                  //content: \"\"\n                  //content:'<p id=\"map-info-window\">Hello World!</p>'\n                  //content: \"TMI: \" + providers[pos].yritys\n                });\n\n                google.maps.event.addListener(marker, 'click', function() {\n                  //infowindow.setContent(content);\n\n\n                  console.log(\"POOOOS \" + pos)\n                  let p = pos\n\n                  // const room = providers[pos].yritys + this.username;\n                  //\n                  // const chatCredentials = {\n                  //   room: room,\n                  //\n                  // }\n                  // this.$emit(\"chatCredentials\", chatCredentials);\n\n                  //this.selectedProPosition = pos;\n\n                  infowindow.open(map,marker);\n\n                  infowindow.setContent(\"<div class='map-info-window'>\" + '<p>'+providers[pos].yritys+'</p>' + '<p style=\"color: red; \" onclick=\"myGlobalFunction('+ p +' )\">Tiedot</p>' + \"</div>\")\n\n                });\n\n                // '<MDBBtn color=\"info\" @click=\"myFunction()\">Click me</MDBBtn>'\n\n                // const { Map, InfoWindow } = google.maps.importLibrary(\"maps\");\n                //\n                // marker.addListener(\"click\", ({ domEvent, latLng }) => {\n                //   const { target } = domEvent;\n                //\n                //   infoWindow.close();\n                //   // infoWindow.setContent(marker.title);\n                //   // infoWindow.open(marker.map, marker);\n                // });\n              }\n\n            }\n          })\n\n        }\n\n\n        if (count > 0) {\n          this.isActiveProffs = true;\n          this.isMainPanel = false;\n\n        } else {\n          this.isActiveProffs = false;\n        }\n        this.countOfSelectedProfessional = count;\n        console.log(\"countxx \" + count)\n        this.identifyProfText();\n        //console.log(\"Count \" + this.countOfSelectedClients)\n\n      }\n\n    },\n\n    async openMarker (p) {\n      const providers = await providerService.getProviders()\n      if (providers) {\n        this.target = providers[p];\n        this.isTargetSelected = true;\n        //console.log(\"Pooooos ---- \" + p);\n        //this.otherUserLocations(providers, this.currentProfession, this.distBtw)\n      }\n\n\n      // const room = providers[p].yritys + this.username;\n      //\n      // const chatCredentials = {\n      //   room: room,\n      //\n      // }\n      // this.$emit(\"chatCredentials\", chatCredentials);\n\n      // const providers = await providerService.getProviders()\n      // if (providers !== null) {\n      //   this.otherUserLocations(providers, this.currentProfession, this.distBtw);\n      // }\n\n    },\n\n    async outFromMarkerPanel () {\n      this.isTargetSelected = false\n      //this.isMainPanel = true;\n\n      const providers = await providerService.getProviders()\n      if (providers !== null) {\n        this.otherUserLocations(providers, this.currentProfession, this.distBtw);\n      }\n    },\n\n    async returnToMainPanel () {\n      this.isMainPanel = true\n\n      //location.reload();\n\n\n\n      // const providers = await providerService.getProviders()\n      // if (providers !== null) {\n      //   this.otherUserLocations(providers, \"\", \"\");\n      // }\n      //this.currentProfession = \"\"\n      // this.prof = \"\";\n      // this.distBtw = 0\n    },\n\n    closeMainPanel () {\n      this.isMainPanel = false;\n      console.log(\"Close main panel\")\n    },\n\n    renderClients (event) {\n      console.log(\"Event value \" + event.target.value)\n      //this.countOfSelectedClients = 0;\n\n      if (event.target.value) {\n        // @click=\"renderClients($event)\"\n        this.showClientLocationOnTheMap(event.target.value)\n\n      }\n      this.prof = event.target.value\n\n      event.target.value = \"\"\n\n    },\n\n\n    async showClientLocationOnTheMap (profession, dist) {\n\n      console.log(\"Current distance herexx  \" + dist)\n      const providers = await providerService.getProviders()\n      if (providers !== null) {\n        this.otherUserLocations(providers, profession, dist);\n      }\n      // visibility: hidden;\n\n    },\n    identifyProfText () {\n      if (this.countOfSelectedProfessional > 1) {\n        this.professional = \"ammattilaista\"\n      } else {\n        this.professional = \"ammattilainen\"\n      }\n    }\n\n  }\n}\n</script>\n\n<style>\n.ui.button,\n.dot.circle {\n  background-color: #ff5a5f;\n  color: white;\n}\n\n.pac-icon {\n  display: none;\n}\n.pac-item {\n  padding: 10px;\n  font-size: 16px;\n  cursor: pointer;\n}\n.pac-item:hover {\n  background-color: #ececec;\n}\n.pac-item-query {\n  font-size: 16px;\n}\n.spinner-border {\n\n}\n\n\n#map {\n  background: transparent url(/src/assets/Loading_icon.gif)  no-repeat center center;\n}\n\n#map {\n   position: absolute;\n\n  /*height: 500px; !* The height is 400 pixels *!*/\n  /*width: 100%; !* The width is the width of the web page *!*/\n\n   top: 120px;\n   right: 0;\n   bottom: 0;\n   left: 0;\n }\n\n.map-info-window {\n  width: 200px;\n}\n\n@media only screen and (max-width: 1000px) {\n  #test {\n    display: none !important;\n\n  }\n}\n\n.activeClients {\n  display: none !important;\n}\n.noClients {\n  display: none !important;\n}\n.hideDistSelectPanel {\n  display: none !important;\n}\n.hideMainPanel {\n  display: none !important;\n}\nh3 {\n  padding: 10px;\n  color: #0095ff;\n}\n.minmax-icon {\n  padding: 12px;\n}\n\n.map-info-table  td {\n  border: 1px solid blue;\n  padding: 5px;\n}\n\n</style>","import { render } from \"./RecipientPublic.vue?vue&type=template&id=7713d5c2\"\nimport script from \"./RecipientPublic.vue?vue&type=script&lang=js\"\nexport * from \"./RecipientPublic.vue?vue&type=script&lang=js\"\n\nimport \"./RecipientPublic.vue?vue&type=style&index=0&id=7713d5c2&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["res","distance","origin","google","maps","LatLng","destination","service","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","unitSystem","UnitSystem","METRIC","durationInTraffic","avoidHighways","avoidTolls","response_data","responseDis","status","DistanceMatrixStatus","OK","console","log","rows","elements","text","alert","test","_createVNode","_createTextVNode","theDist","geometry","spherical","computeDistanceBetween","toFixed","construction","realEstate","options","style","_createElementVNode","class","id","value","disabled","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","colspan","_createElementBlock","_component_MDBContainer","_normalizeClass","hideMainPanel","$data","isMainPanel","_hoisted_1","_component_MDBIcon","size","onClick","$options","closeMainPanel","_hoisted_2","_component_MDBBtnClose","_cache","$event","_ctx","$router","go","_createBlock","_component_MDBBtn","color","block","receive","_hoisted_3","_component_MDBInput","label","address","wrapperClass","prof","_hoisted_4","_Fragment","_renderList","prodata","option","group","key","opt","_hoisted_6","_hoisted_7","hideDistSelectPanel","isDistSelection","distBtw","args","filterByDistance","noClients","isActiveProffs","isTargetSelected","_hoisted_30","_hoisted_31","outFromMarkerPanel","_hoisted_32","_hoisted_33","_toDisplayString","target","yritys","_hoisted_34","ytunnus","_hoisted_35","range","this","_hoisted_36","priceByHour","_hoisted_37","negative","_component_MDBBadge","pill","notification","rating","positive","_hoisted_38","isMapChat","_component_chat_panel","chatusers","$props","messages","selecteduser","selectUser","onNoSelected","noSelectUser","onMessage","_hoisted_39","_hoisted_40","_hoisted_41","returnToMainPanel","_hoisted_42","countOfSelectedProfessional","_hoisted_43","_hoisted_44","_hoisted_45","professional","_hoisted_46","name","props","userIsProvider","Object","Array","isProviderLoggedIn","Boolean","components","chatPanel","MDBContainer","MDBInput","MDBBtn","MDBBtnClose","MDBRow","MDBCol","MDBIcon","MDBBadge","data","username","userId","providerId","myLat","mylng","currentProfession","proData","room","providers","selectedProPosition","mounted","loggedUserJSON","window","localStorage","getItem","user","JSON","parse","resizeMap","Marker","icon","userCurrentLocation","selectProfession","document","getElementById","addEventListener","event","showClientLocationOnTheMap","selectDistance","parseFloat","input","center","lat","lng","defaultBounds","north","south","east","west","bounds","componentRestrictions","country","fields","strictBounds","autocomplete","places","Autocomplete","addListener","place","getPlace","location","myLng","getAddressFrom","formatted_address","methods","$emit","content","date","myMap","height","width","push","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","showUserLocationOnTheMap","pinSymbol","path","fillColor","fillOpacity","strokeColor","strokeWeight","scale","Map","zoom","mapTypeId","MapTypeId","ROADMAP","accuracy","long","axios","get","then","response","error_message","error","results","catch","message","distanceBtw","originLat","originLng","destLat","destLng","otherUserLocations","profession","dist","map","length","count","pos","forEach","marker","fontWeight","fontSize","myGlobalFunction","openMarker","infowindow","InfoWindow","p","open","setContent","identifyProfText","async","providerService","getProviders","renderClients","__exports__","render"],"sourceRoot":""}