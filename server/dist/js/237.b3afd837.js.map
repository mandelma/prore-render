{"version":3,"file":"js/237.b3afd837.js","mappings":"mIACA,IAAIA,EAAM,GACV,MAAMC,EAAWA,KAGb,IAAIC,EAAS,IAAIC,OAAOC,KAAKC,OAAO,UAAU,YAC1CC,EAAc,IAAIH,OAAOC,KAAKC,OAAO,WAAW,YAChDE,EAAU,IAAIJ,OAAOC,KAAKI,sBAC9BD,EAAQE,kBACJ,CACIC,QAAS,CAACR,GACVS,aAAc,CAACL,GACfM,WAAY,UACZC,WAAYV,OAAOC,KAAKU,WAAWC,OACnCC,mBAAmB,EACnBC,eAAe,EACfC,YAAY,GACbC,EAAc,EAInBA,EAAgBA,CAACC,EAAaC,KAEhC,GAAIA,IAAWlB,OAAOC,KAAKkB,qBAAqBC,IAAiB,OAAXF,EASlD,OAHAG,QAAQC,IAAI,YAAcL,EAAYM,KAAK,GAAGC,SAAS,GAAG1B,SAAS2B,MAEnE5B,EAAMoB,EAAYM,KAAK,GAAGC,SAAS,GAAG1B,SAAS2B,KACxC,gBARPJ,QAAQC,IAAI,SAAUJ,GAEtBQ,MAAMR,EAQV,EAIES,EAAOA,KACTN,QAAQC,IAAI,kBAAoBzB,IAEhC+B,EAAAA,EAAAA,IAAA,aAAAC,EAAAA,EAAAA,IAAA,YAGEC,EAAUA,KACZ,IAAI/B,EAAS,IAAIC,OAAOC,KAAKC,OAAO,UAAU,YAC1CC,EAAc,IAAIH,OAAOC,KAAKC,OAAO,WAAW,YACpD,OAAQF,OAAOC,KAAK8B,SAASC,UAAUC,uBAAuBlC,EAAQI,GAAe,KAAM+B,QAAQ,EAAE,EA4BzG,KAAiBpC,WAAU6B,OAAMG,U,6ICxDpBK,MAAA,4C,GA2BAC,GAAG,S,GAcHD,MAAA,0B,GAGSE,MAAM,a,GA/D5BC,IAAA,G,GAAAA,IAAA,G,GAyEmBH,MAAA,GAASI,MAAM,2B,GAzElCD,IAAA,EAmJ4BH,MAAA,iG,GAnJ5BG,IAAA,EAgKWC,MAAM,iBAA4DJ,MAAA,+F,GAChEA,MAAA,4C,GAIEA,MAAA,uD,GArKfG,IAAA,G,EAAA,S,GAAAA,IAAA,G,GA+OgBE,QAAQ,K,GA/OxBF,IAAA,G,GAoPgBE,QAAQ,K,GApPxBF,IAAA,EA6P0BC,MAAM,S,GAEnBJ,MAAA,2D,GASAA,MAAA,uC,GAWEA,MAAA,gB,GAuBGI,MAAM,mB,GA1SxBD,IAAA,G,GAAAA,IAAA,G,GAAAA,IAAA,EAgUuFH,MAAA,8B,oSA/TrFM,EAAAA,EAAAA,IA6WM,aAzWJb,EAAAA,EAAAA,IA+Vec,EAAA,CA7VXP,MAAA,uEAIC,CAXTQ,SAAAC,EAAAA,EAAAA,KAkBM,IA6HM,EA7HNC,EAAAA,EAAAA,IA6HM,OA7HAN,OAlBZO,EAAAA,EAAAA,IAAA,CAAAC,eAkBoCC,EAAAC,cAAcd,MAAA,+C,EAC1CU,EAAAA,EAAAA,IAeM,MAfNK,EAeM,EAdJtB,EAAAA,EAAAA,IAEUuB,EAAA,CAFDC,KAAK,KAAKjB,MAAA,iBAAwBkB,QAAOC,EAAAC,gB,CApB5DZ,SAAAC,EAAAA,EAAAA,KAqBY,IAA0CY,EAAA,MAAAA,EAAA,MAA1CX,EAAAA,EAAAA,IAA0C,KAAvCN,MAAM,8BAA4B,aArBjDkB,EAAA,G,gBAuBUZ,EAAAA,EAAAA,IAOM,aANJjB,EAAAA,EAAAA,IAKE8B,EAAA,CAJEC,MAAA,GACAxB,MAAA,iBACAiB,KAAK,KACJC,QAAKG,EAAA,KAAAA,EAAA,GAAAI,GAAEC,EAAAC,QAAQC,IAAI,WAkB5BlB,EAAAA,EAAAA,IASM,MATNmB,EASM,EARJpC,EAAAA,EAAAA,IAOEqC,EAAA,CANEN,MAAA,GACAO,MAAM,uCAjDpBC,WAkDuBnB,EAAAoB,QAlDvB,sBAAAZ,EAAA,KAAAA,EAAA,GAAAI,GAkDuBZ,EAAAoB,QAAOR,GAChBxB,GAAG,eACHgB,KAAK,KACLiB,aAAa,Q,0BAOnBxB,EAAAA,EAAAA,IAmBM,MAnBNyB,EAmBM,EAlBJ1C,EAAAA,EAAAA,IAiBW2C,EAAA,CAjBCC,SAAQlB,EAAAmB,kBA7D9BN,WA6D4DnB,EAAA0B,KA7D5D,sBAAAlB,EAAA,KAAAA,EAAA,GAAAI,GA6D4DZ,EAAA0B,KAAId,GAAGe,QAAS3B,EAAA4B,QAAWC,OAAA,GAAOC,YAAY,QAAQC,iBAAiB,QAAQC,oBAAoB,QAAQC,YAAY,wBAAwB1C,MAAM,sB,CAWzL2C,aAAWtC,EAAAA,EAAAA,KAIfuC,GAJ0B,EAChCtC,EAAAA,EAAAA,IAGM,MAHNuC,EAGM,EADJvC,EAAAA,EAAAA,IAAwC,YAAAwC,EAAAA,EAAAA,IAA/BF,EAAUG,OAAOpB,OAAK,QA3E/CvB,SAAAC,EAAAA,EAAAA,KA+DY,IAQW,EARXC,EAAAA,EAAAA,IAQW,WARX0C,EAQW,CAPE1B,EAAAsB,UAAU9C,QAAK,WAA1BI,EAAAA,EAAAA,IAGM,MAnEpB+C,EAAA,EAkEgB3C,EAAAA,EAAAA,IAAuC,YAAAwC,EAAAA,EAAAA,IAA9BxB,EAAAsB,UAAU9C,MAAM6B,OAAK,mBAEhCzB,EAAAA,EAAAA,IAEK,OAtEnBgD,GAAAJ,EAAAA,EAAAA,IAqEiBxB,EAAAsB,UAAUF,aAAW,SArEtCxB,EAAA,G,0CAsGQZ,EAAAA,EAAAA,IAyBM,OAzBCN,OAtGfO,EAAAA,EAAAA,IAAA,CAAA4C,qBAsG6C1C,EAAA2C,kBAAkBxD,MAAA,wB,WACrDU,EAAAA,EAAAA,IAsBS,UAtBDV,MAAA,yEAA6EC,GAAG,WAvGlG,sBAAAoB,EAAA,KAAAA,EAAA,GAAAI,GAuGsHZ,EAAA4C,QAAOhC,GAAGP,QAAKG,EAAA,KAAAA,EAAA,OAAAqC,IAAEhC,EAAAiC,kBAAAjC,EAAAiC,oBAAAD,K,gBAC3HhD,EAAAA,EAAAA,IAA4D,UAApDkD,SAAA,GAAS1D,MAAM,KAAI,4BAAwB,IACnDQ,EAAAA,EAAAA,IAA2C,UAAnCR,MAAM,KAAI,oBAAgB,IAClCQ,EAAAA,EAAAA,IAA2C,UAAnCR,MAAM,KAAI,oBAAgB,IAClCQ,EAAAA,EAAAA,IAA2C,UAAnCR,MAAM,KAAI,oBAAgB,IAClCQ,EAAAA,EAAAA,IAA2C,UAAnCR,MAAM,KAAI,oBAAgB,IAClCQ,EAAAA,EAAAA,IAA2C,UAAnCR,MAAM,KAAI,oBAAgB,IAClCQ,EAAAA,EAAAA,IAA2C,UAAnCR,MAAM,KAAI,oBAAgB,IAClCQ,EAAAA,EAAAA,IAA2C,UAAnCR,MAAM,KAAI,oBAAgB,IAClCQ,EAAAA,EAAAA,IAA2C,UAAnCR,MAAM,KAAI,oBAAgB,IAClCQ,EAAAA,EAAAA,IAA6C,UAArCR,MAAM,MAAK,qBAAiB,IACpCQ,EAAAA,EAAAA,IAA6C,UAArCR,MAAM,MAAK,qBAAiB,IACpCQ,EAAAA,EAAAA,IAA6C,UAArCR,MAAM,MAAK,qBAAiB,IACpCQ,EAAAA,EAAAA,IAA6C,UAArCR,MAAM,MAAK,qBAAiB,IACpCQ,EAAAA,EAAAA,IAA6C,UAArCR,MAAM,MAAK,qBAAiB,IACpCQ,EAAAA,EAAAA,IAA6C,UAArCR,MAAM,MAAK,qBAAiB,IACpCQ,EAAAA,EAAAA,IAA6C,UAArCR,MAAM,MAAK,qBAAiB,IACpCQ,EAAAA,EAAAA,IAA6C,UAArCR,MAAM,MAAK,qBAAiB,IACpCQ,EAAAA,EAAAA,IAA6C,UAArCR,MAAM,MAAK,qBAAiB,IACpCQ,EAAAA,EAAAA,IAA+C,UAAvCR,MAAM,OAAM,sBAAkB,IACtCQ,EAAAA,EAAAA,IAA+C,UAAvCR,MAAM,OAAM,sBAAkB,IACtCQ,EAAAA,EAAAA,IAA+C,UAAvCR,MAAM,OAAM,sBAAkB,iBArBoEW,EAAA4C,YAAO,GAiC3G5C,EAAA0B,OAAI,WADdjC,EAAAA,EAAAA,IAKK,MA5IbH,IAAA,EAyIaC,OAzIbO,EAAAA,EAAAA,IAAA,CAAAkD,UAyIgChD,EAAAiD,kBACvB,4BAED,KA5IRC,EAAAA,EAAAA,IAAA,WAmJiBlD,EAAAmD,YAAS,WAApB1D,EAAAA,EAAAA,IAWM,MAXN2D,EAWM,EAVJvD,EAAAA,EAAAA,IAA2E,KAAxEV,MAAA,kCAAyCkB,QAAKG,EAAA,KAAAA,EAAA,OAAAqC,IAAEvC,EAAA+C,cAAA/C,EAAA+C,gBAAAR,KAAc,WACjEjE,EAAAA,EAAAA,IAQE0E,EAAA,CANGC,UAAYC,EAAAD,UACZE,SAAUD,EAAAC,SACVC,aAAeF,EAAAE,aACf,gBAAcpD,EAAAqD,WACdC,aAAatD,EAAAuD,aACb,eAAavD,EAAAwD,W,iGAImB9D,EAAA+D,mBAAqB/D,EAAAmD,YAAS,WAArE1D,EAAAA,EAAAA,IA2FM,MA3FNuE,EA2FM,EA1FJnE,EAAAA,EAAAA,IAEM,MAFNoE,EAEM,EADJpE,EAAAA,EAAAA,IAAgG,KAA7FV,MAAA,kDAAwDkB,QAAKG,EAAA,KAAAA,EAAA,OAAAqC,IAAEvC,EAAA4D,oBAAA5D,EAAA4D,sBAAArB,KAAoB,aAGxFhD,EAAAA,EAAAA,IAoFQ,QApFRsE,EAoFQ,EAnFNtE,EAAAA,EAAAA,IAkFQ,eAjFRA,EAAAA,EAAAA,IAOK,0BANHA,EAAAA,EAAAA,IAEK,UAFD,aAEJ,KACAA,EAAAA,EAAAA,IAEK,WAAAwC,EAAAA,EAAAA,IAAA,KADK+B,OAAOC,QAAM,MAGzBxE,EAAAA,EAAAA,IAOK,0BANHA,EAAAA,EAAAA,IAEK,UAFD,iBAEJ,KACAA,EAAAA,EAAAA,IAEK,WAAAwC,EAAAA,EAAAA,IAAA,KADI+B,OAAOE,SAAO,MAGzBzE,EAAAA,EAAAA,IAOK,0BANHA,EAAAA,EAAAA,IAEK,UAFD,cAEJ,KACAA,EAAAA,EAAAA,IAEK,WAAAwC,EAAAA,EAAAA,IAAA,KADI+B,OAAOG,MAAQC,KAAKJ,OAAOG,MAAQ,MAAQ,mCAAX,MAG3C1E,EAAAA,EAAAA,IAOK,0BANHA,EAAAA,EAAAA,IAEK,UAFD,qBAEJ,KACAA,EAAAA,EAAAA,IAEK,WAAAwC,EAAAA,EAAAA,IAAA,KADI+B,OAAOK,YAAcD,KAAKJ,OAAOK,YAAc,iBAAH,kCAGvD5E,EAAAA,EAAAA,IA2BK,0BA1BHA,EAAAA,EAAAA,IAEK,UAFD,oBAEJ,KACAA,EAAAA,EAAAA,IAsBK,YArBHjB,EAAAA,EAAAA,IACsCuB,EAAA,CAD5BhB,MAAA,kCAAwCI,MAAM,eAAea,KAAK,KACjEC,QAAOQ,EAAA6D,U,qBAGlB9F,EAAAA,EAAAA,IAIW+F,EAAA,CAJDC,MAAM,UAAUrF,MAAM,uBACtBsF,KAAA,GACAC,aAAA,I,CAlNxBnF,SAAAC,EAAAA,EAAAA,KAmNgB,IAAsC,EAAtCC,EAAAA,EAAAA,IAAsC,UAAAwC,EAAAA,EAAAA,IAAA,KAA5B+B,OAAOW,OAAOC,UAAQ,MAnNhDvE,EAAA,KAuNc7B,EAAAA,EAAAA,IACsCuB,EAAA,CAD5BhB,MAAA,kCAAwCI,MAAM,eAAea,KAAK,KACjEC,QAAOQ,EAAA6D,U,qBAIlB9F,EAAAA,EAAAA,IAIW+F,EAAA,CAJDC,MAAM,SAASrF,MAAM,uBACrBsF,KAAA,GACAC,aAAA,I,CA9NxBnF,SAAAC,EAAAA,EAAAA,KA+NgB,IAAsC,EAAtCC,EAAAA,EAAAA,IAAsC,UAAAwC,EAAAA,EAAAA,IAAA,KAA5B+B,OAAOW,OAAOL,UAAQ,MA/NhDjE,EAAA,Q,KAmOyB2D,OAAOa,WAAQ,WAA9BxF,EAAAA,EAAAA,IASK,KA5OfyF,EAAA,gBAoOYrF,EAAAA,EAAAA,IAEK,UAFD,cAEJ,KACAA,EAAAA,EAAAA,IAIK,YAHHA,EAAAA,EAAAA,IAEI,KAFAsF,KAAI,UAAcf,OAAOa,SAAUb,OAAO,UAAS,+BAEvD,EA1OdgB,SAAAlC,EAAAA,EAAAA,IAAA,OA6OoBlD,EAAAoE,OAAOiB,KAAKjG,KAAOY,EAAAsF,SAAM,WAAnC7F,EAAAA,EAAAA,IAKK,KAlPf8F,EAAA,EA+OY1F,EAAAA,EAAAA,IAEK,KAFL2F,EAEK,EADH5G,EAAAA,EAAAA,IAA0F6G,EAAA,CAAjFC,MAAA,GAAMd,MAAM,YAAYxE,KAAK,KAAMC,QAAOC,EAAAqF,iB,CAhPjEhG,SAAAC,EAAAA,EAAAA,KAgPkF,IAAaY,EAAA,MAAAA,EAAA,MAhP/F3B,EAAAA,EAAAA,IAgPkF,qBAhPlF4B,EAAA,G,qBAAAyC,EAAAA,EAAAA,IAAA,OAmPoBlD,EAAAoE,OAAOiB,KAAKjG,KAAOY,EAAAsF,QAAWtF,EAAA4F,SAnPlD1C,EAAAA,EAAAA,IAAA,SAmPyD,WAA/CzD,EAAAA,EAAAA,IAIK,KAvPfoG,EAAA,EAoPYhG,EAAAA,EAAAA,IAEK,KAFLiG,EAEK,EADHlH,EAAAA,EAAAA,IAAmF6G,EAAA,CAA1EC,MAAA,GAAMd,MAAM,UAAUxE,KAAK,KAAMC,QAAOC,EAAAyF,e,CArP/DpG,SAAAC,EAAAA,EAAAA,KAqP8E,IAAUY,EAAA,MAAAA,EAAA,MArPxF3B,EAAAA,EAAAA,IAqP8E,kBArP9E4B,EAAA,G,4BAAAyC,EAAAA,EAAAA,IAAA,OA6PiBlD,EAAA4F,UAAO,WAAlBnG,EAAAA,EAAAA,IAkDM,MAlDNuG,EAkDM,EAhDJnG,EAAAA,EAAAA,IAMM,MANNoG,EAMM,EALJrH,EAAAA,EAAAA,IAIE8B,EAAA,CAHAC,MAAA,GACAP,KAAK,KACJC,QAAKG,EAAA,KAAAA,EAAA,GAAAI,GAAEZ,EAAA4F,SAAU,QAItB/F,EAAAA,EAAAA,IAsCO,QAtCAqG,SAAM1F,EAAA,MAAAA,EAAA,KAvQrB2F,EAAAA,EAAAA,KAAA,IAAAtD,IAuQ+BvC,EAAA8F,cAAA9F,EAAA8F,gBAAAvD,IAAY,e,EACjChD,EAAAA,EAAAA,IAAqE,IAArEwG,EAA6C,aAAShE,EAAAA,EAAAA,IAAErC,EAAAoB,SAAO,IAE/DxC,EAAAA,EAAAA,IAKEqC,EAAA,CAJEN,MAAA,GACAO,MAAM,cA5QpBC,WA6QuBnB,EAAAsG,YA7QvB,sBAAA9F,EAAA,KAAAA,EAAA,GAAAI,GA6QuBZ,EAAAsG,YAAW1F,GACpBS,aAAa,Q,sCAGjBxB,EAAAA,EAAAA,IAAsE,KAAnEV,MAAA,uBAA0B,yCAAqC,KAElEU,EAAAA,EAAAA,IAwBM,MAxBN0G,EAwBM,EAvBJ3H,EAAAA,EAAAA,IAUgB4H,EAAA,CATZrH,MAAA,yBArRhBgC,WAsRyBnB,EAAAyG,UAtRzB,sBAAAjG,EAAA,KAAAA,EAAA,GAAAI,GAsRyBZ,EAAAyG,UAAS7F,GAClB8F,KAAA,GACC,WAAQ,IAAMC,KACf,qBACCC,sBAAuB/F,EAAAgG,mBACvBC,OAAOjG,EAAAkG,UAAmB,M,mEAI/BnI,EAAAA,EAAAA,IAUEoI,EAAA,CATEC,UAAU,KACV/F,MAAM,qBACNP,MAAA,GACApC,KAAK,IAnSrB4C,WAqSyBnB,EAAAkH,iBArSzB,sBAAA1G,EAAA,MAAAA,EAAA,IAAAI,GAqSyBZ,EAAAkH,iBAAgBtG,GACzBuG,gBAAgB,wCAChBC,cAAc,MACd/F,aAAa,Q,wBAEjBxB,EAAAA,EAAAA,IAAuE,OAAvEwH,GAAuEhF,EAAAA,EAAAA,IAAtCrC,EAAAkH,iBAAiBI,QAAS,QAAK,MAElE1I,EAAAA,EAAAA,IAA0D6G,EAAA,CAAlDC,MAAA,GAAM6B,KAAK,SAAS3C,MAAM,W,CA5S5CjF,SAAAC,EAAAA,EAAAA,KA4SsD,IAAKY,EAAA,MAAAA,EAAA,MA5S3D3B,EAAAA,EAAAA,IA4SsD,aA5StD4B,EAAA,K,QAAAyC,EAAAA,EAAAA,IAAA,OAqTkBlD,EAAA+D,kBArTlBb,EAAAA,EAAAA,IAAA,SAqTkC,WAA5BzD,EAAAA,EAAAA,IAMM,MA3TZ+H,EAAA,CAsTmBxH,EAAAC,aAtTnBiD,EAAAA,EAAAA,IAAA,SAsT8B,WAAtBzD,EAAAA,EAAAA,IAIM,MA1TdgI,EAAA,EAuTU7I,EAAAA,EAAAA,IAEUuB,EAAA,CAFDC,KAAK,KAAKjB,MAAA,+BAAsCkB,QAAOC,EAAAoH,mB,CAvT1E/H,SAAAC,EAAAA,EAAAA,KAwTY,IAAwCY,EAAA,MAAAA,EAAA,MAAxCX,EAAAA,EAAAA,IAAwC,KAArCN,MAAM,4BAA0B,aAxT/CkB,EAAA,G,sBAgUkBT,EAAAC,aAAeD,EAAA2H,4BAA8B,IAAM3H,EAAA+D,mBAAgB,WAA/EtE,EAAAA,EAAAA,IAWM,MAXNmI,EAWMpH,EAAA,MAAAA,EAAA,MARJX,EAAAA,EAAAA,IAEI,KAFDV,MAAA,qEAAuE,oDAE1E,QArUR+D,EAAAA,EAAAA,IAAA,UAAAzC,EAAA,I,eA2WIZ,EAAAA,EAAAA,IAAoB,OAAfT,GAAG,OAAK,W,wHAgCjB,GACEyI,KAAM,mBACNC,MAAO,CACLC,eAAgBC,OAChBtE,aAAc,KACdH,UAAW0E,MACXxE,SAAUwE,MACVC,mBAAoBC,SAEtBC,WAAY,CACVC,UAAS,aACTC,aAAY,KACZC,SAAQ,KACRC,OAAM,KACNC,YAAW,KACXC,OAAM,KACNC,OAAM,KACNC,QAAO,KACPC,SAAQ,KACRC,YAAW,KACXC,SAAQ,IACRC,cAAaA,EAAAA,GAEfC,IAAAA,GACE,MAAO,CACLC,IAAK,KACLtD,SAAS,EACTxB,OAAQ,CAAC,EACTL,kBAAkB,EAClB9D,aAAa,EACbkJ,qBAAqB,EACrBzH,KAAM,KACN0H,SAAU,KACV9D,OAAQ,KACR+D,WAAY,KACZjI,QAAS,KACTkI,MAAO,KACPC,MAAO,KACP5B,4BAA6B,EAC7B1E,gBAAgB,EAChBN,iBAAiB,EACjB6G,aAAc,cACdC,kBAAmB,GACnB7G,QAAS,EACThB,QAAS8H,EAAAA,EACTC,KAAM,KACNC,aAAa,EACbzG,WAAW,EACX0G,UAAW,GAEXC,oBAAqB,KACrBrD,UAAW,KACXH,YAAa,GACbY,iBAAkB,GAEtB,EACA6C,OAAAA,GACE,MAAMC,EAAiBC,OAAOC,aAAaC,QAAQ,iBACnD,GAAIH,EAAgB,CAClB,MAAM3E,EAAO+E,KAAKC,MAAML,GACxBxF,KAAK4E,SAAW/D,EAAK+D,SACrB5E,KAAKc,OAASD,EAAKjG,EAErB,CAeAoF,KAAK8F,YAMY,IAAItN,OAAOC,KAAKsN,OAAO,CACtCC,KAAM,2DAGRhG,KAAKiG,sBAEL,MAAMC,EAAYT,OAAOC,aAAaC,QAAQ,iBAC9C,GAAIO,EAAW,CACb,MAAMzB,EAAOmB,KAAKC,MAAMK,GACxBrM,QAAQC,IAAI,WAAa2K,EAAK0B,YAC9BnG,KAAKiF,kBAAoBR,EAAK0B,WAC9BnG,KAAK5B,QAAUqG,EAAKnM,SACpB0H,KAAKoG,2BAA2BpG,KAAKiF,kBAAmBjF,KAAK5B,QAC/D,CAEA,MAAMiI,EAAeZ,OAAOC,aAAaC,QAAQ,oBACjD,GAAIU,EAAc,CAChB,MAAMC,EAAaV,KAAKC,MAAMQ,GAC9BxM,QAAQC,IAAI,uBAAyBwM,GAErCtG,KAAKvE,aAAc,EACnBuE,KAAKuG,WAAWD,EASlB,CAwBA,MAAME,EAAiBC,SAASC,eAC/B,YAEDF,EAAeG,iBAAiB,UAAWC,IACzC5G,KAAK5B,QAAUyI,WAAWD,EAAMhH,OAAO/E,OAEvC,MAAM4J,EAAO,CACX0B,WAAYnG,KAAKiF,kBACjB3M,SAAUuO,WAAWD,EAAMhH,OAAO/E,QAGpC4K,OAAOC,aAAaoB,QAAQ,gBAAiBlB,KAAKmB,UAAUtC,IAG5DzE,KAAKoG,2BAA2BpG,KAAKiF,kBAAmBjF,KAAK5B,QAAQ,IAMvE,MAAM4I,EAAQP,SAASC,eAAe,gBAEhCO,EAAS,CAAEC,IAAK,UAAWC,KAAM,YACjCC,EAAgB,CACpBC,MAAOJ,EAAOC,IAAM,GACpBI,MAAOL,EAAOC,IAAM,GACpBK,KAAMN,EAAOE,IAAM,GACnBK,KAAMP,EAAOE,IAAM,IAEfhK,EAAU,CACdsK,OAAQL,EACRM,sBAAuB,CAAEC,QAAS,MAClCC,OAAQ,CAAC,qBAAsB,WAAY,OAAQ,OAAQ,qBAC3DC,cAAc,GAGVC,EAAe,IAAItP,OAAOC,KAAKsP,OAAOC,aAAahB,EAAO7J,GAEhE2K,EAAaG,YAAY,iBAAiB,KACxC,IAAIC,EAAQJ,EAAaK,WACzBnI,KAAK8E,MAAQoD,EAAM3N,SAAS6N,SAASlB,MACrClH,KAAKqI,MAAQH,EAAM3N,SAAS6N,SAASjB,MAErCnH,KAAKsI,eAAeJ,EAAM3N,SAAS6N,SAASlB,MAAOgB,EAAM3N,SAAS6N,SAASjB,OAC3EnH,KAAKpD,QAAUsL,EAAMK,kBACrB1O,QAAQC,IAAI,gBAAkBoO,EAAMK,mBACpC1O,QAAQC,IAAI,mBAAqBkG,KAAK8E,MAAM,GAGhD,EACA0D,QAAS,CACPC,OAAAA,GACE5O,QAAQC,IAAI,cACZ2L,OAAOC,aAAagD,WAAW,mBACjC,EACAzL,iBAAAA,GACEpD,QAAQC,IAAI,WAAakG,KAAK9C,KAAKR,OACnCsD,KAAKoG,2BAA2BpG,KAAK9C,KAAKR,MAAOsD,KAAK5B,SACtD4B,KAAKiF,kBAAoBjF,KAAK9C,KAAKR,MACnCsD,KAAK7B,iBAAkB,CACzB,EACAgB,UAAAA,CAAW0B,GACTb,KAAK2I,MAAM,cAAe9H,EAG5B,EAEAxB,YAAAA,GACEW,KAAK2I,MAAM,aACb,EACArJ,SAAAA,CAAUsJ,EAASC,EAAMC,GAEvB9I,KAAK2I,MAAM,aAAcC,EAASC,EAAMC,EAE1C,EACAhD,SAAAA,GACE,IAAIiD,EAAQtC,SAASC,eAAe,OACpCqC,EAAMpO,MAAMqO,OAAS,OACrBD,EAAMpO,MAAMsO,MAAQ,MACtB,EACAC,OAAAA,GACElJ,KAAK1D,QAAQ6M,KAAK,MAGpB,EACAlD,mBAAAA,GACMmD,UAAUC,aACZD,UAAUC,YAAYC,oBAAmBC,IACvC,MAAM,SAAEC,EAAQ,UAAEC,GAAcF,EAASG,OAEzC1J,KAAK8E,MAAQ0E,EACbxJ,KAAKqI,MAAQoB,EACbzJ,KAAK2J,yBAA0BH,EAAUC,EAAU,GAIzD,EAEAG,SAAAA,CAAUxJ,GACR,MAAO,CACLyJ,KAAM,2EACNC,UAAW1J,EACX2J,YAAa,EACbC,YAAa,OACbC,aAAc,EACdC,MAAO,EAEX,EAEAP,wBAAAA,CAA0BH,EAAUC,GAExB,IAAIjR,OAAOC,KAAK0R,IAAI1D,SAASC,eAAe,OAAQ,CAC5D0D,KAAM,GACNnD,OAAQ,IAAIzO,OAAOC,KAAKC,OAAO8Q,EAAUC,GACzCY,UAAW7R,OAAOC,KAAK6R,UAAUC,QACjCC,SAAU,KAWZxK,KAAKsI,eAAgBkB,EAAUC,EACjC,EAEAnB,cAAAA,CAAgBpB,EAAKuD,GAEnBC,EAAAA,EAAMC,IAAI,4DAA8DzD,EACpE,IAAMuD,EADA,gDAGLG,MAAKC,IACJ,GAAIA,EAASpG,KAAKqG,cAChB9K,KAAK+K,MAAQF,EAASpG,KAAKqG,cAE3BjR,QAAQC,IAAI+Q,EAASpG,KAAKqG,mBACrB,CACO,IAAItS,OAAOC,KAAK0R,IAAI1D,SAASC,eAAe,OAAQ,CAC9D0D,KAAM,GACNnD,OAAQ,IAAIzO,OAAOC,KAAKC,OAAOwO,EAAKuD,GACpCJ,UAAW7R,OAAOC,KAAK6R,UAAUC,UAKnCvK,KAAKpD,QAAUiO,EAASpG,KAAKuG,QAAQ,GAAGzC,iBAC1C,KAGD0C,OAAMF,IACL/K,KAAK+K,MAAQA,EAAMG,QACnBrR,QAAQC,IAAIiR,EAAMG,QAAQ,GAElC,EAEAC,WAAAA,CAAaC,EAAWC,EAAWC,EAASC,GAC1C,IAAIhT,EAAS,IAAIC,OAAOC,KAAKC,OAAO0S,EAAWC,GAC3C1S,EAAc,IAAIH,OAAOC,KAAKC,OAAO4S,EAASC,GAClD,OAAQ/S,OAAOC,KAAK8B,SAASC,UAAUC,uBAAuBlC,EAAQI,GAAe,KAAM+B,QAAQ,EACrG,EAGA8Q,kBAAAA,CAAoBnG,EAAWc,EAAYsF,GACzC,IAAIC,GAAkB,EAClBC,EAAM,IAAInT,OAAOC,KAAK0R,IAAI1D,SAASC,eAAe,OAAQ,CAC5D0D,KAAM,EACNnD,OAAQ,IAAIzO,OAAOC,KAAKC,OAAOsH,KAAK8E,MAAO9E,KAAKqI,OAChDgC,UAAW7R,OAAOC,KAAK6R,UAAUC,UAEnC1Q,QAAQC,IAAI,gBAAkBuL,EAAUvC,QACxCjJ,QAAQC,IAAI,oBAAsB2R,GASlC,IAAIG,EAAQ,EAEZ,GAAIvG,EAAUvC,OAAS,EAAG,CACxB9C,KAAKJ,OAAS,CAAC,EAEf,IAAK,IAAIiM,EAAM,EAAGA,EAAMxG,EAAUvC,OAAQ+I,IAAO,CAC/ChS,QAAQC,IAAI,gBAAkBuL,EAAUwG,GAAKhM,QAG5BG,KAAK8E,MAAO9E,KAAKqI,MAClChD,EAAUwG,GAAK1F,WAAW2F,SAAQ5O,IAChC,GAAIA,IAASiJ,EAAY,CAEvBtM,QAAQC,IAAI,OAASoD,EAAK2C,QACJwF,EAAUwG,GAAKrC,SAAUnE,EAAUwG,GAAKpC,UAQ9D,GAPA5P,QAAQC,IAAI,gBAAkBkG,KAAKmL,YAAYnL,KAAK8E,MAAO9E,KAAKqI,MAAOhD,EAAUwG,GAAKrC,SAAUnE,EAAUwG,GAAKpC,YAK/GzJ,KAAKvB,gBAAiB,EAElBuB,KAAKmL,YAAYnL,KAAK8E,MAAO9E,KAAKqI,MAAOhD,EAAUwG,GAAKrC,SAAUnE,EAAUwG,GAAKpC,YAAcgC,EAAM,CAGvG,IAAIM,EAFJH,IAKEG,EAFE/L,KAAKT,iBAEE,IAAI/G,OAAOC,KAAKsN,OAAO,CAC9BwD,SAAU,IAAI/Q,OAAOC,KAAKC,OAAO2M,EAAUwG,GAAKrC,SAAUnE,EAAUwG,GAAKpC,WACzEe,SAAU,GACVmB,IAAKA,EACL3F,KAAMhG,KAAK4J,UAAU,UACrBlN,MAAO,CAAE0D,MAAO,UAAY4L,WAAY,OAAQC,SAAU,OAAQhS,KAAM,OAASoL,EAAUwG,GAAKhM,UAIzF,IAAIrH,OAAOC,KAAKsN,OAAO,CAC9BwD,SAAU,IAAI/Q,OAAOC,KAAKC,OAAO2M,EAAUwG,GAAKrC,SAAUnE,EAAUwG,GAAKpC,WACzEe,SAAU,GACVmB,IAAKA,IAUTlG,OAAOyG,iBAAmBlM,KAAKuG,WAG/B,MAIM4F,EAAa,IAAI3T,OAAOC,KAAK2T,WAAW,CAG5C,GAGF5T,OAAOC,KAAKmO,MAAMqB,YAAY8D,EAAQ,SAAS,WAI7ClS,QAAQC,IAAI,UAAY+R,GACxB,IAAIQ,EAAIR,EAEJH,GACFA,EAAgBY,QAGlBZ,EAAkBS,EAGlBA,EAAWI,KAAKZ,EAAII,GAEpBI,EAAWK,WAAW,6DAAgEnH,EAAUwG,GAAKhM,OAA/E,yDAAqJwM,EAArJ,uBAExB,IAEAxS,QAAQC,IAAI,mBAAqB4R,EAEnC,CAEF,IAGJ,CAGIE,EAAQ,GACV5L,KAAKvB,gBAAiB,EACtBuB,KAAKvE,aAAc,GAGnBuE,KAAKvB,gBAAiB,EAExBuB,KAAKmD,4BAA8ByI,EACnC/R,QAAQC,IAAI,WAAa8R,GACzB5L,KAAKyM,kBAGP,CAEF,EAEAC,cAAAA,GACE,GAAI1M,KAAKJ,OAAOiB,KAAK+D,WAAa5E,KAAK4E,SAAU,CAClC5E,KAAKJ,OAAOC,OAASG,KAAK4E,SACvC/K,QAAQC,IAAI,oBAAsBkG,KAAKJ,OAAOiB,KAAK+D,UACnD/K,QAAQC,IAAI,eAAiBkG,KAAKmF,MAUlC,MAAMwH,EAAiB,CACrBxH,KAAMnF,KAAKmF,KACXyH,IAAK5M,KAAKJ,OAAOC,OACjBnG,OAAQ,MACRkL,SAAU5E,KAAK4E,SACfiI,iBAAkB7M,KAAKJ,OAAOiB,KAAK+D,SACnCkI,WAAY9M,KAAKJ,OAAOiB,KAAKjG,IAEzBmS,EAAkB,CACtB5H,KAAMnF,KAAKmF,KACX6H,MAAOhN,KAAKJ,OAAOiB,KAAKjG,GACxBgS,IAAK5M,KAAKJ,OAAOC,OACjBoN,OAAQjN,KAAKJ,OAAOiB,KAAKjG,GACzBgK,SAAU5E,KAAKJ,OAAOiB,KAAK+D,UAI7B5E,KAAK2I,MAAM,iBAAkB,CAC3BuE,aAAcP,EACdQ,SAAUJ,GAGd,CACF,EAEA5L,eAAAA,GAqBEnB,KAAK0M,iBACL1M,KAAKrB,WAAY,CACnB,EAEA,gBAAM4H,CAAY8F,GAGhBxS,QAAQC,IAAI,mBACZ,MAAM8S,EAAM,CAAC5M,KAAKiF,mBAMZmI,QAAmCC,EAAAA,EAAgBC,iCAAiC,CAACC,OAAQX,IAEnG,IAAIY,EAAc,GAElBJ,EAA2BtB,SAAQ2B,IAEjC5T,QAAQC,IAAI,YAAc2T,EAAI5M,KAAKjG,IACnC,IAAItC,EAAWoV,SAAS1N,KAAKmL,YAAYnL,KAAK8E,MAAO9E,KAAKqI,MAAOoF,EAAIjE,SAAUiE,EAAIhE,YAAY/O,QAAQ,GACvGb,QAAQC,IAAI,uBAAyBxB,GACrCkV,EAAcA,EAAYG,OAAO,CAC/B/S,GAAI6S,EAAI5M,KAAKjG,GACb6Q,KAAMnT,EACNsU,IAAK5M,KAAKiF,mBACV,IAGJ2I,EAAAA,EAAOC,KAAK,oBAAqBL,GAEjC,MAAMnI,QAAkBgI,EAAAA,EAAgBS,eACpCzI,IAEEA,EAAUgH,GAAGxL,KAAK+D,WAAa5E,KAAK4E,WACtC5E,KAAK2E,qBAAsB,GAG7B9K,QAAQC,IAAI,uBAAyBkG,KAAKmF,MAE1CnF,KAAKJ,OAASyF,EAAUgH,GACxB5G,OAAOC,aAAaoB,QAAQ,mBAAoBlB,KAAKmB,UAAUsF,IAC3DrM,KAAK4E,SACP5E,KAAKmF,KAAOnF,KAAKJ,OAAOC,OAASG,KAAK4E,SAEtC5E,KAAKmF,KAAO,WAEdnF,KAAKT,kBAAmB,EAK5B,EACAgC,aAAAA,GACE1H,QAAQC,IAAI,+BAAiCkG,KAAKpD,SAClDoD,KAAKoB,SAAU,CACjB,EAEA,kBAAMQ,GAEJ,IAAImM,EACJ,GAFAlU,QAAQC,IAAI,SAERkG,KAAKiC,UAAW,CAClB,IAAI+L,EAAOhO,KAAKiC,UAAUgM,cACtBC,EAAQlO,KAAKiC,UAAUkM,WACvBC,EAAMpO,KAAKiC,UAAUoM,UACrBC,EAAOtO,KAAKiC,UAAUsM,WACtBC,EAASxO,KAAKiC,UAAUwM,aAC5B,MAAMC,EAAY,IAAIvM,KAAK6L,EAAME,EAAOE,EAAKE,EAAME,GAAQG,UAE3DZ,EAAY,CACVa,QAAS5O,KAAKiC,UACd4M,WAAYH,EACZI,OAAQ9O,KAAK8B,YACblF,QAASoD,KAAKpD,QACd4M,SAAUxJ,KAAK8E,MACf2E,UAAWzJ,KAAKqI,MAChBrD,aAAchF,KAAKiF,kBACnB8J,iBAAiB,EACjBf,KAAMhO,KAAKiC,UAAUgM,cACrBC,MAAOlO,KAAKiC,UAAUkM,WACtBC,IAAKpO,KAAKiC,UAAUoM,UACpBW,MAAOhP,KAAKiC,UAAUsM,WACtBU,QAASjP,KAAKiC,UAAUwM,aACxBS,YAAalP,KAAK0C,iBAClBhJ,OAAQ,UACRyV,QAASnP,KAAKJ,OAAOhF,GAIzB,CACAf,QAAQC,IAAI,YAAckG,KAAKpD,SAC/B,MAAMwS,QAAgBC,EAAAA,EAAiBC,aAAatP,KAAKc,OAAQiN,GAE3DwB,QAAmBF,EAAAA,EAAiBG,eAAeJ,EAAQxU,UAC3DyU,EAAAA,EAAiBI,gBAAgBL,EAAQxU,GAAIoF,KAAKJ,OAAOhF,IAC/D,MAAM8U,QAA0BrC,EAAAA,EAAgBsC,mBAAmB3P,KAAKJ,OAAOhF,GAAIwU,EAAQxU,IAC3F,GAA0B,wBAAtB8U,EAA6C,CAC/C7V,QAAQC,IAAI,aAAekG,KAAKJ,OAAOC,OAASG,KAAK4E,WACrD,MAAMO,EAAOnF,KAAKJ,OAAOC,OAASG,KAAK4E,SAG7B5E,KAAKJ,OAAOiB,KAAKjG,GACnBoF,KAAKJ,OAAOiB,KAAK+D,SAKzB5E,KAAK0M,gBAYP,CAIA,MAAM9R,EAAKoF,KAAKJ,OAAOiB,KAAKjG,GAC5BoF,KAAK2I,MAAM,qBAAsByG,GACjCxB,EAAAA,EAAOC,KAAK,kBAAmB,CAC7BjT,KACAwU,QAASG,IAEXvP,KAAK1D,QAAQ6M,KAAK,YACpB,EAEA,wBAAMzJ,GACJM,KAAKT,kBAAmB,EAExBS,KAAKX,eACLoG,OAAOC,aAAagD,WAAW,oBAC/B,MAAMrD,QAAkBgI,EAAAA,EAAgBS,eACtB,OAAdzI,GACFrF,KAAKwL,mBAAmBnG,EAAWrF,KAAKiF,kBAAmBjF,KAAK5B,QAEpE,EAEAS,YAAAA,GACEmB,KAAKrB,WAAY,CACnB,EAEA,uBAAMuE,GACJlD,KAAKvE,aAAc,EACnBgK,OAAOC,aAAagD,WAAW,iBAC/B1I,KAAKX,cASP,EAEAtD,cAAAA,GACEiE,KAAKvE,aAAc,EACnBuE,KAAKX,eACLxF,QAAQC,IAAI,mBACd,EAkBA,gCAAMsM,CAA4BD,EAAYsF,GAE5C5R,QAAQC,IAAI,4BAA8B2R,GAC1C,MAAMpG,QAAkBgI,EAAAA,EAAgBS,eACtB,OAAdzI,GACFrF,KAAKwL,mBAAmBnG,EAAWc,EAAYsF,EAGnD,EACAgB,gBAAAA,GACMzM,KAAKmD,4BAA8B,EACrCnD,KAAKgF,aAAe,gBAEpBhF,KAAKgF,aAAe,eAExB,I,UCpjCJ,MAAM4K,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://prore-mongo/./src/components/controllers/distance.js","webpack://prore-mongo/./src/pages/RecipientPublic.vue","webpack://prore-mongo/./src/pages/RecipientPublic.vue?a5fc"],"sourcesContent":["/*global google*/\nlet res = \"\";\nconst distance = () => {\n    //let text = \"\";\n    //let value = 0;\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\n    var service = new google.maps.DistanceMatrixService();\n    service.getDistanceMatrix(\n        {\n            origins: [origin],\n            destinations: [destination],\n            travelMode: 'DRIVING',\n            unitSystem: google.maps.UnitSystem.METRIC,\n            durationInTraffic: true,\n            avoidHighways: false,\n            avoidTolls: false\n        }, response_data);\n    //return response_data;\n}\n\nconst response_data = (responseDis, status) => {\n    //let result = \"\";\n    if (status !== google.maps.DistanceMatrixStatus.OK || status !== \"OK\"){\n        console.log('Error:', status);\n        // OR\n        alert(status);\n    }else{\n        //alert(responseDis.rows[0].elements[0].distance.text);\n        console.log(\"Distance \" + responseDis.rows[0].elements[0].distance.text)\n\n        res = responseDis.rows[0].elements[0].distance.text;\n        return \"aaaaaaaaaaaaa\"\n        //result = responseDis.rows[0].elements[0].distance.text;\n    }\n    //return  \"Hallo\"        //result.toString();\n}\n\nconst test = () => {\n    console.log(\"Is it working??\" + res)\n\n    return  <div>Hiiii</div>;\n}\n\nconst theDist = () => {\n    var origin = new google.maps.LatLng(60.233093,24.7531362);\n    var destination = new google.maps.LatLng(60.2767265,24.8575089);\n    return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n}\n\n// function calcDistance() {\n//     // var origin = new google.maps.LatLng(60.233093,24.7531362);\n//     // var destination = new google.maps.LatLng(60.2767265,24.8575089);\n//     // return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n//\n//     var directionsService = new google.maps.DirectionsService();\n//\n//     var request = {\n//         origin      : 'Melbourne VIC', // a city, full address, landmark etc\n//         destination : 'Sydney NSW',\n//         travelMode  : google.maps.DirectionsTravelMode.DRIVING\n//     };\n//\n//     directionsService.route(request, function(response, status) {\n//         if ( status === google.maps.DirectionsStatus.OK ) {\n//             alert( response.routes[0].legs[0].distance.value ) ; // the distance in metres\n//         }\n//         else {\n//             // oops, there's no route between these two locations\n//             // every time this happens, a kitten dies\n//             // so please, ensure your address is formatted properly\n//         }\n//     });\n// }\n\nexport default { distance, test, theDist }","<template>\n  <div>\n\n\n\n    <MDBContainer\n\n        style=\"position: relative; z-index: 1;\n        /*width: 80%;*/\n        margin-top: 80px;\n        opacity: 0.8;\n        \"\n    >\n\n\n\n<!--      <MDBBtn color=\"danger\" @click=\"puhasta\">Puhasta kaardi andmed</MDBBtn>-->\n\n      <div :class=\"{hideMainPanel: !isMainPanel}\" style=\"background-color: #2b2a2a; padding: 10px;\">\n        <div style=\"display: flex; justify-content: right;\">\n          <MDBIcon size=\"lg\" style=\"padding: 10px;\" @click=\"closeMainPanel\">\n            <i class=\"fas fa-compress-arrows-alt\"></i>\n          </MDBIcon>\n          <div>\n            <MDBBtnClose\n                white\n                style=\" padding: 10px;\"\n                size=\"lg\"\n                @click=\"$router.go(-1)\"\n            />\n          </div>\n\n\n\n        </div>\n\n<!--        <MDBBtn color=\"info\"-->\n<!--                v-if=\"isMainPanel\"-->\n<!--                size=\"lg\"-->\n<!--                block-->\n<!--                @click=\"receive\"-->\n<!--                style=\"position: relative; z-index:1; opacity: 1.2; margin-bottom: 10px;\"-->\n<!--        >-->\n<!--          Tee uusi tilaus-->\n<!--        </MDBBtn>-->\n\n        <div id=\"panel\">\n          <MDBInput\n              white\n              label=\"Anna toinen osoitteesi kun ei täsmää\"\n              v-model=\"address\"\n              id=\"autocomplite\"\n              size=\"lg\"\n              wrapperClass=\"mb-4\"\n          />\n        </div>\n<!--        <span id=\"listOfProfessionals\">Options</span>-->\n<!--        <Dropdown aria-labelledby=\"listOfProfessionals\" />-->\n\n\n        <div style=\" margin-bottom: 20px;\" >\n          <Dropdown  @change=\"changedProfession\"   v-model=\"prof\" :options=\"prodata\"   filter optionLabel=\"label\" optionGroupLabel=\"label\" optionGroupChildren=\"items\" placeholder=\"Valitse ammattilainen\" class=\"w-full md:w-100rem\">\n\n            <template value=\"slotProps\" >\n              <div v-if=\"slotProps.value\" >\n                <!--              <img :alt=\"slotProps.value.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`mr-2 flag flag-${slotProps.value.code.toLowerCase()}`\" style=\"width: 18px\" />-->\n                <div >{{ slotProps.value.label }}</div>\n              </div>\n              <span v-else>\n              {{ slotProps.placeholder }}\n            </span>\n            </template>\n            <template  #optiongroup=\"slotProps\"  >\n              <div style=\"\" class=\"flex align-items-center\">\n                <!--              <img :alt=\"slotProps.option.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`mr-2 flag flag-${slotProps.option.code.toLowerCase()}`\" style=\"width: 18px\" />-->\n                <div >{{ slotProps.option.label }}</div>\n              </div>\n            </template>\n          </Dropdown>\n        </div>\n\n\n\n<!--        <select style=\"padding: 12px; width: 100%;\"  id=\"listOfProfessionals\" v-model=\"prof\">-->\n<!--          <option value=\"\">Valitse ammattilainen</option>-->\n<!--          <template v-for=\"option in prodata\">-->\n\n<!--            &lt;!&ndash; if the `group` property is truthy &ndash;&gt;-->\n<!--            <optgroup v-if=\"option.group\" :label=\"option.group\" :key=\"option.group\">-->\n<!--              <option v-for=\"opt in option.options\" :value=\"opt.label\" :key=\"opt.label\">-->\n<!--                {{ opt.label }}-->\n<!--              </option>-->\n<!--            </optgroup>-->\n<!--            &lt;!&ndash; otherwise &ndash;&gt;-->\n<!--            <option v-else :value=\"option\" :key=\"option.value\">-->\n<!--              {{ option.label }}-->\n<!--            </option>-->\n<!--          </template>-->\n\n<!--        </select>-->\n\n\n        <div  :class=\"{hideDistSelectPanel: !isDistSelection}\" style=\"padding-top: 10px;\">\n          <select style=\"padding: 12px; width: 100%; background-color: dimgrey; color: white;\" id=\"distance\" v-model=\"distBtw\" @click=\"filterByDistance\">\n            <option disabled value=\"1\">1 kilometriä ympärilläsi</option>\n            <option value=\"2\">2 km ympärilläsi</option>\n            <option value=\"3\">3 km ympärilläsi</option>\n            <option value=\"4\">4 km ympärilläsi</option>\n            <option value=\"5\">5 km ympärilläsi</option>\n            <option value=\"6\">6 km ympärilläsi</option>\n            <option value=\"7\">7 km ympärilläsi</option>\n            <option value=\"8\">8 km ympärilläsi</option>\n            <option value=\"9\">9 km ympärilläsi</option>\n            <option value=\"10\">10 km ympärilläsi</option>\n            <option value=\"20\">20 km ympärilläsi</option>\n            <option value=\"30\">30 km ympärilläsi</option>\n            <option value=\"40\">40 km ympärilläsi</option>\n            <option value=\"50\">50 km ympärilläsi</option>\n            <option value=\"60\">60 km ympärilläsi</option>\n            <option value=\"70\">70 km ympärilläsi</option>\n            <option value=\"80\">80 km ympärilläsi</option>\n            <option value=\"90\">90 km ympärilläsi</option>\n            <option value=\"100\">100 km ympärilläsi</option>\n            <option value=\"200\">200 km ympärilläsi</option>\n            <option value=\"300\">300 km ympärilläsi</option>\n          </select>\n\n        </div>\n\n\n<!--        <h3-->\n<!--            :class=\"{activeClients: !isActiveProffs}\"-->\n<!--        >-->\n<!--          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua-->\n<!--        </h3>-->\n        <h3\n            v-if=\"prof\"\n            :class=\"{noClients: isActiveProffs}\"\n        >\n          Ei ammattilaisia vielä!\n        </h3>\n\n\n      </div>\n\n\n\n      <div v-if=\"isMapChat\" style=\"background-color: white; margin: auto; padding: 10px; width: 350px;  border: solid darkgrey\">\n        <p style=\"float: right; color: limegreen;\" @click=\"closeMapChat\">Valmis</p>\n        <chat-panel\n\n            :chatusers = chatusers\n            :messages =messages\n            :selecteduser = selecteduser\n            @select:user = selectUser\n            @noSelected = noSelectUser\n            @on:message = onMessage\n        />\n      </div>\n\n      <div class=\"map-info-table\" v-else-if=\"isTargetSelected && !isMapChat\" style=\"background-color: white; padding: 10px; width: 90%; margin: auto;  border: solid darkgrey\">\n        <div style=\"display: flex; justify-content: right;\">\n          <p style=\" font-size: 15px; padding: 10px; color: green;\" @click=\"outFromMarkerPanel\">Valmis</p>\n        </div>\n\n        <table style=\"font-size: 14px; width: 100%; text-align: left;\">\n          <tbody>\n          <tr>\n            <td>\n              Yritys:\n            </td>\n            <td>\n              {{ this.target.yritys }}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Y - tunnus:\n            </td>\n            <td>\n              {{this.target.ytunnus}}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Työalue:\n            </td>\n            <td>\n              {{this.target.range ? this.target.range + \" km\" : \"Palvelun tarjous vain paikalla!\"}}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Palvelun hinta:\n            </td>\n            <td>\n              {{this.target.priceByHour ? this.target.priceByHour + \" Euroa / tunti\": \"Urakkahinta sovittaessa!\"}}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Saatu palaute:\n            </td>\n            <td>\n              <MDBIcon  style=\"padding: 10px; cursor: pointer;\" class=\"far fa-smile\" size=\"lg\"\n                        @click=\"negative\"></MDBIcon>\n\n\n              <MDBBadge color=\"success\" class=\"translate-middle p-1\"\n                        pill\n                        notification>\n                <p>{{this.target.rating.positive}}</p>\n              </MDBBadge>\n\n\n              <MDBIcon  style=\"padding: 10px; cursor: pointer;\" class=\"far fa-frown\" size=\"lg\"\n                        @click=\"negative\"></MDBIcon>\n\n\n\n              <MDBBadge color=\"danger\" class=\"translate-middle p-1\"\n                        pill\n                        notification>\n                <p>{{this.target.rating.negative}}</p>\n              </MDBBadge>\n            </td>\n          </tr>\n          <tr v-if=\"this.target.pro_link\">\n            <td>\n              Kotisivu\n            </td>\n            <td>\n              <a :href=\"'//' + this.target.pro_link\" target=\"_blank\">\n                Palveluntarjoajan kotisivu\n              </a>\n            </td>\n          </tr>\n          <tr v-if=\"target.user.id !== userId\">\n<!--            v-if=\"isCreatingChatPanel\"-->\n            <td colspan=\"2\">\n              <MDBBtn  block color=\"secondary\" size=\"lg\" @click=\"createChatPanel\">Chattailemaan</MDBBtn>\n            </td>\n          </tr>\n          <tr v-if=\"target.user.id !== userId && !isOrder\">\n            <td colspan=\"2\">\n              <MDBBtn  block color=\"success\" size=\"lg\" @click=\"createBooking\">Tee tilaus</MDBBtn>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n\n      </div>\n\n      <div v-if=\"isOrder\" class=\"order\">\n<!--        <p style=\"color: green; display: flex; justify-content: right; padding: 20px;\" @click=\"isOrder = false\">Valmis</p>-->\n        <div style=\"display: flex; justify-content: right; padding: 20px;\">\n          <MDBBtnClose\n            white\n            size=\"lg\"\n            @click=\"isOrder = false\"\n          />\n        </div>\n\n        <form @submit.prevent=\"confirmOrder\">\n          <p style=\"color: #00a6ff; text-align: left;\">Address: {{address}}</p>\n\n          <MDBInput\n              white\n              label=\"Anna otsiko\"\n              v-model=\"orderHeader\"\n              wrapperClass=\"mb-4\"\n          />\n\n          <p style=\"text-align: left;\">Missä ajalla haluaisit ammattilaista?</p>\n\n          <div style=\"color: #fff;\">\n            <VueDatePicker\n                style=\"margin-bottom: 20px;\"\n                v-model=\"orderDate\"\n                dark\n                :min-date=\"new Date()\"\n                teleport-center\n                @internal-model-change=\"handleInternalDate\"\n                :state=\"isNoDate ? false : null\"\n            >\n\n            </VueDatePicker>\n            <MDBTextarea\n                maxlength=\"70\"\n                label=\"Tehtävän kuvaus...\"\n                white\n                rows=\"2\"\n\n                v-model=\"orderDescription\"\n                invalidFeedback=\"Ole hyvä ja kirjoita tehtävän kuvaus.\"\n                validFeedback=\"Ok!\"\n                wrapperClass=\"mb-4\"\n            />\n            <span class=\"message-counter\">{{ orderDescription.length }} / 70</span>\n          </div>\n          <MDBBtn block type=\"submit\" color=\"success\">Tilaa</MDBBtn>\n        </form>\n\n      </div>\n\n\n\n<!--      <p style=\"color: red;\">selecteduser {{selecteduser}}</p>-->\n\n      <div v-if=\"!isTargetSelected\">\n        <div v-if=!isMainPanel >\n          <MDBIcon size=\"2x\" style=\"float: right; padding: 10px;\" @click=\"returnToMainPanel\">\n            <i class=\"fas fa-expand-arrows-alt\"></i>\n          </MDBIcon>\n        </div>\n      </div>\n\n\n\n<!--      style=\"background-color:white; width: 40%; float: right;\"-->\n      <div v-if=\"!isMainPanel && countOfSelectedProfessional > 0 && !isTargetSelected\" style=\"background-color:white;\">\n\n\n        <p style=\"color: red; font-size: 14px; text-align: left; padding: 15px; \">\n          Napsauta merkkiä nähdäksesi palveluntarjoajan!\n        </p>\n\n<!--        <p style=\"color: blue;\">-->\n<!--          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua-->\n<!--        </p>-->\n\n      </div>\n\n\n\n<!--      <MDBBtn color=\"dark\"-->\n<!--              v-if=\"isMainPanel\"-->\n<!--              size=\"lg\"-->\n<!--              block-->\n<!--              @click=\"receive\"-->\n<!--              style=\"position: relative; z-index:1; opacity: 1.2;\"-->\n<!--      >-->\n<!--        Tee uusi tilaus-->\n<!--      </MDBBtn>-->\n\n\n<!--      <MDBBtn color=\"danger\"-->\n<!--              v-if=\"isMainPanel\"-->\n<!--              size=\"lg\"-->\n<!--              block-->\n<!--              @click=\"$router.go(-1)\"-->\n<!--              style=\"position: relative; z-index:1; opacity: 1.0;\"-->\n<!--      >-->\n<!--        Poistu-->\n<!--      </MDBBtn>-->\n\n    </MDBContainer>\n<!--    <h3 style=\"margin-top: 50px;\">Kartta ladataan...</h3>-->\n<!--    <div class=\"spinner-border\" role=\"status\">-->\n<!--      <span class=\"visually-hidden\">Loading...</span>-->\n<!--    </div>-->\n<!--    <section id=\"map\"></section>-->\n\n    <div id=\"map\"></div>\n\n\n  </div>\n\n</template>\n\n<script>\n/* eslint-disable */\n/*global google*/\nimport axios from 'axios'\nimport recipientService from '../service/recipients'\nimport providerService from '../service/providers'\nimport {\n  MDBContainer,\n  MDBInput,\n  MDBBtn,\n  MDBBtnClose,\n  MDBRow,\n  MDBCol,\n  MDBIcon,\n  MDBBadge,\n  MDBTextarea\n} from \"mdb-vue-ui-kit\";\nimport distance from '../components/controllers/distance'\nimport gMap from '../components/location'\nimport proData from '@/components/profession/proList'\nimport chatPanel from '@/pages/LiveChat'\nimport VueDatePicker from '@vuepic/vue-datepicker';\nimport Dropdown from 'primevue/dropdown';\nimport '@/css/pro.css'\nimport socket from \"@/socket\";\nexport default {\n  name: \"recipient-public\",\n  props: {\n    userIsProvider: Object,\n    selecteduser: null,\n    chatusers: Array,\n    messages: Array,\n    isProviderLoggedIn: Boolean\n  },\n  components: {\n    chatPanel,\n    MDBContainer,\n    MDBInput,\n    MDBBtn,\n    MDBBtnClose,\n    MDBRow,\n    MDBCol,\n    MDBIcon,\n    MDBBadge,\n    MDBTextarea,\n    Dropdown,\n    VueDatePicker\n  },\n  data () {\n    return {\n      obj: null,\n      isOrder: false,\n      target: {}, // Selected provider from map\n      isTargetSelected: false,\n      isMainPanel: true,\n      isCreatingChatPanel: false,\n      prof: null,\n      username: null,\n      userId: null,\n      providerId: null,\n      address: null,\n      myLat: null,\n      mylng: null,\n      countOfSelectedProfessional: 0,\n      isActiveProffs: false,\n      isDistSelection: false,\n      professional: \"Automaalari\",\n      currentProfession: \"\",\n      distBtw: 1,\n      prodata: proData,\n      room: null,\n      isChatPanel: true,\n      isMapChat: false,\n      providers: [],\n\n      selectedProPosition: null,\n      orderDate: null,\n      orderHeader: \"\",\n      orderDescription: \"\"\n    }\n  },\n  mounted () {\n    const loggedUserJSON = window.localStorage.getItem('loggedAppUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      this.username = user.username;\n      this.userId = user.id\n      //console.log(\"User token: \" + this.loggedUser.token)\n    }\n\n\n  // @media screen and (max-width: 480px) {\n  //     select{\n  //       /* Add your mobile only CSS here */\n  //     }\n  //   }\n  //\n  //   select {\n  //     /* Add your non-mobile CSS here */\n  //   }\n  //\n\n\n    this.resizeMap();\n\n    //console.log(\"Is provider in \" + this.isProviderLoggedIn)\n\n    //console.log(\"User id in providers \" + this.userId)\n\n    const myMarker = new google.maps.Marker({\n      icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\n    })\n\n    this.userCurrentLocation();\n\n    const mapSearch = window.localStorage.getItem('mapSearchData')\n    if (mapSearch) {\n      const data = JSON.parse(mapSearch)\n      console.log(\"Data+++ \" + data.profession);\n      this.currentProfession = data.profession;\n      this.distBtw = data.distance;\n      this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\n    }\n\n    const mapSearchPro = window.localStorage.getItem('mapSearchProData');\n    if (mapSearchPro) {\n      const currentPro = JSON.parse(mapSearchPro);\n      console.log(\"Pro pos in map ---- \" + currentPro);\n      // console.log(\"User id --------- \" + currentPro.user.id)\n      this.isMainPanel = false;\n      this.openMarker(currentPro);\n\n      //this.isTargetSelected = true;\n\n\n      //this.target = currentPro;\n      //console.log(\"User id in target --------- \" + this.target.user.id)\n\n      // isTargetSelected && !isMapChat\n    }\n\n    //this.setProviderId()\n\n\n\n\n\n    // const selectProfession = document.getElementById(\"listOfProfessionals\")\n    //\n    // selectProfession.addEventListener(\"change\", (event) => {\n    //   this.isDistSelection = true;\n    //\n    //   console.log(\"Selected \" + event.target.value);\n    //\n    //   this.currentProfession = event.target.value;\n    //   this.showClientLocationOnTheMap(event.target.value, this.distBtw);\n    // })\n\n    // this.currentProfession = \"Automaalari\";\n    // this.distBtw = 20;\n    //\n    // this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\n\n    const selectDistance = document.getElementById\n    (\"distance\");\n\n    selectDistance.addEventListener(\"change\", (event) => {\n      this.distBtw = parseFloat(event.target.value);\n\n      const data = {\n        profession: this.currentProfession,\n        distance: parseFloat(event.target.value)\n      }\n\n      window.localStorage.setItem('mapSearchData', JSON.stringify(data));\n\n      //console.log(\"+++++++++++ \" + this.countOfSelectedProfessional > 0)\n      this.showClientLocationOnTheMap(this.currentProfession, this.distBtw);\n\n    })\n\n\n\n    const input = document.getElementById(\"autocomplite\");\n\n    const center = { lat: 50.064192, lng: -130.605469 };\n    const defaultBounds = {\n      north: center.lat + 0.1,\n      south: center.lat - 0.1,\n      east: center.lng + 0.1,\n      west: center.lng - 0.1,\n    };\n    const options = {\n      bounds: defaultBounds,\n      componentRestrictions: { country: \"fi\" },\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\", \"formatted_address\"],\n      strictBounds: false,\n      //types: [\"establishment\"],\n    };\n    const autocomplete = new google.maps.places.Autocomplete(input, options);\n\n    autocomplete.addListener(\"place_changed\", () => {\n      let place = autocomplete.getPlace()\n      this.myLat = place.geometry.location.lat();\n      this.myLng = place.geometry.location.lng();\n\n      this.getAddressFrom(place.geometry.location.lat(), place.geometry.location.lng())\n      this.address = place.formatted_address;\n      console.log(\"Address xxxx \" + place.formatted_address)\n      console.log(\"place-----------\" + this.myLat)\n    });\n\n  },\n  methods: {\n    puhasta () {\n      console.log(\"Puhastatud\")\n      window.localStorage.removeItem('mapSearchProData');\n    },\n    changedProfession () {\n      console.log(\"Changed \" + this.prof.label);\n      this.showClientLocationOnTheMap(this.prof.label, this.distBtw);\n      this.currentProfession = this.prof.label;\n      this.isDistSelection = true;\n    },\n    selectUser(user) {\n      this.$emit('select:user', user);\n      //if (!user.self)\n      //this.selectedUser = user;\n    },\n\n    noSelectUser () {\n      this.$emit(\"noSelected\");\n    },\n    onMessage(content, blob, date) {\n\n      this.$emit(\"on:message\", content, blob, date);\n\n    },\n    resizeMap() {\n      var myMap = document.getElementById('map');\n      myMap.style.height = \"100%\";\n      myMap.style.width = \"100%\";\n    },\n    receive (){\n      this.$router.push('/rf')\n      //this.$router.push('recipient-form');\n\n    },\n    userCurrentLocation () {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const { latitude, longitude } = position.coords;\n          // Show a map centered at latitude / longitude.\n          this.myLat = latitude\n          this.myLng = longitude\n          this.showUserLocationOnTheMap (latitude, longitude)\n        });\n      }\n\n    },\n\n    pinSymbol(color) {\n      return {\n        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',\n        fillColor: color,\n        fillOpacity: 1,\n        strokeColor: '#000',\n        strokeWeight: 2,\n        scale: 1\n      };\n    },\n    // Kasutaja sihtkoht, otsitakse automaatselt\n    showUserLocationOnTheMap (latitude, longitude) {\n\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 13,\n        center: new google.maps.LatLng(latitude, longitude),\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        accuracy: 50,\n\n      });\n\n      // new google.maps.Marker({\n      //   position: new google.maps.LatLng(latitude, longitude),\n      //   accuracy: 50,\n      //   map: map,\n      //   icon: this.pinSymbol('yellow'),\n      //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n      // })\n      this.getAddressFrom (latitude, longitude)\n    },\n    // Siis kui sisestada käsitsi aadress\n    getAddressFrom (lat, long) {\n\n      axios.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat +\n          \",\" + long\n          + \"&key=\" + 'AIzaSyDt2YXE5tk0J72JgqnH3DTD7MeoqbbWBmU')\n          .then(response => {\n            if (response.data.error_message) {\n              this.error = response.data.error_message;\n\n              console.log(response.data.error_message)\n            } else {\n              const map = new google.maps.Map(document.getElementById(\"map\"), {\n                zoom: 13,\n                center: new google.maps.LatLng(lat, long),\n                mapTypeId: google.maps.MapTypeId.ROADMAP\n              });\n\n              // AIzaSyBDA2EBoGezJx51wQtxoW3Ecq5Ql8CCAiE\n\n              this.address = response.data.results[1].formatted_address\n            }\n\n          })\n          .catch(error => {\n            this.error = error.message\n            console.log(error.message)\n          })\n    },\n\n    distanceBtw (originLat, originLng, destLat, destLng) {\n      var origin = new google.maps.LatLng(originLat, originLng);\n      var destination = new google.maps.LatLng(destLat, destLng);\n      return (google.maps.geometry.spherical.computeDistanceBetween(origin, destination) / 1000).toFixed(2);\n    },\n\n\n    otherUserLocations (providers, profession, dist) {\n      let prev_infowindow = false;\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 9,\n        center: new google.maps.LatLng(this.myLat, this.myLng),\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n      });\n      console.log(\"Users count: \" + providers.length)\n      console.log(\"Current distance \" + dist)\n\n       // new google.maps.Marker({\n       //   position: new google.maps.LatLng(this.myLat, this.myLng),\n       //   accuracy: 50,\n       //   map: map,\n       //   icon: this.pinSymbol('yellow'),\n       //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\n       // })\n      let count = 0;\n\n      if (providers.length > 0) {\n        this.target = {};\n\n        for (let pos = 0; pos < providers.length; pos++) {\n          console.log(\"------------ \" + providers[pos].yritys);\n          //console.log(\"Client latitude: \" + recipient[pos].latitude)\n          //console.log(\"Client longitude: \" + recipient[pos].longitude)\n          let myLatLong = [this.myLat, this.myLng];\n          providers[pos].profession.forEach(prof => {\n            if (prof === profession) {\n              //his.providers.push(providers[pos])\n              console.log(\"Pro \" + prof.yritys)\n              let providerLatLng = [providers[pos].latitude, providers[pos].longitude];\n              console.log(\"Distance btw \" + this.distanceBtw(this.myLat, this.myLng, providers[pos].latitude, providers[pos].longitude));\n\n              //distance.theDist()\n\n              //this.countOfSelectedClient++;\n              this.isActiveProffs = true;\n\n              if (this.distanceBtw(this.myLat, this.myLng, providers[pos].latitude, providers[pos].longitude) <= dist) {\n                count ++;\n\n                let marker;\n                if (this.isTargetSelected) {\n\n                  marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                    accuracy: 50,\n                    map: map,\n                    icon: this.pinSymbol('orange'),\n                    label: { color: '#f75959',  fontWeight: 'bold', fontSize: '14px', text: 'TMI ' + providers[pos].yritys }\n                  })\n                } else {\n\n                  marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(providers[pos].latitude, providers[pos].longitude),\n                    accuracy: 50,\n                    map: map\n                  })\n\n                }\n\n\n\n                // this.target = providers[pos];\n                // this.room = providers[pos].yritys + this.username;\n\n                window.myGlobalFunction = this.openMarker;\n\n\n                const content = \"class='map-info-window'\"\n\n\n\n                const infowindow = new google.maps.InfoWindow({\n                  //content: \"Hei hei!\"\n                  //content:'<p id=\"map-info-window\">Hello World!</p>'\n                  //content: \"TMI: \" + providers[pos].yritys\n                });\n\n                google.maps.event.addListener(marker, 'click', function() {\n                  //infowindow.setContent(content);\n\n\n                  console.log(\"POOOOS \" + pos)\n                  let p = pos\n\n                  if( prev_infowindow ) {\n                    prev_infowindow.close();\n                  }\n\n                  prev_infowindow = infowindow;\n\n\n                  infowindow.open(map,marker);\n\n                  infowindow.setContent(\"<div  class='map-info-window'>\" + '<p style=\"color: green; \">'+providers[pos].yritys+'</p>' + '<p style=\"color: red; \" onclick=\"myGlobalFunction('+ p +' )\">Tiedot</p>' + \"</div>\")\n\n                });\n\n                console.log(\"Prev infowondow \" + prev_infowindow)\n\n              }\n\n            }\n          })\n\n        }\n\n\n        if (count > 0) {\n          this.isActiveProffs = true;\n          this.isMainPanel = false;\n\n        } else {\n          this.isActiveProffs = false;\n        }\n        this.countOfSelectedProfessional = count;\n        console.log(\"countxx \" + count)\n        this.identifyProfText();\n        //console.log(\"Count \" + this.countOfSelectedClients)\n\n      }\n\n    },\n\n    handleInitChat () {\n      if (this.target.user.username !== this.username) {\n        const room = this.target.yritys + this.username;\n        console.log(\"Username in map: \" + this.target.user.username);\n        console.log(\"Room in map \" + this.room);\n        // Room users in server will be created\n        // socket.emit(\"create room users\", {\n        //   room: this.room,\n        //   pro: this.target.yritys,\n        //   status: \"map\",\n        //   username: this.username,\n        //   providerUsername: this.target.user.username,\n        //   providerID: this.target.user.id\n        // })\n        const createChatRoom = {\n          room: this.room,\n          pro: this.target.yritys,\n          status: \"map\",\n          username: this.username,\n          providerUsername: this.target.user.username,\n          providerID: this.target.user.id\n        }\n        const chatCredentials = {\n          room: this.room,\n          proID: this.target.user.id,\n          pro: this.target.yritys,\n          userID: this.target.user.id,\n          username: this.target.user.username\n        }\n        //this.$emit(\"chatCredentials\", chatCredentials);\n\n        this.$emit(\"initializeChat\", {\n          initChatRoom: createChatRoom,\n          chatData: chatCredentials\n        });\n\n      }\n    },\n\n    createChatPanel () {\n      // if (this.target.user.username !== this.username) {\n      //   const room = this.target.yritys + this.username;\n      //   console.log(\"Username in map: \" + this.target.user.username);\n      //   console.log(\"Room in map \" + this.room);\n      //   // Room users in server will be created\n      //   socket.emit(\"create room users\", {\n      //     room: this.room,\n      //     pro: this.target.yritys,\n      //     status: \"map\",\n      //     username: this.username,\n      //     providerUsername: this.target.user.username,\n      //     providerID: this.target.user.id\n      //   })\n      //   const chatCredentials = {\n      //     room: this.room,\n      //     userID: this.target.user.id,\n      //     username: this.target.user.username\n      //   }\n      //   this.$emit(\"chatCredentials\", chatCredentials);\n      // }\n      this.handleInitChat();\n      this.isMapChat = true\n    },\n\n    async openMarker (p) {\n      //this.noSelectUser();\n      //console.log(\"Profession \" + this.currentProfession);\n      console.log(\"Pro profession \" )\n      const pro = [this.currentProfession]\n      // if (this.target.user.username !== this.username) {\n      //   this.room = this.target.yritys + this.username;\n      // }\n\n\n      const providersMatchingProSearch = await providerService.getProvidersMatchingByProfession({result: pro});\n\n      let dataForward = [];\n\n      providersMatchingProSearch.forEach(pms => {\n\n        console.log(\"Results: \" + pms.user.id);\n        let distance = parseInt(this.distanceBtw(this.myLat, this.myLng, pms.latitude, pms.longitude)).toFixed(0)\n        console.log(\"Distance to display \" + distance);\n        dataForward = dataForward.concat({\n          id: pms.user.id,\n          dist: distance,\n          pro: this.currentProfession\n        })\n      })\n\n      socket.emit(\"map search report\", dataForward);\n\n      const providers = await providerService.getProviders()\n      if (providers) {\n        //console.log(\"watcher position \" + this.myLat + \" / \" + this.myLng);\n        if (providers[p].user.username !== this.username) {\n          this.isCreatingChatPanel = true\n        }\n\n        console.log(\"Room in client map: \" + this.room);\n\n        this.target = providers[p];\n        window.localStorage.setItem('mapSearchProData', JSON.stringify(p));\n        if (this.username) {\n          this.room = this.target.yritys + this.username;\n        } else {\n          this.room = \"nipitiri\";\n        }\n        this.isTargetSelected = true;\n        //console.log(\"Pooooos ---- \" + p);\n        //this.otherUserLocations(providers, this.currentProfession, this.distBtw)\n      }\n\n    },\n    createBooking () {\n      console.log(\"Here you can make an order! \" + this.address)\n      this.isOrder = true;\n    },\n\n    async confirmOrder () {\n      console.log(\"Order\")\n      let recipient;\n      if (this.orderDate) {\n        let year = this.orderDate.getFullYear();\n        let month = this.orderDate.getMonth();\n        let day = this.orderDate.getDate();\n        let hour = this.orderDate.getHours();\n        let minute = this.orderDate.getMinutes();\n        const dateForMs = new Date(year, month, day, hour, minute).getTime();\n\n        recipient = {\n          created: this.orderDate,\n          created_ms: dateForMs,\n          header: this.orderHeader,\n          address: this.address,\n          latitude: this.myLat,\n          longitude: this.myLng,\n          professional: this.currentProfession,\n          isIncludeOffers: false,\n          year: this.orderDate.getFullYear(),\n          month: this.orderDate.getMonth(),\n          day: this.orderDate.getDate(),\n          hours: this.orderDate.getHours(),\n          minutes: this.orderDate.getMinutes(),\n          description: this.orderDescription,\n          status: \"notSeen\",\n          ordered: this.target.id\n        }\n\n\n      }\n      console.log(\"Address: \" + this.address);\n      const booking = await recipientService.addRecipient(this.userId, recipient)\n      //const room = this.target.yritys + this.username;\n      const proBooking = await recipientService.getBookingById(booking.id);\n      await recipientService.addProviderData(booking.id, this.target.id);\n      const bookingToProvider = await providerService.addProviderBooking(this.target.id, booking.id);\n      if (bookingToProvider === \"Recipient is added!\") {\n        console.log(\"Iiiiisss \" + (this.target.yritys + this.username))\n        const room = this.target.yritys + this.username;\n        const chatUserDataNavbar = {\n          status: \"\",\n          userID: this.target.user.id,\n          name: this.target.user.username,\n          room: room\n        };\n\n\n        this.handleInitChat();\n\n\n        // const chatCredentials = {\n        //   room: this.room,\n        //   pro: this.target.yritys,\n        //   userID: this.target.user.id,\n        //   username: this.target.user.username\n        // }\n        // this.$emit(\"chatCredentials\", chatCredentials);\n\n        //this.$emit('client:confirmed_provider', this.target.id, booking, chatUserDataNavbar);\n      }\n\n\n\n      const id = this.target.user.id;\n      this.$emit('booking_map:update', booking)\n      socket.emit(\"accept provider\", {\n        id,\n        booking: proBooking,\n      })\n      this.$router.push('/received')\n    },\n\n    async outFromMarkerPanel () {\n      this.isTargetSelected = false\n      //this.isMainPanel = true;\n      this.noSelectUser();\n      window.localStorage.removeItem('mapSearchProData');\n      const providers = await providerService.getProviders()\n      if (providers !== null) {\n        this.otherUserLocations(providers, this.currentProfession, this.distBtw);\n      }\n    },\n\n    closeMapChat () {\n      this.isMapChat = false\n    },\n\n    async returnToMainPanel () {\n      this.isMainPanel = true;\n      window.localStorage.removeItem('mapSearchData')\n      this.noSelectUser();\n\n      // const providers = await providerService.getProviders()\n      // if (providers !== null) {\n      //   this.otherUserLocations(providers, \"\", \"\");\n      // }\n      //this.currentProfession = \"\"\n      // this.prof = \"\";\n      // this.distBtw = 0\n    },\n\n    closeMainPanel () {\n      this.isMainPanel = false;\n      this.noSelectUser();\n      console.log(\"Close main panel\")\n    },\n\n    // renderClients (event) {\n    //   console.log(\"Event value \" + event.target.value)\n    //   //this.countOfSelectedClients = 0;\n    //\n    //   if (event.target.value) {\n    //     // @click=\"renderClients($event)\"\n    //     this.showClientLocationOnTheMap(event.target.value)\n    //\n    //   }\n    //   this.prof = event.target.value\n    //\n    //   event.target.value = \"\"\n    //\n    // },\n\n\n    async showClientLocationOnTheMap (profession, dist) {\n\n      console.log(\"Current distance herexx  \" + dist)\n      const providers = await providerService.getProviders()\n      if (providers !== null) {\n        this.otherUserLocations(providers, profession, dist);\n      }\n\n    },\n    identifyProfText () {\n      if (this.countOfSelectedProfessional > 1) {\n        this.professional = \"ammattilaista\"\n      } else {\n        this.professional = \"ammattilainen\"\n      }\n    }\n\n  }\n}\n</script>\n\n<style>\n.ui.button,\n.dot.circle {\n  background-color: #ff5a5f;\n  color: white;\n}\n\n\n\n.pac-icon {\n  display: none;\n}\n.pac-item {\n  padding: 10px;\n  font-size: 16px;\n  cursor: pointer;\n}\n.pac-item:hover {\n  background-color: #ececec;\n}\n.pac-item-query {\n  font-size: 16px;\n}\n.spinner-border {\n\n}\n\n\n#map {\n  background:  url(/src/assets/map.gif)  no-repeat center center;\n\n}\n\n#map {\n   position: absolute;\n\n  /*height: 500px; !* The height is 400 pixels *!*/\n  /*width: 100%; !* The width is the width of the web page *!*/\n\n   top: 120px;\n   right: 0;\n   bottom: 0;\n   left: 0;\n }\n\n.map-info-window {\n  /*width: 200px;*/\n\n}\n\n#panel {\n  margin-top: 10px;\n}\n\n@media only screen and (max-width: 1000px) {\n  #panel {\n    display: none !important;\n\n  }\n}\n\n.activeClients {\n  display: none !important;\n}\n.noClients {\n  display: none !important;\n}\n.hideDistSelectPanel {\n  display: none !important;\n}\n.hideMainPanel {\n  display: none !important;\n}\nh3 {\n  padding: 10px;\n  color: #0095ff;\n}\n.minmax-icon {\n  padding: 12px;\n}\n\n.map-info-table  td {\n  border: 1px solid blue;\n  padding: 5px;\n}\n\n.order{\n  color:yellow;\n\n  /*background-color:rgba(255, 0, 0, 0.5);*/\n  /*background-color:#221a16;*/\n  background-color: #434240;\n  /*opacity: 0.2  ;*/\n  /*height:300px;*/\n  width:90%;\n  margin: auto;\n  padding: 14px;\n  /*display:flex;*/\n  /*align-items:center;*/\n  /*justify-content:center;*/\n\n\n  /*top: 50vh; left: 50vw; transform: translate(-50%, -50%);*/\n  /*top: 50vh; left: 50vw; transform: translate(-50%, -50%);*/\n  position:relative;\n  /*bottom:5px;*/\n  /*right:5px;*/\n}\n\n</style>","import { render } from \"./RecipientPublic.vue?vue&type=template&id=61b54982\"\nimport script from \"./RecipientPublic.vue?vue&type=script&lang=js\"\nexport * from \"./RecipientPublic.vue?vue&type=script&lang=js\"\n\nimport \"./RecipientPublic.vue?vue&type=style&index=0&id=61b54982&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["res","distance","origin","google","maps","LatLng","destination","service","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","unitSystem","UnitSystem","METRIC","durationInTraffic","avoidHighways","avoidTolls","response_data","responseDis","status","DistanceMatrixStatus","OK","console","log","rows","elements","text","alert","test","_createVNode","_createTextVNode","theDist","geometry","spherical","computeDistanceBetween","toFixed","style","id","value","key","class","colspan","_createElementBlock","_component_MDBContainer","default","_withCtx","_createElementVNode","_normalizeClass","hideMainPanel","$data","isMainPanel","_hoisted_1","_component_MDBIcon","size","onClick","$options","closeMainPanel","_cache","_","_component_MDBBtnClose","white","$event","_ctx","$router","go","_hoisted_2","_component_MDBInput","label","modelValue","address","wrapperClass","_hoisted_3","_component_Dropdown","onChange","changedProfession","prof","options","prodata","filter","optionLabel","optionGroupLabel","optionGroupChildren","placeholder","optiongroup","slotProps","_hoisted_7","_toDisplayString","option","_hoisted_4","_hoisted_5","_hoisted_6","hideDistSelectPanel","isDistSelection","distBtw","args","filterByDistance","disabled","noClients","isActiveProffs","_createCommentVNode","isMapChat","_hoisted_8","closeMapChat","_component_chat_panel","chatusers","$props","messages","selecteduser","selectUser","onNoSelected","noSelectUser","onMessage","isTargetSelected","_hoisted_9","_hoisted_10","outFromMarkerPanel","_hoisted_11","target","yritys","ytunnus","range","this","priceByHour","negative","_component_MDBBadge","color","pill","notification","rating","positive","pro_link","_hoisted_12","href","_hoisted_13","user","userId","_hoisted_14","_hoisted_15","_component_MDBBtn","block","createChatPanel","isOrder","_hoisted_16","_hoisted_17","createBooking","_hoisted_18","_hoisted_19","onSubmit","_withModifiers","confirmOrder","_hoisted_20","orderHeader","_hoisted_21","_component_VueDatePicker","orderDate","dark","Date","onInternalModelChange","handleInternalDate","state","isNoDate","_component_MDBTextarea","maxlength","orderDescription","invalidFeedback","validFeedback","_hoisted_22","length","type","_hoisted_23","_hoisted_24","returnToMainPanel","countOfSelectedProfessional","_hoisted_25","name","props","userIsProvider","Object","Array","isProviderLoggedIn","Boolean","components","chatPanel","MDBContainer","MDBInput","MDBBtn","MDBBtnClose","MDBRow","MDBCol","MDBIcon","MDBBadge","MDBTextarea","Dropdown","VueDatePicker","data","obj","isCreatingChatPanel","username","providerId","myLat","mylng","professional","currentProfession","proData","room","isChatPanel","providers","selectedProPosition","mounted","loggedUserJSON","window","localStorage","getItem","JSON","parse","resizeMap","Marker","icon","userCurrentLocation","mapSearch","profession","showClientLocationOnTheMap","mapSearchPro","currentPro","openMarker","selectDistance","document","getElementById","addEventListener","event","parseFloat","setItem","stringify","input","center","lat","lng","defaultBounds","north","south","east","west","bounds","componentRestrictions","country","fields","strictBounds","autocomplete","places","Autocomplete","addListener","place","getPlace","location","myLng","getAddressFrom","formatted_address","methods","puhasta","removeItem","$emit","content","blob","date","myMap","height","width","receive","push","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","showUserLocationOnTheMap","pinSymbol","path","fillColor","fillOpacity","strokeColor","strokeWeight","scale","Map","zoom","mapTypeId","MapTypeId","ROADMAP","accuracy","long","axios","get","then","response","error_message","error","results","catch","message","distanceBtw","originLat","originLng","destLat","destLng","otherUserLocations","dist","prev_infowindow","map","count","pos","forEach","marker","fontWeight","fontSize","myGlobalFunction","infowindow","InfoWindow","p","close","open","setContent","identifyProfText","handleInitChat","createChatRoom","pro","providerUsername","providerID","chatCredentials","proID","userID","initChatRoom","chatData","providersMatchingProSearch","providerService","getProvidersMatchingByProfession","result","dataForward","pms","parseInt","concat","socket","emit","getProviders","recipient","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","dateForMs","getTime","created","created_ms","header","isIncludeOffers","hours","minutes","description","ordered","booking","recipientService","addRecipient","proBooking","getBookingById","addProviderData","bookingToProvider","addProviderBooking","__exports__","render"],"sourceRoot":""}