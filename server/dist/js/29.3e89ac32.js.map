{"version":3,"file":"js/29.3e89ac32.js","mappings":"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","sources":["webpack://prore-mongo/./src/pages/RecipientPublic.vue","webpack://prore-mongo/./src/pages/RecipientPublic.vue?a5fc"],"sourcesContent":["<template>\r\n  <div>\r\n\r\n    <MDBContainer\r\n        style=\"position: relative; z-index: 1;\r\n        opacity: 0.8;\r\n        margin-top: 60px;\"\r\n    >\r\n\r\n      <div id=\"test\" style=\"background-color:white;\">\r\n        <MDBInput\r\n            label=\"Anna osoitteesi\"\r\n            v-model=\"address\"\r\n            id=\"autocomplite\"\r\n            size=\"lg\"\r\n            wrapperClass=\"mb-4\"/>\r\n      </div>\r\n\r\n\r\n      <div class=\"ui large segment form\">\r\n\r\n        <div class=\"field\">\r\n          <select id=\"listOfProfessions\" v-model=\"prof\" >\r\n            <option disabled value=\"\">Valitse ammattilainen</option>\r\n            <option value=\"Putkimies\">Putkimies</option>\r\n            <option value=\"Sähkömies\">Sähkömies</option>\r\n            <option value=\"Siivooja\">Siivooja</option>\r\n          </select>\r\n        </div>\r\n        <h3\r\n            :class=\"{activeClients: !isActiveProffs}\"\r\n        >\r\n          {{ countOfSelectedProfessional + \" \" + professional }} tarjoaa palvelua\r\n        </h3>\r\n        <h3\r\n            v-if=\"prof\"\r\n            :class=\"{noClients: isActiveProffs}\"\r\n        >\r\n          Ei ammattilaisia vielä!\r\n        </h3>\r\n\r\n      </div>\r\n\r\n\r\n\r\n      <MDBBtn color=\"dark\"\r\n              size=\"lg\"\r\n              block\r\n              @click=\"receive\"\r\n              style=\"position: relative; z-index:1; opacity: 1.2;\"\r\n      >\r\n        Tee uusi tilaus\r\n      </MDBBtn>\r\n\r\n\r\n      <MDBBtn color=\"danger\"\r\n              size=\"lg\"\r\n              block\r\n              @click=\"$router.push('/received')\"\r\n              style=\"position: relative; z-index:1; opacity: 1.0;\"\r\n      >\r\n        Poistu\r\n      </MDBBtn>\r\n\r\n\r\n    </MDBContainer>\r\n\r\n    <section id=\"map\"></section>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\n/*global google*/\r\nimport axios from 'axios'\r\nimport recipientService from '../service/recipients'\r\nimport providerService from '../service/providers'\r\nimport {\r\n  MDBContainer,\r\n  MDBInput,\r\n  MDBBtn\r\n} from \"mdb-vue-ui-kit\";\r\nimport gMap from '../components/location'\r\nexport default {\r\n  name: \"recipient-public\",\r\n  props: {\r\n    userIsProvider: Object,\r\n    isProviderLoggedIn: Boolean\r\n  },\r\n  components: {\r\n    MDBContainer,\r\n    MDBInput,\r\n    MDBBtn\r\n  },\r\n  data () {\r\n    return {\r\n      prof: \"\",\r\n      userId: null,\r\n      providerId: null,\r\n      address: null,\r\n      myLat: null,\r\n      mylng: null,\r\n      countOfSelectedProfessional: 0,\r\n      isActiveProffs: false,\r\n      professional: \"\"\r\n\r\n    }\r\n  },\r\n  mounted () {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedAppUser')\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON)\r\n      this.userId = user.id\r\n      //console.log(\"User token: \" + this.loggedUser.token)\r\n    }\r\n\r\n    //console.log(\"Is provider in \" + this.isProviderLoggedIn)\r\n\r\n    //console.log(\"User id in providers \" + this.userId)\r\n\r\n\r\n\r\n    //this.setProviderId()\r\n\r\n    const myMarker = new google.maps.Marker({\r\n      icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\r\n    })\r\n\r\n    this.userCurrentLocation();\r\n\r\n    const selectProfession = document.getElementById(\"listOfProfessions\")\r\n\r\n    selectProfession.addEventListener(\"change\", (event) => {\r\n      //alert(\"Profession selected: \" + event.target.value)\r\n      this.showClientLocationOnTheMap(event.target.value)\r\n    })\r\n\r\n    const input = document.getElementById(\"autocomplite\");\r\n\r\n    const center = { lat: 50.064192, lng: -130.605469 };\r\n    const defaultBounds = {\r\n      north: center.lat + 0.1,\r\n      south: center.lat - 0.1,\r\n      east: center.lng + 0.1,\r\n      west: center.lng - 0.1,\r\n    };\r\n    const options = {\r\n      bounds: defaultBounds,\r\n      componentRestrictions: { country: \"fi\" },\r\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\", \"formatted_address\"],\r\n      strictBounds: false,\r\n      //types: [\"establishment\"],\r\n    };\r\n    const autocomplete = new google.maps.places.Autocomplete(input, options);\r\n\r\n    autocomplete.addListener(\"place_changed\", () => {\r\n      let place = autocomplete.getPlace()\r\n      this.myLat = place.geometry.location.lat();\r\n      this.myLng = place.geometry.location.lng();\r\n\r\n      this.getAddressFrom(place.geometry.location.lat(), place.geometry.location.lng())\r\n      this.address = place.formatted_address\r\n      console.log(place)\r\n    });\r\n\r\n\r\n\r\n\r\n    // let map = new google.maps.Map(document.getElementById(\"map\"), {\r\n    //   zoom: 13,\r\n    //   center: new google.maps.LatLng(this.myLat, this.myLng),\r\n    //   mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n    //   accuracy: 50,\r\n    //\r\n    // });\r\n\r\n  },\r\n  methods: {\r\n    receive (){\r\n      this.$router.push('/rf')\r\n      // if (!this.isProviderLoggedIn) {\r\n      //   this.$router.push('/provider-form')\r\n      // } else {\r\n      //   this.$router.push('/provider-panel')\r\n      // }\r\n\r\n      // if (this.userId === this.providerId) {\r\n      //   this.$router.push('/provider-form')\r\n      // } else {\r\n      //   this.$router.push('/provider-panel')\r\n      // }\r\n    },\r\n    userCurrentLocation () {\r\n      // const watchId = navigator.geolocation.watchPosition(position => {\r\n      //   const { latitude, longitude } = position.coords;\r\n      //   // Show a map centered at latitude / longitude.\r\n      //   console.log(\"Position lat: \" + position.coords.latitude)\r\n      //   console.log(\"Position lng: \" + position.coords.longitude)\r\n      //   this.showUserLocationOnTheMap(position.coords.latitude, position.coords.longitude)\r\n      // });\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n          const { latitude, longitude } = position.coords;\r\n          // Show a map centered at latitude / longitude.\r\n          this.myLat = latitude\r\n          this.myLng = longitude\r\n\r\n          this.showUserLocationOnTheMap (latitude, longitude)\r\n        });\r\n      }\r\n\r\n    },\r\n\r\n    pinSymbol(color) {\r\n      return {\r\n        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',\r\n        fillColor: color,\r\n        fillOpacity: 1,\r\n        strokeColor: '#000',\r\n        strokeWeight: 2,\r\n        scale: 1\r\n      };\r\n    },\r\n\r\n    showUserLocationOnTheMap (latitude, longitude) {\r\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\r\n        zoom: 13,\r\n        center: new google.maps.LatLng(latitude, longitude),\r\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n        accuracy: 50,\r\n\r\n      });\r\n      // new google.maps.Marker({\r\n      //   icon: 'http://maps.google.com/mapfiles/ms/icons/white-dot.png',\r\n      //   position: new google.maps.LatLng(latitude, longitude),\r\n      //   accuracy: 50,\r\n      //   map: map\r\n      // })\r\n\r\n      // Oma asukoha marker\r\n\r\n      // new google.maps.Marker({\r\n      //   position: new google.maps.LatLng(latitude, longitude),\r\n      //   accuracy: 50,\r\n      //   map: map,\r\n      //   icon: this.pinSymbol('yellow'),\r\n      //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\r\n      // })\r\n\r\n\r\n    },\r\n\r\n    getAddressFrom (lat, long) {\r\n      axios.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat +\r\n          \",\" + long\r\n          + \"&key=\" + 'AIzaSyBDA2EBoGezJx51wQtxoW3Ecq5Ql8CCAiE')\r\n          .then(response => {\r\n            if (response.data.error_message) {\r\n              this.error = response.data.error_message;\r\n\r\n              console.log(response.data.error_message)\r\n            } else {\r\n              const map = new google.maps.Map(document.getElementById(\"map\"), {\r\n                zoom: 13,\r\n                center: new google.maps.LatLng(lat, long),\r\n                mapTypeId: google.maps.MapTypeId.ROADMAP\r\n              });\r\n\r\n              // new google.maps.Marker({\r\n              //   position: new google.maps.LatLng(lat, long),\r\n              //   accuracy: 50,\r\n              //   map: map,\r\n              //   icon: this.pinSymbol('yellow'),\r\n              //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\r\n              // })\r\n\r\n              //this.address = response.data.results[0].formatted_address\r\n              console.log(response.data.results.results[0].formatted_address)\r\n            }\r\n\r\n          })\r\n          .catch(error => {\r\n            this.error = error.message\r\n            console.log(error.message)\r\n          })\r\n    },\r\n\r\n\r\n    otherUserLocations (recipients, profession) {\r\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\r\n        zoom: 9,\r\n        center: new google.maps.LatLng(this.myLat, this.myLng),\r\n        mapTypeId: google.maps.MapTypeId.ROADMAP\r\n      });\r\n      console.log(\"Users count: \" + recipients.length)\r\n\r\n      // new google.maps.Marker({\r\n      //   position: new google.maps.LatLng(this.myLat, this.myLng),\r\n      //   accuracy: 50,\r\n      //   map: map,\r\n      //   icon: this.pinSymbol('yellow'),\r\n      //   label: { color: '#00aaff', fontWeight: 'bold', fontSize: '14px', text: 'Olen tällä' }\r\n      // })\r\n\r\n      let count = 0;\r\n      if (recipients.length > 0) {\r\n        for (let pos = 0; pos < recipients.length; pos++) {\r\n\r\n          //console.log(\"Client latitude: \" + recipient[pos].latitude)\r\n          //console.log(\"Client longitude: \" + recipient[pos].longitude)\r\n\r\n          recipients[pos].professional.forEach(prof => {\r\n            if (prof === profession) {\r\n              //this.countOfSelectedClient++;\r\n              this.isActiveProffs = true;\r\n              count ++;\r\n              new google.maps.Marker({\r\n                position: new google.maps.LatLng(recipients[pos].latitude, recipients[pos].longitude),\r\n                map: map\r\n              })\r\n            }\r\n          })\r\n\r\n        }\r\n        if (count > 0) {\r\n          this.isActiveProffs = true;\r\n        } else {\r\n          this.isActiveProffs = false;\r\n        }\r\n        this.countOfSelectedProfessional = count;\r\n        this.identifyProfText();\r\n        //console.log(\"Count \" + this.countOfSelectedClients)\r\n\r\n      }\r\n\r\n    },\r\n\r\n    renderClients (event) {\r\n      console.log(\"Event value \" + event.target.value)\r\n      //this.countOfSelectedClients = 0;\r\n\r\n      if (event.target.value) {\r\n        // @click=\"renderClients($event)\"\r\n        this.showClientLocationOnTheMap(event.target.value)\r\n\r\n      }\r\n      this.prof = event.target.value\r\n\r\n      event.target.value = \"\"\r\n\r\n    },\r\n\r\n\r\n    async showClientLocationOnTheMap (profession) {\r\n\r\n\r\n      const recipients = await recipientService.getRecipients()\r\n      if (recipients !== null) {\r\n        this.otherUserLocations(recipients, profession);\r\n      }\r\n      // visibility: hidden;\r\n\r\n    },\r\n    identifyProfText () {\r\n      //console.log(\"Teenuse pakkujate arv: \" + this.countOfSelectedProffessional)\r\n      if (this.countOfSelectedProffessional > 1) {\r\n        this.professional = \"ammattilaista\"\r\n      } else {\r\n        this.professional = \"ammattilainen\"\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.ui.button,\r\n.dot.circle {\r\n  background-color: #ff5a5f;\r\n  color: white;\r\n}\r\n\r\n.pac-icon {\r\n  display: none;\r\n}\r\n.pac-item {\r\n  padding: 10px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n}\r\n.pac-item:hover {\r\n  background-color: #ececec;\r\n}\r\n.pac-item-query {\r\n  font-size: 16px;\r\n}#map {\r\n   position: absolute;\r\n   top: 50px;\r\n   right: 0;\r\n   bottom: 0;\r\n   left: 0;\r\n }\r\n\r\n@media only screen and (max-width: 1000px) {\r\n  #test {\r\n    display: none !important;\r\n\r\n  }\r\n}\r\n\r\n.activeClients {\r\n  display: none !important;\r\n}\r\n.noClients {\r\n  display: none !important;\r\n}\r\n\r\n\r\n</style>","import { render } from \"./RecipientPublic.vue?vue&type=template&id=1c49bcb0\"\nimport script from \"./RecipientPublic.vue?vue&type=script&lang=js\"\nexport * from \"./RecipientPublic.vue?vue&type=script&lang=js\"\n\nimport \"./RecipientPublic.vue?vue&type=style&index=0&id=1c49bcb0&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["id","style","class","_createElementVNode","disabled","value","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_createElementBlock","_createVNode","_component_MDBContainer","_hoisted_1","_component_MDBInput","label","$data","address","$event","size","wrapperClass","_hoisted_2","_hoisted_3","prof","_normalizeClass","activeClients","isActiveProffs","countOfSelectedProfessional","professional","noClients","_component_MDBBtn","color","block","onClick","$options","receive","_cache","_ctx","$router","push","_hoisted_9","name","props","userIsProvider","Object","isProviderLoggedIn","Boolean","components","MDBContainer","MDBInput","MDBBtn","data","userId","providerId","myLat","mylng","mounted","loggedUserJSON","window","localStorage","getItem","user","JSON","parse","this","google","maps","Marker","icon","userCurrentLocation","selectProfession","document","getElementById","addEventListener","event","showClientLocationOnTheMap","target","input","center","lat","lng","defaultBounds","north","south","east","west","options","bounds","componentRestrictions","country","fields","strictBounds","autocomplete","places","Autocomplete","addListener","place","getPlace","geometry","location","myLng","getAddressFrom","formatted_address","console","log","methods","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","showUserLocationOnTheMap","pinSymbol","path","fillColor","fillOpacity","strokeColor","strokeWeight","scale","Map","zoom","LatLng","mapTypeId","MapTypeId","ROADMAP","accuracy","long","axios","get","then","response","error_message","error","results","catch","message","otherUserLocations","recipients","profession","map","length","count","pos","forEach","identifyProfText","renderClients","async","recipientService","getRecipients","countOfSelectedProffessional","__exports__","render"],"sourceRoot":""}